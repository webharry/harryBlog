{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1502935460000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1502935460000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1502935460000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1502935460000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1502935460000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1502935460000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1502935460000},{"_id":"themes/next/.travis.yml","hash":"ee90f9452591ebba1b9cfba2543281109d3afdce","modified":1502935460000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1502935460000},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1502935460000},{"_id":"themes/next/README.md","hash":"fa61cf773fff1ddaaf9bbcfa60d1e6074e6690ec","modified":1502935460000},{"_id":"themes/next/_config.yml","hash":"8504e11afb709eaba3c029318230dee93c3d25ec","modified":1507533190000},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1502935460000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1502935460000},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1502935462000},{"_id":"source/tags/index.md","hash":"39e659f57418470443e7b9ce643f7bf5bdd1dd4c","modified":1510642054000},{"_id":"source/_posts/BFC.md","hash":"a22d76cd54bc7d72fb6b68c04e84ee7e38a7b82e","modified":1510642054000},{"_id":"source/_posts/CORS.md","hash":"aeb5fbf3df3baaff90ce9ef45e9e425ffe3e9d84","modified":1510642054000},{"_id":"source/_posts/CSS3-attribute.md","hash":"8b18057082867d9d0da7fd27e18d3118315fb6b6","modified":1510642054000},{"_id":"source/_posts/Object-prototype-toString-call.md","hash":"dcb0c3f8f2b050dba9a5c5a756802bad6baabe3d","modified":1510642054000},{"_id":"source/_posts/RegExp.md","hash":"5114d76b8c7ee8a41093a4e3273688f1e41d760f","modified":1510642054000},{"_id":"source/_posts/angular-copy.md","hash":"5c618878488ddc54a7765b41d56ab29c2a42e51a","modified":1510657841000},{"_id":"source/_posts/angular-file-upload.md","hash":"11ced298c794fd69cf9ea021eab10b4989ed27e9","modified":1510642054000},{"_id":"source/_posts/angular-instruction.md","hash":"c84d3f5ee09514ba10e0ad3f0fbab6b76e3f2cf9","modified":1510642054000},{"_id":"source/_posts/apply-call-bind.md","hash":"4878bea375d0de25d29a57ef04ea967fca079963","modified":1510642054000},{"_id":"source/_posts/create-npm-plug.md","hash":"2c63c82e28ead327d5212ed67f22d3cff0f9b5db","modified":1512291694469},{"_id":"source/_posts/gulp-dev.md","hash":"8957077b1ec5366511dafa3b5df6f3ea0de5cfed","modified":1510642054000},{"_id":"source/_posts/gulp-use.md","hash":"161a3c3be4369bb657de7cd641e7be905f803a66","modified":1510642054000},{"_id":"source/_posts/jsonp.md","hash":"70c981ed7e85ace80686457a27f5a9f747f192f5","modified":1510642054000},{"_id":"source/_posts/less快速入门.md","hash":"689a121cab5d88a634aa657baa250a1c08b33fb4","modified":1510642054000},{"_id":"source/_posts/ng-option.md","hash":"1df3eeefdc491aac851718533ed1a62aa8c78c3c","modified":1510642054000},{"_id":"source/_posts/plugins-browsersync.md","hash":"7164b11ec9c9dd78109200c6d0da77f82a856fd8","modified":1510642054000},{"_id":"source/_posts/proxy.md","hash":"dc21e9e95882225d0c9d5df0d8b8527a77974b75","modified":1510642054000},{"_id":"source/_posts/slect2.md","hash":"f98dffd9e702803961f0ebf84f22b3ab77c312bb","modified":1510642054000},{"_id":"source/_posts/svn.md","hash":"fc1bc58dceb3bb9ddae1280dbab3d43b2248e9d7","modified":1513158249972},{"_id":"source/_posts/ui-select.md","hash":"637e102b68fbc933ea2fa8869d27cb3dfef4fb13","modified":1512628837629},{"_id":"source/_posts/webpack-use.md","hash":"744b1ee0057b034990fbe2adf88c7254673240a6","modified":1510642054000},{"_id":"source/_posts/数组交集-并集.md","hash":"d02120da18bbb4f4faf8d8a8b5c2be0fc145ee16","modified":1511923276000},{"_id":"source/web/index.md","hash":"35cfd63974ce1e7b6e7f02802bebda7a6ff29cab","modified":1510642054000},{"_id":"themes/next/languages/de.yml","hash":"ee6262473faa1fa55e3dc7b0bb6542f4f6a275c8","modified":1502935460000},{"_id":"themes/next/languages/default.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1502935460000},{"_id":"themes/next/languages/en.yml","hash":"e729bd8f1574f43f4518b5dfbe4353b7417ba062","modified":1507531100000},{"_id":"themes/next/languages/fr-FR.yml","hash":"c6f3a38a6c27d0815ef72d66020805408aa24019","modified":1502935460000},{"_id":"themes/next/languages/id.yml","hash":"58c9886ccd224cee3db6f9b9e1a86dcd4ff47995","modified":1502935460000},{"_id":"themes/next/languages/ja.yml","hash":"6ba8858255b4cae5e00f5fabd1cfaea3c98a34c2","modified":1502935460000},{"_id":"themes/next/languages/ko.yml","hash":"fbfad308103fb95c635609419bfa3420cb69d646","modified":1502935460000},{"_id":"themes/next/languages/pt-BR.yml","hash":"5e160fa8c8bd1f16b50db161d5bc8ae2ebd6a0c5","modified":1502935460000},{"_id":"themes/next/languages/pt.yml","hash":"1141a4896986de6e2383c5694c0359eaa22fb9b4","modified":1502935460000},{"_id":"themes/next/languages/ru.yml","hash":"43a8fb18dbfeaeed71268d75eb4c542061766419","modified":1502935460000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0b9ce7d62e7d55235a2770817a40e84577ce38c1","modified":1507533774000},{"_id":"themes/next/languages/zh-hk.yml","hash":"13b2808d632c27748a38a752457d4538c37b8ebb","modified":1502935460000},{"_id":"themes/next/languages/zh-tw.yml","hash":"a91f6c8fa19044afac162a1c73e03836e9460bc5","modified":1502935460000},{"_id":"themes/next/layout/_layout.swig","hash":"864a5addcfae5c4a2d31fbb4b342c58afbe10362","modified":1507519810000},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1502935462000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1502935462000},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1502935462000},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1502935462000},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1502935462000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1502935462000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1502935462000},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1502935462000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1502935462000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1502935466000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1502935466000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1502935466000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935464000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1502935460000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1502935460000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1502935460000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1502935460000},{"_id":"themes/next/layout/_macro/post.swig","hash":"197b95f6b81e5f1b9cdbb9dcc14075e83c3e6fd5","modified":1507533656000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1502935460000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1502935460000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1502935460000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1502935460000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0fb9e61e885723165ee5675fee447a64b33e6421","modified":1507529166000},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1502935460000},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1502935460000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1502935462000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1502935462000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1502935462000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1502935462000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1502935462000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"19afa1a4a829d6b789d0b87ecb0f4dbd6dc7e5df","modified":1507519458000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1502935462000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1502935462000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1502935462000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1502935462000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1502935462000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1502935462000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1502935462000},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1502935462000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1502935462000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1502935462000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1502935462000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1502935462000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1502935462000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1502935462000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1502935462000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1502935462000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1502935464000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1502935464000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502935464000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1502935464000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1502935464000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1502935464000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1502935464000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1502935464000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1502935464000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1502935466000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502935466000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502935466000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1502935466000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1502935466000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502935466000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935462000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935462000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935464000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935464000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935464000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935464000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502935464000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1502935460000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1502935460000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1502935462000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1502935462000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1502935462000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1502935462000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1502935462000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1502935462000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1502935462000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1502935462000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1502935462000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1502935462000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1502935462000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1502935462000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1502935462000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1502935462000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1502935462000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1502935462000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1502935464000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1502935464000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1502935464000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1502935464000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1502935464000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1502935464000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1502935464000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1502935464000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1502935466000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1502935466000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1502935466000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1502935466000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1502935466000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1502935466000},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1502935466000},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1502935466000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1502935466000},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1502935466000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1502935466000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502935466000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502935466000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1502935466000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1502935466000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1502935466000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1502935466000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1502935466000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1502935466000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1502935466000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1502935466000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1502935466000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1502935466000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1502935466000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502935466000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1502935466000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1502935466000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1502935466000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1502935466000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1502935466000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1502935466000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1502935466000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1502935466000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1502935466000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1502935466000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1502935462000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1502935462000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1502935462000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1502935462000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1502935462000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1502935462000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1502935462000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1502935464000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1502935464000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"be4e44ab7b407c379cdba56fd5595a273c578598","modified":1502935464000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1502935464000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1502935464000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1502935464000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1502935464000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"36026bc6e8d3a631f109d766fdd21857697650a0","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1502935464000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1502935466000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1502935466000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1502935466000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1502935466000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502935466000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1502935466000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"23c7a129452f7708fe7e29ce7ef2df969de9951d","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1502935464000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1502935464000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1502935464000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502935466000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1502935466000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502935466000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1502935466000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1502935466000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1502935466000}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-09-29T11:11:09.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-09-29 19:11:09\ntype: \"tags\"\n---\n","updated":"2017-11-14T06:47:34.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjb4xyzhs0000mo01ty6poj7h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"web","date":"2017-03-05T02:18:43.000Z","_content":"\n","source":"web/index.md","raw":"---\ntitle: web\ndate: 2017-03-05 10:18:43\n---\n\n","updated":"2017-11-14T06:47:34.000Z","path":"web/index.html","comments":1,"layout":"page","_id":"cjb4xyzmo001wmo0122f4b3ww","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"BFC","date":"2017-09-26T11:57:25.000Z","_content":"\n### BFC是什么？\n\nBFC(Block Formatting Context)块级格式化上下文，也是CSS一种盒模型渲染样式，w3c定义只要满足一下条件之一，就能创建一个BFC：\n\n#### 1.float属性不为none;\n\n#### 2.display属性值不为static和relative;\n\n#### 3.display属性为以下之一：table-cell,table-caption,inline-block,flex,inline-flex；\n\n#### 4.overflow属性不为visible。\n\n### 解决了什么问题？\n\n创建一个BFC很简单，只需包含上文定义中的4点任意一个就OK，来看看能解决什么问题：\n\n#### 1.解决外边距折叠\n\n```html\n\n<div class=\"container\">\n  <div class=\"sub-div\"></div>\n  <div class=\"bfc\">\n    <div class=\"sub-div\"></div>\n  </div>\n</div>\n\n```\n\n```js\n\n.container{\n  background-color:#ccc;\n  height: 200px;\n  width: 100%;\n}\n.sub-div {\n  background-color: red;\n  height:50px;\n  margin：10px 0;\n}\n.bfc {\n  overflow: hidden;//添加overflow属性，创建一个新BFC,从而避免外边距折叠\n}\n\n```\n\n#### 2.用于清除浮动\n\n```html\n\n<div class=\"container\">\n    <div class=\"sub\"></div>\n    <div class=\"sub\"></div>\n</div>\n\n```\n\n```css\n\n.container{\n  background-color: #ccc;\n  overflow:hidden;//通过给父元素添加overflow 属性，创建一个BFC,达到清除浮动效果。\n}\n.sub {\n  float: left;\n  height:30px;\n  width:50px;\n  background-color: red;\n  margin:0 10px;\n}\n```\n\n#### 3.多列布局中避免折行显示\n\n```html\n\n<div class=\"container\">\n    <div class=\"sub\"></div>\n    <div class=\"sub\"></div>\n    <div class=\"sub\"></div>\n</div>\n```\n\n由于浏览器舍入规则，子元素的宽度可能会超过容器总宽度，将会导致折行：\n\n```css\n\n* {\n margin:0;\n}\n.container{\n  background-color: #ccc;\n}\n.sub {\n  float: left;\n  height:30px;\n  background-color:green;\n  width:31.33%;\n  margin:0 1%;\n}\n.sub:last-child {//通过给最后一个子元素 创建一个BFC解决折行问题。\n  float:none;\n  overflow:hidden;\n}\n```\n\n### 总结\n\nBFC就是通过创建一个新的盒模型，使之脱离原本的布局限制，达到互不影响布局的效果。创建BFC 可以通过以上4种方式达到。","source":"_posts/BFC.md","raw":"---\ntitle: BFC\ndate: 2017-09-26 19:57:25\ntags:\n    - CSS\n    - frontend\n---\n\n### BFC是什么？\n\nBFC(Block Formatting Context)块级格式化上下文，也是CSS一种盒模型渲染样式，w3c定义只要满足一下条件之一，就能创建一个BFC：\n\n#### 1.float属性不为none;\n\n#### 2.display属性值不为static和relative;\n\n#### 3.display属性为以下之一：table-cell,table-caption,inline-block,flex,inline-flex；\n\n#### 4.overflow属性不为visible。\n\n### 解决了什么问题？\n\n创建一个BFC很简单，只需包含上文定义中的4点任意一个就OK，来看看能解决什么问题：\n\n#### 1.解决外边距折叠\n\n```html\n\n<div class=\"container\">\n  <div class=\"sub-div\"></div>\n  <div class=\"bfc\">\n    <div class=\"sub-div\"></div>\n  </div>\n</div>\n\n```\n\n```js\n\n.container{\n  background-color:#ccc;\n  height: 200px;\n  width: 100%;\n}\n.sub-div {\n  background-color: red;\n  height:50px;\n  margin：10px 0;\n}\n.bfc {\n  overflow: hidden;//添加overflow属性，创建一个新BFC,从而避免外边距折叠\n}\n\n```\n\n#### 2.用于清除浮动\n\n```html\n\n<div class=\"container\">\n    <div class=\"sub\"></div>\n    <div class=\"sub\"></div>\n</div>\n\n```\n\n```css\n\n.container{\n  background-color: #ccc;\n  overflow:hidden;//通过给父元素添加overflow 属性，创建一个BFC,达到清除浮动效果。\n}\n.sub {\n  float: left;\n  height:30px;\n  width:50px;\n  background-color: red;\n  margin:0 10px;\n}\n```\n\n#### 3.多列布局中避免折行显示\n\n```html\n\n<div class=\"container\">\n    <div class=\"sub\"></div>\n    <div class=\"sub\"></div>\n    <div class=\"sub\"></div>\n</div>\n```\n\n由于浏览器舍入规则，子元素的宽度可能会超过容器总宽度，将会导致折行：\n\n```css\n\n* {\n margin:0;\n}\n.container{\n  background-color: #ccc;\n}\n.sub {\n  float: left;\n  height:30px;\n  background-color:green;\n  width:31.33%;\n  margin:0 1%;\n}\n.sub:last-child {//通过给最后一个子元素 创建一个BFC解决折行问题。\n  float:none;\n  overflow:hidden;\n}\n```\n\n### 总结\n\nBFC就是通过创建一个新的盒模型，使之脱离原本的布局限制，达到互不影响布局的效果。创建BFC 可以通过以上4种方式达到。","slug":"BFC","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzht0001mo01pjevv6cb","content":"<h3 id=\"BFC是什么？\"><a href=\"#BFC是什么？\" class=\"headerlink\" title=\"BFC是什么？\"></a>BFC是什么？</h3><p>BFC(Block Formatting Context)块级格式化上下文，也是CSS一种盒模型渲染样式，w3c定义只要满足一下条件之一，就能创建一个BFC：</p>\n<h4 id=\"1-float属性不为none\"><a href=\"#1-float属性不为none\" class=\"headerlink\" title=\"1.float属性不为none;\"></a>1.float属性不为none;</h4><h4 id=\"2-display属性值不为static和relative\"><a href=\"#2-display属性值不为static和relative\" class=\"headerlink\" title=\"2.display属性值不为static和relative;\"></a>2.display属性值不为static和relative;</h4><h4 id=\"3-display属性为以下之一：table-cell-table-caption-inline-block-flex-inline-flex；\"><a href=\"#3-display属性为以下之一：table-cell-table-caption-inline-block-flex-inline-flex；\" class=\"headerlink\" title=\"3.display属性为以下之一：table-cell,table-caption,inline-block,flex,inline-flex；\"></a>3.display属性为以下之一：table-cell,table-caption,inline-block,flex,inline-flex；</h4><h4 id=\"4-overflow属性不为visible。\"><a href=\"#4-overflow属性不为visible。\" class=\"headerlink\" title=\"4.overflow属性不为visible。\"></a>4.overflow属性不为visible。</h4><h3 id=\"解决了什么问题？\"><a href=\"#解决了什么问题？\" class=\"headerlink\" title=\"解决了什么问题？\"></a>解决了什么问题？</h3><p>创建一个BFC很简单，只需包含上文定义中的4点任意一个就OK，来看看能解决什么问题：</p>\n<h4 id=\"1-解决外边距折叠\"><a href=\"#1-解决外边距折叠\" class=\"headerlink\" title=\"1.解决外边距折叠\"></a>1.解决外边距折叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bfc\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.container&#123;</div><div class=\"line\">  background-color:#ccc;</div><div class=\"line\">  height: 200px;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">.sub-div &#123;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">  height:50px;</div><div class=\"line\">  margin：10px 0;</div><div class=\"line\">&#125;</div><div class=\"line\">.bfc &#123;</div><div class=\"line\">  overflow: hidden;//添加overflow属性，创建一个新BFC,从而避免外边距折叠</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-用于清除浮动\"><a href=\"#2-用于清除浮动\" class=\"headerlink\" title=\"2.用于清除浮动\"></a>2.用于清除浮动</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.container&#123;</div><div class=\"line\">  background-color: #ccc;</div><div class=\"line\">  overflow:hidden;//通过给父元素添加overflow 属性，创建一个BFC,达到清除浮动效果。</div><div class=\"line\">&#125;</div><div class=\"line\">.sub &#123;</div><div class=\"line\">  float: left;</div><div class=\"line\">  height:30px;</div><div class=\"line\">  width:50px;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">  margin:0 10px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-多列布局中避免折行显示\"><a href=\"#3-多列布局中避免折行显示\" class=\"headerlink\" title=\"3.多列布局中避免折行显示\"></a>3.多列布局中避免折行显示</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>由于浏览器舍入规则，子元素的宽度可能会超过容器总宽度，将会导致折行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* &#123;</div><div class=\"line\"> margin:0;</div><div class=\"line\">&#125;</div><div class=\"line\">.container&#123;</div><div class=\"line\">  background-color: #ccc;</div><div class=\"line\">&#125;</div><div class=\"line\">.sub &#123;</div><div class=\"line\">  float: left;</div><div class=\"line\">  height:30px;</div><div class=\"line\">  background-color:green;</div><div class=\"line\">  width:31.33%;</div><div class=\"line\">  margin:0 1%;</div><div class=\"line\">&#125;</div><div class=\"line\">.sub:last-child &#123;//通过给最后一个子元素 创建一个BFC解决折行问题。</div><div class=\"line\">  float:none;</div><div class=\"line\">  overflow:hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>BFC就是通过创建一个新的盒模型，使之脱离原本的布局限制，达到互不影响布局的效果。创建BFC 可以通过以上4种方式达到。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BFC是什么？\"><a href=\"#BFC是什么？\" class=\"headerlink\" title=\"BFC是什么？\"></a>BFC是什么？</h3><p>BFC(Block Formatting Context)块级格式化上下文，也是CSS一种盒模型渲染样式，w3c定义只要满足一下条件之一，就能创建一个BFC：</p>\n<h4 id=\"1-float属性不为none\"><a href=\"#1-float属性不为none\" class=\"headerlink\" title=\"1.float属性不为none;\"></a>1.float属性不为none;</h4><h4 id=\"2-display属性值不为static和relative\"><a href=\"#2-display属性值不为static和relative\" class=\"headerlink\" title=\"2.display属性值不为static和relative;\"></a>2.display属性值不为static和relative;</h4><h4 id=\"3-display属性为以下之一：table-cell-table-caption-inline-block-flex-inline-flex；\"><a href=\"#3-display属性为以下之一：table-cell-table-caption-inline-block-flex-inline-flex；\" class=\"headerlink\" title=\"3.display属性为以下之一：table-cell,table-caption,inline-block,flex,inline-flex；\"></a>3.display属性为以下之一：table-cell,table-caption,inline-block,flex,inline-flex；</h4><h4 id=\"4-overflow属性不为visible。\"><a href=\"#4-overflow属性不为visible。\" class=\"headerlink\" title=\"4.overflow属性不为visible。\"></a>4.overflow属性不为visible。</h4><h3 id=\"解决了什么问题？\"><a href=\"#解决了什么问题？\" class=\"headerlink\" title=\"解决了什么问题？\"></a>解决了什么问题？</h3><p>创建一个BFC很简单，只需包含上文定义中的4点任意一个就OK，来看看能解决什么问题：</p>\n<h4 id=\"1-解决外边距折叠\"><a href=\"#1-解决外边距折叠\" class=\"headerlink\" title=\"1.解决外边距折叠\"></a>1.解决外边距折叠</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bfc\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.container&#123;</div><div class=\"line\">  background-color:#ccc;</div><div class=\"line\">  height: 200px;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">.sub-div &#123;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">  height:50px;</div><div class=\"line\">  margin：10px 0;</div><div class=\"line\">&#125;</div><div class=\"line\">.bfc &#123;</div><div class=\"line\">  overflow: hidden;//添加overflow属性，创建一个新BFC,从而避免外边距折叠</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-用于清除浮动\"><a href=\"#2-用于清除浮动\" class=\"headerlink\" title=\"2.用于清除浮动\"></a>2.用于清除浮动</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.container&#123;</div><div class=\"line\">  background-color: #ccc;</div><div class=\"line\">  overflow:hidden;//通过给父元素添加overflow 属性，创建一个BFC,达到清除浮动效果。</div><div class=\"line\">&#125;</div><div class=\"line\">.sub &#123;</div><div class=\"line\">  float: left;</div><div class=\"line\">  height:30px;</div><div class=\"line\">  width:50px;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">  margin:0 10px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-多列布局中避免折行显示\"><a href=\"#3-多列布局中避免折行显示\" class=\"headerlink\" title=\"3.多列布局中避免折行显示\"></a>3.多列布局中避免折行显示</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>由于浏览器舍入规则，子元素的宽度可能会超过容器总宽度，将会导致折行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* &#123;</div><div class=\"line\"> margin:0;</div><div class=\"line\">&#125;</div><div class=\"line\">.container&#123;</div><div class=\"line\">  background-color: #ccc;</div><div class=\"line\">&#125;</div><div class=\"line\">.sub &#123;</div><div class=\"line\">  float: left;</div><div class=\"line\">  height:30px;</div><div class=\"line\">  background-color:green;</div><div class=\"line\">  width:31.33%;</div><div class=\"line\">  margin:0 1%;</div><div class=\"line\">&#125;</div><div class=\"line\">.sub:last-child &#123;//通过给最后一个子元素 创建一个BFC解决折行问题。</div><div class=\"line\">  float:none;</div><div class=\"line\">  overflow:hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>BFC就是通过创建一个新的盒模型，使之脱离原本的布局限制，达到互不影响布局的效果。创建BFC 可以通过以上4种方式达到。</p>\n"},{"title":"CORS（cross-origin resourse sharing)跨域资源共享","date":"2017-10-12T02:30:14.000Z","_content":"今天从同源策略出发，探究跨域问题出现的原因及其原理，以及一些常见解决方法。这篇文章主要讲跨域解决办法1.CORS（cross-origin resourse sharing)跨域资源共享。\n\n### 同源策略\n所谓同源，就是比较两个页面的协议、域名、端口是否相同，相同则是同源，有一个不同就视为不同源。\n>根据MDN给出的例子：\n>下表给出了相对http://store.company.com/dir/page.html同源检测的示例:  \n\n| URL       | 结果           | 原因  |\n| ------------- |:-------------:| -----:|\n| http://store.company.com/dir2/other.html     | 成功 | |\n| http://store.company.com/dir/inner/another.html    | 成功      |    |\n| https://store.company.com/secure.html | 失败     |    不同协议 ( https和http ) |\n| http://store.company.com:81/dir/etc.html      | 失败 | 不同端口 ( 81和80) |\n| http://news.company.com/dir/other.html      | 失败      |  不同域名 ( news和store ) |  \n\n\n### 跨域问题\n浏览器为了保证信息安全，规定了资源访问使用同源策略。所以，当浏览器访问的资源来自不同源，就会出现跨源资源访问，即跨域问题。 \n\n#### 解决方法\n##### 1.CORS（cross-origin resourse sharing)跨域资源共享\nCORS是浏览器解决跨域问题的一种策略，在CORS中，浏览器把ajax发起的请求分为简单请求和非简单请求，分别对两种请求进行处理，再将ajax请求发往服务器。\n##### ①简单请求就是满足以下条件的：\n\n请求方式为这几种：\n```shell\nGET,POST,HEAD\n```\n\nHTTP头信息不超出以下几种：\n\n```shell\nAccept\nAccept-Language\nContent-Language\nLast-Event-ID\ncontent-type只限于三种：text/plain，multipart/form-data，application/x-www-form-urlencoded\n\n```\n对于简单请求，浏览器直接发出CORS请求，在头信息中增加一个字段：Origin,表示请求源域名。例子：\n```js\n\nAccept:*/*\nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.8\nConnection:keep-alive\nHost:localhost:3001\nOrigin:http://localhost:3000\n\n```\nOrigin:http://localhost:3000字段告诉服务器请求源是http://localhost:3000，服务器就可以做出相应响应。 \n\n如果服务器发现Oringin字段的源不在接受范围，就会发送一个正常HTTP回应，浏览器发现这个回应的头信息中没有包含Accsess-Control-Allow-Origin字段，就抛出一个错误，被XMLHttpRequest的onerror捕获，即跨域问题出现了。\n\n好了，知道报错原因，我们就可以从以下方法解决跨域问题了：  \n概括为一句话：在服务器设置接受的源信息。\n###### 实例\n客户端请求：\n```js\nvar xhr = new XMLHttpRequest();\nvar url = 'http://localhost:3000';\n\nxhr.open('GET',url);\nxhr.send(null);\nxhr.onreadystatechange = () => {\n  if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) { // 如果请求成功\n      text.innerHTML = xhr.response;\n  }\n}\n\n```\n服务器设置（例子用的express）：\n```js\nvar express = require('express');\nvar test = express();\n\ntest.get('/',(req,res) => {\n  res.set('Access-Control-Allow-Origin','http://localhost:3000');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT');\n  res.header('Access-Control-Allow-Headers', 'X-Custom-Header');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.send(\"hello CORS.\");\n})\n```\n如上，服务器对请求的头信息进行设置，  \nAccess-Control-Allow-Origin字段表示接受的源，表示接受来自http://localhost:3000这个域名的请求。设置为*表示接受任意域名的请求。\n\nAccess-Control-Allow-Methods列举出服务器接受的请求方式。  \nAccess-Control-Allow-Headers可以设置允许请求源的header特殊参数。  \nAccess-Control-Allow-Credentials该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。  \n\n如此，就可以实现跨域访问了。\n##### ②非简单请求\n非简单请求，我的理解是排除了以上简单请求的，比如PUT请求。  \n\n浏览器对于非简单请求，在发送正式请求前，会先发送一个OPTION请求，向服务器询问是否接受请求，称为“预检”请求。  \n如果服务器接受才会发送正式请求，否则就报错。  \n与简单请求一样，服务器无非也就是判断请求的域名、头信息和HTTP动词等是否在允许范围。  \n实例：  \n客户端发送PUT请求：\n```js\n    var xhr = new XMLHttpRequest();\n    var url = 'http://localhost:3000';\n    xhr.open('PUT',url);\n    xhr.setRequestHeader('X-Custom-Header', 'value');\n    xhr.send();\n    xhr.onreadystatechange = () => {\n      if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n        text1.innerHTML = xhr.response;\n      }\n    }\n```\n非简单请求例子中，我设置了特殊头信息“X-Custom-Header”，告知服务器接受这个参数信息。  \n\n在服务器设置接受信息：  \n```js\nvar express = require('express');\nvar test = express();\n\nvar responsePort = 3001;//服务器端口\ntest.all('*', (req, res) => {\n  res.set('Access-Control-Allow-Origin', 'http://localhost:3000');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT');\n  res.header('Access-Control-Allow-Headers', 'X-Custom-Header');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.send(\"hello CORS.\");\n})\n```\n至此，对于两种请求方式，都可以实现跨域访问了。\n其他解决方法参看如下：  \n\n#### 跨域解决方法\n##### [1.CORS（cross-origin resourse sharing)跨域资源共享](https://webharry.github.io/2017/10/23/CORS/)\n##### [2.JSONP](https://webharry.github.io/2017/10/24/JSONP/)\n##### 3.document.domain + iframe\n##### 4.window.name + iframe\n##### 5.postMessage\n##### [6.proxy](https://webharry.github.io/2017/10/23/proxy/)","source":"_posts/CORS.md","raw":"---\ntitle: CORS（cross-origin resourse sharing)跨域资源共享\ndate: 2017-10-12 10:30:14\ntags:\n    - JavaScript\n    - frontend\n    - '构建生态'\n---\n今天从同源策略出发，探究跨域问题出现的原因及其原理，以及一些常见解决方法。这篇文章主要讲跨域解决办法1.CORS（cross-origin resourse sharing)跨域资源共享。\n\n### 同源策略\n所谓同源，就是比较两个页面的协议、域名、端口是否相同，相同则是同源，有一个不同就视为不同源。\n>根据MDN给出的例子：\n>下表给出了相对http://store.company.com/dir/page.html同源检测的示例:  \n\n| URL       | 结果           | 原因  |\n| ------------- |:-------------:| -----:|\n| http://store.company.com/dir2/other.html     | 成功 | |\n| http://store.company.com/dir/inner/another.html    | 成功      |    |\n| https://store.company.com/secure.html | 失败     |    不同协议 ( https和http ) |\n| http://store.company.com:81/dir/etc.html      | 失败 | 不同端口 ( 81和80) |\n| http://news.company.com/dir/other.html      | 失败      |  不同域名 ( news和store ) |  \n\n\n### 跨域问题\n浏览器为了保证信息安全，规定了资源访问使用同源策略。所以，当浏览器访问的资源来自不同源，就会出现跨源资源访问，即跨域问题。 \n\n#### 解决方法\n##### 1.CORS（cross-origin resourse sharing)跨域资源共享\nCORS是浏览器解决跨域问题的一种策略，在CORS中，浏览器把ajax发起的请求分为简单请求和非简单请求，分别对两种请求进行处理，再将ajax请求发往服务器。\n##### ①简单请求就是满足以下条件的：\n\n请求方式为这几种：\n```shell\nGET,POST,HEAD\n```\n\nHTTP头信息不超出以下几种：\n\n```shell\nAccept\nAccept-Language\nContent-Language\nLast-Event-ID\ncontent-type只限于三种：text/plain，multipart/form-data，application/x-www-form-urlencoded\n\n```\n对于简单请求，浏览器直接发出CORS请求，在头信息中增加一个字段：Origin,表示请求源域名。例子：\n```js\n\nAccept:*/*\nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.8\nConnection:keep-alive\nHost:localhost:3001\nOrigin:http://localhost:3000\n\n```\nOrigin:http://localhost:3000字段告诉服务器请求源是http://localhost:3000，服务器就可以做出相应响应。 \n\n如果服务器发现Oringin字段的源不在接受范围，就会发送一个正常HTTP回应，浏览器发现这个回应的头信息中没有包含Accsess-Control-Allow-Origin字段，就抛出一个错误，被XMLHttpRequest的onerror捕获，即跨域问题出现了。\n\n好了，知道报错原因，我们就可以从以下方法解决跨域问题了：  \n概括为一句话：在服务器设置接受的源信息。\n###### 实例\n客户端请求：\n```js\nvar xhr = new XMLHttpRequest();\nvar url = 'http://localhost:3000';\n\nxhr.open('GET',url);\nxhr.send(null);\nxhr.onreadystatechange = () => {\n  if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) { // 如果请求成功\n      text.innerHTML = xhr.response;\n  }\n}\n\n```\n服务器设置（例子用的express）：\n```js\nvar express = require('express');\nvar test = express();\n\ntest.get('/',(req,res) => {\n  res.set('Access-Control-Allow-Origin','http://localhost:3000');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT');\n  res.header('Access-Control-Allow-Headers', 'X-Custom-Header');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.send(\"hello CORS.\");\n})\n```\n如上，服务器对请求的头信息进行设置，  \nAccess-Control-Allow-Origin字段表示接受的源，表示接受来自http://localhost:3000这个域名的请求。设置为*表示接受任意域名的请求。\n\nAccess-Control-Allow-Methods列举出服务器接受的请求方式。  \nAccess-Control-Allow-Headers可以设置允许请求源的header特殊参数。  \nAccess-Control-Allow-Credentials该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。  \n\n如此，就可以实现跨域访问了。\n##### ②非简单请求\n非简单请求，我的理解是排除了以上简单请求的，比如PUT请求。  \n\n浏览器对于非简单请求，在发送正式请求前，会先发送一个OPTION请求，向服务器询问是否接受请求，称为“预检”请求。  \n如果服务器接受才会发送正式请求，否则就报错。  \n与简单请求一样，服务器无非也就是判断请求的域名、头信息和HTTP动词等是否在允许范围。  \n实例：  \n客户端发送PUT请求：\n```js\n    var xhr = new XMLHttpRequest();\n    var url = 'http://localhost:3000';\n    xhr.open('PUT',url);\n    xhr.setRequestHeader('X-Custom-Header', 'value');\n    xhr.send();\n    xhr.onreadystatechange = () => {\n      if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n        text1.innerHTML = xhr.response;\n      }\n    }\n```\n非简单请求例子中，我设置了特殊头信息“X-Custom-Header”，告知服务器接受这个参数信息。  \n\n在服务器设置接受信息：  \n```js\nvar express = require('express');\nvar test = express();\n\nvar responsePort = 3001;//服务器端口\ntest.all('*', (req, res) => {\n  res.set('Access-Control-Allow-Origin', 'http://localhost:3000');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT');\n  res.header('Access-Control-Allow-Headers', 'X-Custom-Header');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.send(\"hello CORS.\");\n})\n```\n至此，对于两种请求方式，都可以实现跨域访问了。\n其他解决方法参看如下：  \n\n#### 跨域解决方法\n##### [1.CORS（cross-origin resourse sharing)跨域资源共享](https://webharry.github.io/2017/10/23/CORS/)\n##### [2.JSONP](https://webharry.github.io/2017/10/24/JSONP/)\n##### 3.document.domain + iframe\n##### 4.window.name + iframe\n##### 5.postMessage\n##### [6.proxy](https://webharry.github.io/2017/10/23/proxy/)","slug":"CORS","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzhw0002mo01bs0n46qq","content":"<p>今天从同源策略出发，探究跨域问题出现的原因及其原理，以及一些常见解决方法。这篇文章主要讲跨域解决办法1.CORS（cross-origin resourse sharing)跨域资源共享。</p>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><p>所谓同源，就是比较两个页面的协议、域名、端口是否相同，相同则是同源，有一个不同就视为不同源。</p>\n<blockquote>\n<p>根据MDN给出的例子：<br>下表给出了相对<a href=\"http://store.company.com/dir/page.html同源检测的示例\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir/page.html同源检测的示例</a>:  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th style=\"text-align:center\">结果</th>\n<th style=\"text-align:right\">原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://store.company.com/dir2/other.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir2/other.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com/dir/inner/another.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir/inner/another.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"https://store.company.com/secure.html\" target=\"_blank\" rel=\"noopener\">https://store.company.com/secure.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">不同协议 ( https和http )</td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com:81/dir/etc.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com:81/dir/etc.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">不同端口 ( 81和80)</td>\n</tr>\n<tr>\n<td><a href=\"http://news.company.com/dir/other.html\" target=\"_blank\" rel=\"noopener\">http://news.company.com/dir/other.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">不同域名 ( news和store )</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>浏览器为了保证信息安全，规定了资源访问使用同源策略。所以，当浏览器访问的资源来自不同源，就会出现跨源资源访问，即跨域问题。 </p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a>1.CORS（cross-origin resourse sharing)跨域资源共享</h5><p>CORS是浏览器解决跨域问题的一种策略，在CORS中，浏览器把ajax发起的请求分为简单请求和非简单请求，分别对两种请求进行处理，再将ajax请求发往服务器。</p>\n<h5 id=\"①简单请求就是满足以下条件的：\"><a href=\"#①简单请求就是满足以下条件的：\" class=\"headerlink\" title=\"①简单请求就是满足以下条件的：\"></a>①简单请求就是满足以下条件的：</h5><p>请求方式为这几种：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET,POST,HEAD</div></pre></td></tr></table></figure></p>\n<p>HTTP头信息不超出以下几种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept</div><div class=\"line\">Accept-Language</div><div class=\"line\">Content-Language</div><div class=\"line\">Last-Event-ID</div><div class=\"line\">content-type只限于三种：text/plain，multipart/form-data，application/x-www-form-urlencoded</div></pre></td></tr></table></figure>\n<p>对于简单请求，浏览器直接发出CORS请求，在头信息中增加一个字段：Origin,表示请求源域名。例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Accept:*<span class=\"comment\">/*</span></div><div class=\"line\">Accept-Encoding:gzip, deflate, br</div><div class=\"line\">Accept-Language:zh-CN,zh;q=0.8</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:localhost:3001</div><div class=\"line\">Origin:http://localhost:3000</div></pre></td></tr></table></figure></p>\n<p>Origin:<a href=\"http://localhost:3000字段告诉服务器请求源是http://localhost:3000，服务器就可以做出相应响应。\" target=\"_blank\" rel=\"noopener\">http://localhost:3000字段告诉服务器请求源是http://localhost:3000，服务器就可以做出相应响应。</a> </p>\n<p>如果服务器发现Oringin字段的源不在接受范围，就会发送一个正常HTTP回应，浏览器发现这个回应的头信息中没有包含Accsess-Control-Allow-Origin字段，就抛出一个错误，被XMLHttpRequest的onerror捕获，即跨域问题出现了。</p>\n<p>好了，知道报错原因，我们就可以从以下方法解决跨域问题了：<br>概括为一句话：在服务器设置接受的源信息。</p>\n<h6 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>客户端请求：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://localhost:3000'</span>;</div><div class=\"line\"></div><div class=\"line\">xhr.open(<span class=\"string\">'GET'</span>,url);</div><div class=\"line\">xhr.send(<span class=\"literal\">null</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === <span class=\"number\">200</span>) &#123; <span class=\"comment\">// 如果请求成功</span></div><div class=\"line\">      text.innerHTML = xhr.response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>服务器设置（例子用的express）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> test = express();</div><div class=\"line\"></div><div class=\"line\">test.get(<span class=\"string\">'/'</span>,(req,res) =&gt; &#123;</div><div class=\"line\">  res.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">'http://localhost:3000'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, PUT'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'X-Custom-Header'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"string\">'true'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">\"hello CORS.\"</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>如上，服务器对请求的头信息进行设置，<br>Access-Control-Allow-Origin字段表示接受的源，表示接受来自<a href=\"http://localhost:3000这个域名的请求。设置为*表示接受任意域名的请求。\" target=\"_blank\" rel=\"noopener\">http://localhost:3000这个域名的请求。设置为*表示接受任意域名的请求。</a></p>\n<p>Access-Control-Allow-Methods列举出服务器接受的请求方式。<br>Access-Control-Allow-Headers可以设置允许请求源的header特殊参数。<br>Access-Control-Allow-Credentials该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。  </p>\n<p>如此，就可以实现跨域访问了。</p>\n<h5 id=\"②非简单请求\"><a href=\"#②非简单请求\" class=\"headerlink\" title=\"②非简单请求\"></a>②非简单请求</h5><p>非简单请求，我的理解是排除了以上简单请求的，比如PUT请求。  </p>\n<p>浏览器对于非简单请求，在发送正式请求前，会先发送一个OPTION请求，向服务器询问是否接受请求，称为“预检”请求。<br>如果服务器接受才会发送正式请求，否则就报错。<br>与简单请求一样，服务器无非也就是判断请求的域名、头信息和HTTP动词等是否在允许范围。<br>实例：<br>客户端发送PUT请求：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://localhost:3000'</span>;</div><div class=\"line\">xhr.open(<span class=\"string\">'PUT'</span>,url);</div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Custom-Header'</span>, <span class=\"string\">'value'</span>);</div><div class=\"line\">xhr.send();</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">    text1.innerHTML = xhr.response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>非简单请求例子中，我设置了特殊头信息“X-Custom-Header”，告知服务器接受这个参数信息。  </p>\n<p>在服务器设置接受信息：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> test = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> responsePort = <span class=\"number\">3001</span>;<span class=\"comment\">//服务器端口</span></div><div class=\"line\">test.all(<span class=\"string\">'*'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  res.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://localhost:3000'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, PUT'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'X-Custom-Header'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"string\">'true'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">\"hello CORS.\"</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>至此，对于两种请求方式，都可以实现跨域访问了。<br>其他解决方法参看如下：  </p>\n<h4 id=\"跨域解决方法\"><a href=\"#跨域解决方法\" class=\"headerlink\" title=\"跨域解决方法\"></a>跨域解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享-1\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享-1\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a><a href=\"https://webharry.github.io/2017/10/23/CORS/\">1.CORS（cross-origin resourse sharing)跨域资源共享</a></h5><h5 id=\"2-JSONP\"><a href=\"#2-JSONP\" class=\"headerlink\" title=\"2.JSONP\"></a><a href=\"https://webharry.github.io/2017/10/24/JSONP/\">2.JSONP</a></h5><h5 id=\"3-document-domain-iframe\"><a href=\"#3-document-domain-iframe\" class=\"headerlink\" title=\"3.document.domain + iframe\"></a>3.document.domain + iframe</h5><h5 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h5><h5 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5.postMessage\"></a>5.postMessage</h5><h5 id=\"6-proxy\"><a href=\"#6-proxy\" class=\"headerlink\" title=\"6.proxy\"></a><a href=\"https://webharry.github.io/2017/10/23/proxy/\">6.proxy</a></h5>","site":{"data":{}},"excerpt":"","more":"<p>今天从同源策略出发，探究跨域问题出现的原因及其原理，以及一些常见解决方法。这篇文章主要讲跨域解决办法1.CORS（cross-origin resourse sharing)跨域资源共享。</p>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><p>所谓同源，就是比较两个页面的协议、域名、端口是否相同，相同则是同源，有一个不同就视为不同源。</p>\n<blockquote>\n<p>根据MDN给出的例子：<br>下表给出了相对<a href=\"http://store.company.com/dir/page.html同源检测的示例\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir/page.html同源检测的示例</a>:  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th style=\"text-align:center\">结果</th>\n<th style=\"text-align:right\">原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://store.company.com/dir2/other.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir2/other.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com/dir/inner/another.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir/inner/another.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"https://store.company.com/secure.html\" target=\"_blank\" rel=\"noopener\">https://store.company.com/secure.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">不同协议 ( https和http )</td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com:81/dir/etc.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com:81/dir/etc.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">不同端口 ( 81和80)</td>\n</tr>\n<tr>\n<td><a href=\"http://news.company.com/dir/other.html\" target=\"_blank\" rel=\"noopener\">http://news.company.com/dir/other.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">不同域名 ( news和store )</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>浏览器为了保证信息安全，规定了资源访问使用同源策略。所以，当浏览器访问的资源来自不同源，就会出现跨源资源访问，即跨域问题。 </p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a>1.CORS（cross-origin resourse sharing)跨域资源共享</h5><p>CORS是浏览器解决跨域问题的一种策略，在CORS中，浏览器把ajax发起的请求分为简单请求和非简单请求，分别对两种请求进行处理，再将ajax请求发往服务器。</p>\n<h5 id=\"①简单请求就是满足以下条件的：\"><a href=\"#①简单请求就是满足以下条件的：\" class=\"headerlink\" title=\"①简单请求就是满足以下条件的：\"></a>①简单请求就是满足以下条件的：</h5><p>请求方式为这几种：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET,POST,HEAD</div></pre></td></tr></table></figure></p>\n<p>HTTP头信息不超出以下几种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept</div><div class=\"line\">Accept-Language</div><div class=\"line\">Content-Language</div><div class=\"line\">Last-Event-ID</div><div class=\"line\">content-type只限于三种：text/plain，multipart/form-data，application/x-www-form-urlencoded</div></pre></td></tr></table></figure>\n<p>对于简单请求，浏览器直接发出CORS请求，在头信息中增加一个字段：Origin,表示请求源域名。例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Accept:*<span class=\"comment\">/*</span></div><div class=\"line\">Accept-Encoding:gzip, deflate, br</div><div class=\"line\">Accept-Language:zh-CN,zh;q=0.8</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:localhost:3001</div><div class=\"line\">Origin:http://localhost:3000</div></pre></td></tr></table></figure></p>\n<p>Origin:<a href=\"http://localhost:3000字段告诉服务器请求源是http://localhost:3000，服务器就可以做出相应响应。\" target=\"_blank\" rel=\"noopener\">http://localhost:3000字段告诉服务器请求源是http://localhost:3000，服务器就可以做出相应响应。</a> </p>\n<p>如果服务器发现Oringin字段的源不在接受范围，就会发送一个正常HTTP回应，浏览器发现这个回应的头信息中没有包含Accsess-Control-Allow-Origin字段，就抛出一个错误，被XMLHttpRequest的onerror捕获，即跨域问题出现了。</p>\n<p>好了，知道报错原因，我们就可以从以下方法解决跨域问题了：<br>概括为一句话：在服务器设置接受的源信息。</p>\n<h6 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>客户端请求：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://localhost:3000'</span>;</div><div class=\"line\"></div><div class=\"line\">xhr.open(<span class=\"string\">'GET'</span>,url);</div><div class=\"line\">xhr.send(<span class=\"literal\">null</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === <span class=\"number\">200</span>) &#123; <span class=\"comment\">// 如果请求成功</span></div><div class=\"line\">      text.innerHTML = xhr.response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>服务器设置（例子用的express）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> test = express();</div><div class=\"line\"></div><div class=\"line\">test.get(<span class=\"string\">'/'</span>,(req,res) =&gt; &#123;</div><div class=\"line\">  res.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">'http://localhost:3000'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, PUT'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'X-Custom-Header'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"string\">'true'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">\"hello CORS.\"</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>如上，服务器对请求的头信息进行设置，<br>Access-Control-Allow-Origin字段表示接受的源，表示接受来自<a href=\"http://localhost:3000这个域名的请求。设置为*表示接受任意域名的请求。\" target=\"_blank\" rel=\"noopener\">http://localhost:3000这个域名的请求。设置为*表示接受任意域名的请求。</a></p>\n<p>Access-Control-Allow-Methods列举出服务器接受的请求方式。<br>Access-Control-Allow-Headers可以设置允许请求源的header特殊参数。<br>Access-Control-Allow-Credentials该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。  </p>\n<p>如此，就可以实现跨域访问了。</p>\n<h5 id=\"②非简单请求\"><a href=\"#②非简单请求\" class=\"headerlink\" title=\"②非简单请求\"></a>②非简单请求</h5><p>非简单请求，我的理解是排除了以上简单请求的，比如PUT请求。  </p>\n<p>浏览器对于非简单请求，在发送正式请求前，会先发送一个OPTION请求，向服务器询问是否接受请求，称为“预检”请求。<br>如果服务器接受才会发送正式请求，否则就报错。<br>与简单请求一样，服务器无非也就是判断请求的域名、头信息和HTTP动词等是否在允许范围。<br>实例：<br>客户端发送PUT请求：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://localhost:3000'</span>;</div><div class=\"line\">xhr.open(<span class=\"string\">'PUT'</span>,url);</div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Custom-Header'</span>, <span class=\"string\">'value'</span>);</div><div class=\"line\">xhr.send();</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">    text1.innerHTML = xhr.response;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>非简单请求例子中，我设置了特殊头信息“X-Custom-Header”，告知服务器接受这个参数信息。  </p>\n<p>在服务器设置接受信息：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> test = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> responsePort = <span class=\"number\">3001</span>;<span class=\"comment\">//服务器端口</span></div><div class=\"line\">test.all(<span class=\"string\">'*'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  res.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://localhost:3000'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, PUT'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'X-Custom-Header'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"string\">'true'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">\"hello CORS.\"</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>至此，对于两种请求方式，都可以实现跨域访问了。<br>其他解决方法参看如下：  </p>\n<h4 id=\"跨域解决方法\"><a href=\"#跨域解决方法\" class=\"headerlink\" title=\"跨域解决方法\"></a>跨域解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享-1\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享-1\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a><a href=\"https://webharry.github.io/2017/10/23/CORS/\">1.CORS（cross-origin resourse sharing)跨域资源共享</a></h5><h5 id=\"2-JSONP\"><a href=\"#2-JSONP\" class=\"headerlink\" title=\"2.JSONP\"></a><a href=\"https://webharry.github.io/2017/10/24/JSONP/\">2.JSONP</a></h5><h5 id=\"3-document-domain-iframe\"><a href=\"#3-document-domain-iframe\" class=\"headerlink\" title=\"3.document.domain + iframe\"></a>3.document.domain + iframe</h5><h5 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h5><h5 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5.postMessage\"></a>5.postMessage</h5><h5 id=\"6-proxy\"><a href=\"#6-proxy\" class=\"headerlink\" title=\"6.proxy\"></a><a href=\"https://webharry.github.io/2017/10/23/proxy/\">6.proxy</a></h5>"},{"title":"CSS3几种常用属性","date":"2017-08-22T10:20:26.000Z","_content":"/*text-shadow\n*可以给一个对象应用一组或多组阴影效果，方式如前面的语法显示一样，用逗号隔开。\n*text-shadow: X-Offset Y-Offset Blur Color中\n*X-Offset表示阴影的水平偏移距离，其值为正值时阴影向右偏移，如果其值为负值时，阴影向左偏移；\n*Y-Offset是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移反之其值是负值时阴影向顶部偏移；\n*Blur是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；\n*Color是指阴影的颜色，其可以使用rgba色。著作权归作者所有。\n*原文: https://www.w3cplus.com/blog/52.html © w3cplus.com\n*/\n\n    h1 {\n        text-shadow: 1px 1px 1px #FF0000, 0 0 0 #ccc, 2px 2px 2px #ff00de;\n    }\n\n\n/*\n*transform-style\n*使转换的子元素保留其3D转换\n*transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。\n*语法：transform-style: flat|preserve-3d;\n*注释：该属性必须与 transform 属性一同使用。\n*transform :旋转 div 元素. http://www.w3school.com.cn/cssref/pr_transform.asp\n*rotateX(angle)定义沿着 X 轴的 3D 旋转\n*rotateY(angle)定义沿着 Y 轴的 3D 旋转\n*/\n\n    .box {\n        width: 10rem;\n        height: 1rem;\n        background: #ccc;\n        border: 1px solid #FF0000;\n        -webkit-transform: rotateY(60deg);\n        transform: rotateY(60deg);\n        -webkit-transform-style: preserve-3d;\n        transform-style: preserve-3d;\n    }\n\n\n/*\n*animation\n*使用简写属性，将动画与 div 元素绑定\n*animation-name 规定需要绑定到选择器的 keyframe 名称\n*animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n*animation-timing-function规定动画的速度曲线 ease-in-out动画以低速开始和结束。\n*animation-delay transform 规定在动画开始之前的延迟\n*animation-iteration-count 规定动画应该播放的次数. infinite规定动画应该无限次播放.\n*animation-direction 规定是否应该轮流反向播放动画\n*/\n\n    .box {\n        width: 6rem;\n        height: 1rem;\n        background: #ccc;\n        border: 1px solid #FF0000;\n        -webkit-transform: rotateY(180deg);\n        transform: rotateY(180deg);\n        -webkit-transform-style: preserve-3d;\n        transform-style: preserve-3d;\n        animation: run ease-in-out 1s infinite;\n        -moz-animation: run ease-in-out 1s infinite;\n        -webkit-animation: run ease-in-out 11s infinite;\n        -ms-animation: run ease-in-out 1s infinite;\n    }\n\n\n/*\n@keyframes 规则\n*通过 @keyframes 规则，您能够创建动画。\n*创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。\n*在动画过程中，您能够多次改变这套 CSS 样式。\n*以百分比来规定改变发生的时间，或者通过关键词 \"from\" 和 \"to\"，等价于 0% 和 100%。\n*0% 是动画的开始时间，100% 动画的结束时间。\n*为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。\n*注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。\n*/\n\n    @keyframes run {\n        0% {\n            -webkit-transform: rotateX(-5deg) rotateY(0);\n            transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -webkit-transform: rotateX(0) rotateY(180deg);\n            transform: rotateX(0) rotateY(180deg);\n            text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n        }\n        100% {\n            -webkit-transform: rotateX(5deg) rotateY(360deg);\n            transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n\n    @-moz-keyframes run {\n        0% {\n            -moz-transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -moz-transform: rotateX(0) rotateY(180deg);\n            text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n        }\n        100% {\n            -moz-transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n\n    @-webkit-keyframes run {\n        0% {\n            -webkit-transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -webkit-transform: rotateX(0) rotateY(180deg);\n            text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n        }\n        100% {\n            -webkit-transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n\n    @-ms-keyframes run {\n        0% {\n            -ms-transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -ms-transform: rotateX(0) rotateY(180deg);\n        }\n        100% {\n            -ms-transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n","source":"_posts/CSS3-attribute.md","raw":"---\ntitle: CSS3几种常用属性\ndate: 2017-08-22 18:20:26\ntags:\n---\n/*text-shadow\n*可以给一个对象应用一组或多组阴影效果，方式如前面的语法显示一样，用逗号隔开。\n*text-shadow: X-Offset Y-Offset Blur Color中\n*X-Offset表示阴影的水平偏移距离，其值为正值时阴影向右偏移，如果其值为负值时，阴影向左偏移；\n*Y-Offset是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移反之其值是负值时阴影向顶部偏移；\n*Blur是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；\n*Color是指阴影的颜色，其可以使用rgba色。著作权归作者所有。\n*原文: https://www.w3cplus.com/blog/52.html © w3cplus.com\n*/\n\n    h1 {\n        text-shadow: 1px 1px 1px #FF0000, 0 0 0 #ccc, 2px 2px 2px #ff00de;\n    }\n\n\n/*\n*transform-style\n*使转换的子元素保留其3D转换\n*transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。\n*语法：transform-style: flat|preserve-3d;\n*注释：该属性必须与 transform 属性一同使用。\n*transform :旋转 div 元素. http://www.w3school.com.cn/cssref/pr_transform.asp\n*rotateX(angle)定义沿着 X 轴的 3D 旋转\n*rotateY(angle)定义沿着 Y 轴的 3D 旋转\n*/\n\n    .box {\n        width: 10rem;\n        height: 1rem;\n        background: #ccc;\n        border: 1px solid #FF0000;\n        -webkit-transform: rotateY(60deg);\n        transform: rotateY(60deg);\n        -webkit-transform-style: preserve-3d;\n        transform-style: preserve-3d;\n    }\n\n\n/*\n*animation\n*使用简写属性，将动画与 div 元素绑定\n*animation-name 规定需要绑定到选择器的 keyframe 名称\n*animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n*animation-timing-function规定动画的速度曲线 ease-in-out动画以低速开始和结束。\n*animation-delay transform 规定在动画开始之前的延迟\n*animation-iteration-count 规定动画应该播放的次数. infinite规定动画应该无限次播放.\n*animation-direction 规定是否应该轮流反向播放动画\n*/\n\n    .box {\n        width: 6rem;\n        height: 1rem;\n        background: #ccc;\n        border: 1px solid #FF0000;\n        -webkit-transform: rotateY(180deg);\n        transform: rotateY(180deg);\n        -webkit-transform-style: preserve-3d;\n        transform-style: preserve-3d;\n        animation: run ease-in-out 1s infinite;\n        -moz-animation: run ease-in-out 1s infinite;\n        -webkit-animation: run ease-in-out 11s infinite;\n        -ms-animation: run ease-in-out 1s infinite;\n    }\n\n\n/*\n@keyframes 规则\n*通过 @keyframes 规则，您能够创建动画。\n*创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。\n*在动画过程中，您能够多次改变这套 CSS 样式。\n*以百分比来规定改变发生的时间，或者通过关键词 \"from\" 和 \"to\"，等价于 0% 和 100%。\n*0% 是动画的开始时间，100% 动画的结束时间。\n*为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。\n*注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。\n*/\n\n    @keyframes run {\n        0% {\n            -webkit-transform: rotateX(-5deg) rotateY(0);\n            transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -webkit-transform: rotateX(0) rotateY(180deg);\n            transform: rotateX(0) rotateY(180deg);\n            text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n        }\n        100% {\n            -webkit-transform: rotateX(5deg) rotateY(360deg);\n            transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n\n    @-moz-keyframes run {\n        0% {\n            -moz-transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -moz-transform: rotateX(0) rotateY(180deg);\n            text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n        }\n        100% {\n            -moz-transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n\n    @-webkit-keyframes run {\n        0% {\n            -webkit-transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -webkit-transform: rotateX(0) rotateY(180deg);\n            text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n        }\n        100% {\n            -webkit-transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n\n    @-ms-keyframes run {\n        0% {\n            -ms-transform: rotateX(-5deg) rotateY(0);\n        }\n        50% {\n            -ms-transform: rotateX(0) rotateY(180deg);\n        }\n        100% {\n            -ms-transform: rotateX(5deg) rotateY(360deg);\n        }\n    }\n","slug":"CSS3-attribute","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzhz0004mo01lhelljg5","content":"<p>/<em>text-shadow\n</em>可以给一个对象应用一组或多组阴影效果，方式如前面的语法显示一样，用逗号隔开。<br><em>text-shadow: X-Offset Y-Offset Blur Color中\n</em>X-Offset表示阴影的水平偏移距离，其值为正值时阴影向右偏移，如果其值为负值时，阴影向左偏移；<br><em>Y-Offset是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移反之其值是负值时阴影向顶部偏移；\n</em>Blur是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；<br><em>Color是指阴影的颜色，其可以使用rgba色。著作权归作者所有。\n</em>原文: <a href=\"https://www.w3cplus.com/blog/52.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cplus.com/blog/52.html</a> © w3cplus.com<br>*/</p>\n<pre><code>h1 {\n    text-shadow: 1px 1px 1px #FF0000, 0 0 0 #ccc, 2px 2px 2px #ff00de;\n}\n</code></pre><p>/<em>\n</em>transform-style<br><em>使转换的子元素保留其3D转换\n</em>transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。<br><em>语法：transform-style: flat|preserve-3d;\n</em>注释：该属性必须与 transform 属性一同使用。<br><em>transform :旋转 div 元素. <a href=\"http://www.w3school.com.cn/cssref/pr_transform.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/cssref/pr_transform.asp</a>\n</em>rotateX(angle)定义沿着 X 轴的 3D 旋转<br><em>rotateY(angle)定义沿着 Y 轴的 3D 旋转\n</em>/</p>\n<pre><code>.box {\n    width: 10rem;\n    height: 1rem;\n    background: #ccc;\n    border: 1px solid #FF0000;\n    -webkit-transform: rotateY(60deg);\n    transform: rotateY(60deg);\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n}\n</code></pre><p>/<em>\n</em>animation<br><em>使用简写属性，将动画与 div 元素绑定\n</em>animation-name 规定需要绑定到选择器的 keyframe 名称<br><em>animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n</em>animation-timing-function规定动画的速度曲线 ease-in-out动画以低速开始和结束。<br><em>animation-delay transform 规定在动画开始之前的延迟\n</em>animation-iteration-count 规定动画应该播放的次数. infinite规定动画应该无限次播放.<br><em>animation-direction 规定是否应该轮流反向播放动画\n</em>/</p>\n<pre><code>.box {\n    width: 6rem;\n    height: 1rem;\n    background: #ccc;\n    border: 1px solid #FF0000;\n    -webkit-transform: rotateY(180deg);\n    transform: rotateY(180deg);\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    animation: run ease-in-out 1s infinite;\n    -moz-animation: run ease-in-out 1s infinite;\n    -webkit-animation: run ease-in-out 11s infinite;\n    -ms-animation: run ease-in-out 1s infinite;\n}\n</code></pre><p>/<em><br>@keyframes 规则\n</em>通过 @keyframes 规则，您能够创建动画。<br><em>创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。\n</em>在动画过程中，您能够多次改变这套 CSS 样式。<br><em>以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。\n</em>0% 是动画的开始时间，100% 动画的结束时间。<br><em>为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。\n</em>注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。<br>*/</p>\n<pre><code>@keyframes run {\n    0% {\n        -webkit-transform: rotateX(-5deg) rotateY(0);\n        transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -webkit-transform: rotateX(0) rotateY(180deg);\n        transform: rotateX(0) rotateY(180deg);\n        text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n    }\n    100% {\n        -webkit-transform: rotateX(5deg) rotateY(360deg);\n        transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n\n@-moz-keyframes run {\n    0% {\n        -moz-transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -moz-transform: rotateX(0) rotateY(180deg);\n        text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n    }\n    100% {\n        -moz-transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n\n@-webkit-keyframes run {\n    0% {\n        -webkit-transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -webkit-transform: rotateX(0) rotateY(180deg);\n        text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n    }\n    100% {\n        -webkit-transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n\n@-ms-keyframes run {\n    0% {\n        -ms-transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -ms-transform: rotateX(0) rotateY(180deg);\n    }\n    100% {\n        -ms-transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>/<em>text-shadow\n</em>可以给一个对象应用一组或多组阴影效果，方式如前面的语法显示一样，用逗号隔开。<br><em>text-shadow: X-Offset Y-Offset Blur Color中\n</em>X-Offset表示阴影的水平偏移距离，其值为正值时阴影向右偏移，如果其值为负值时，阴影向左偏移；<br><em>Y-Offset是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移反之其值是负值时阴影向顶部偏移；\n</em>Blur是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；<br><em>Color是指阴影的颜色，其可以使用rgba色。著作权归作者所有。\n</em>原文: <a href=\"https://www.w3cplus.com/blog/52.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cplus.com/blog/52.html</a> © w3cplus.com<br>*/</p>\n<pre><code>h1 {\n    text-shadow: 1px 1px 1px #FF0000, 0 0 0 #ccc, 2px 2px 2px #ff00de;\n}\n</code></pre><p>/<em>\n</em>transform-style<br><em>使转换的子元素保留其3D转换\n</em>transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素。<br><em>语法：transform-style: flat|preserve-3d;\n</em>注释：该属性必须与 transform 属性一同使用。<br><em>transform :旋转 div 元素. <a href=\"http://www.w3school.com.cn/cssref/pr_transform.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/cssref/pr_transform.asp</a>\n</em>rotateX(angle)定义沿着 X 轴的 3D 旋转<br><em>rotateY(angle)定义沿着 Y 轴的 3D 旋转\n</em>/</p>\n<pre><code>.box {\n    width: 10rem;\n    height: 1rem;\n    background: #ccc;\n    border: 1px solid #FF0000;\n    -webkit-transform: rotateY(60deg);\n    transform: rotateY(60deg);\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n}\n</code></pre><p>/<em>\n</em>animation<br><em>使用简写属性，将动画与 div 元素绑定\n</em>animation-name 规定需要绑定到选择器的 keyframe 名称<br><em>animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n</em>animation-timing-function规定动画的速度曲线 ease-in-out动画以低速开始和结束。<br><em>animation-delay transform 规定在动画开始之前的延迟\n</em>animation-iteration-count 规定动画应该播放的次数. infinite规定动画应该无限次播放.<br><em>animation-direction 规定是否应该轮流反向播放动画\n</em>/</p>\n<pre><code>.box {\n    width: 6rem;\n    height: 1rem;\n    background: #ccc;\n    border: 1px solid #FF0000;\n    -webkit-transform: rotateY(180deg);\n    transform: rotateY(180deg);\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    animation: run ease-in-out 1s infinite;\n    -moz-animation: run ease-in-out 1s infinite;\n    -webkit-animation: run ease-in-out 11s infinite;\n    -ms-animation: run ease-in-out 1s infinite;\n}\n</code></pre><p>/<em><br>@keyframes 规则\n</em>通过 @keyframes 规则，您能够创建动画。<br><em>创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。\n</em>在动画过程中，您能够多次改变这套 CSS 样式。<br><em>以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。\n</em>0% 是动画的开始时间，100% 动画的结束时间。<br><em>为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。\n</em>注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。<br>*/</p>\n<pre><code>@keyframes run {\n    0% {\n        -webkit-transform: rotateX(-5deg) rotateY(0);\n        transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -webkit-transform: rotateX(0) rotateY(180deg);\n        transform: rotateX(0) rotateY(180deg);\n        text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n    }\n    100% {\n        -webkit-transform: rotateX(5deg) rotateY(360deg);\n        transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n\n@-moz-keyframes run {\n    0% {\n        -moz-transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -moz-transform: rotateX(0) rotateY(180deg);\n        text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n    }\n    100% {\n        -moz-transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n\n@-webkit-keyframes run {\n    0% {\n        -webkit-transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -webkit-transform: rotateX(0) rotateY(180deg);\n        text-shadow: 1px 1px 1px #ccc, 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #3EFF3E, 0 0 70px #3EFFff, 0 0 80px #3EFFff, 0 0 100px #3EFFee, 0 0 150px #3EFFee;\n    }\n    100% {\n        -webkit-transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n\n@-ms-keyframes run {\n    0% {\n        -ms-transform: rotateX(-5deg) rotateY(0);\n    }\n    50% {\n        -ms-transform: rotateX(0) rotateY(180deg);\n    }\n    100% {\n        -ms-transform: rotateX(5deg) rotateY(360deg);\n    }\n}\n</code></pre>"},{"title":"JS中判断数据类型的几种方法","date":"2017-09-01T03:31:38.000Z","_content":"在搬砖途中看到一大神的代码，用Object.prototype.toString.call()判断数据类型，在这里学习总结下，在js中，判断数据类型除了用typeof运算符之外，还可以用Object.prototype.toString.call()方法、instanceof操作符。  \n### 几种判断方法的区别\n#### typeof判断数据类型  \n使用typeof操作符，判断数据类型返回值如下：\n```js\ntypeof 1//\"number\"\ntypeof \"a\"//\"string\"\ntypeof true//\"boolean\"\ntypeof {}//\"object\"\ntypeof []//\"object\"\ntypeof function(){}//\"function\"\n```\n使用时的一个问题是，在判断数组和对象存储值时，都返回\"object\"。\n\n#### Object.prototype上的原生toString()方法判断数据类型  \nObject.prototype.toString.call()方法既可以判断基本类型，也可以判断原生引用类型，还可以判断原生JSON对象。  \n\n##### 判断基本类型\n数字number、字符串string、布尔值boolean。\n```js\nObject.prototype.toString.call(2);//\"[object Number]\"\nObject.prototype.toString.call(\"s\");//\"[object String]\"\nObject.prototype.toString.call(true);//\"[object Boolean]\"\n```\n\n##### 判断空类型\nnull和undefined。\n```js\nObject.prototype.toString.call(null);//\"[object Null]\"\nObject.prototype.toString.call(undefined);//\"[object Undefined]\"\n```\n\n##### 判断复合类型\n对象Object、数组Array、方法Function、日期Date、布尔Boolean、数字Number、字符串String、正则RegExp、Math。  \n例如上面例子中的引用类型存储值就可以使用Object.prototype.toString()方法区别出来：\n```js\nObject.prototype.toString.call({});//\"[object Object]\"\nObject.prototype.toString.call([]);//\"[object Array]\"\nObject.prototype.toString.call(function(){});//\"[object Function]\"\nObject.prototype.toString.call(String);//\"[object Function]\"\nvar t = new Date();\nObject.prototype.toString.call(t);//\"[object Date]\"\nvar bb = new Boolean();\nObject.prototype.toString.call(bb);//\"[object Boolean]\"\nvar bb = new Number();\nObject.prototype.toString.call(bb);//\"[object Number]\"\nvar str = new String();\nObject.prototype.toString.call(str);//\"[object String]\"\nvar reg = new RegExp(\"^1[34578][0-9]{9}$\",\"g\");\nObject.prototype.toString.call(reg);//\"[object RegExp]\"\nvar reg = Math.valueOf();\nObject.prototype.toString.call(reg);//\"[object Math]\"\n```\n##### 判断原生JSON对象\n```js\nvar isNativeJSON = window.JSON && Object.prototype.toString.call(JSON);\nconsole.log(isNativeJSON);//[object JSON]\n```\n输出为\n##### 判断自定义类型\n```js\nfunction Foo(name,age) {\n    this.name = name;\n    this.age = age;\n}\nvar foo =new Foo(\"harry\",20);\nObject.prototype.toString.call(foo);//\"[object Object]\"\n```\n遇到的一个问题是，使用Object.prototype.toString.call()方法不能判断foo是Foo类的实例。只能用instanceof来判断。\n#### instanceof判断数据类型  \ninstanceof作用是判断原型与实例之间的关系。用法是：\n```js\n实例 instanceof 原型\n```\n>instanceof操作符会在实例的原型链上查找，直到找到右边构造函数的prototype属性，或者为null的时候停止。\n> 引用自\n> http://blog.xieluping.cn/2017/08/18/instanceof/\n\n```js\nconsole.log(foo instanceof Foo);//true\n```\n","source":"_posts/Object-prototype-toString-call.md","raw":"---\ntitle: JS中判断数据类型的几种方法\ndate: 2017-09-01 11:31:38\ntags:\n    - JavaScript\n---\n在搬砖途中看到一大神的代码，用Object.prototype.toString.call()判断数据类型，在这里学习总结下，在js中，判断数据类型除了用typeof运算符之外，还可以用Object.prototype.toString.call()方法、instanceof操作符。  \n### 几种判断方法的区别\n#### typeof判断数据类型  \n使用typeof操作符，判断数据类型返回值如下：\n```js\ntypeof 1//\"number\"\ntypeof \"a\"//\"string\"\ntypeof true//\"boolean\"\ntypeof {}//\"object\"\ntypeof []//\"object\"\ntypeof function(){}//\"function\"\n```\n使用时的一个问题是，在判断数组和对象存储值时，都返回\"object\"。\n\n#### Object.prototype上的原生toString()方法判断数据类型  \nObject.prototype.toString.call()方法既可以判断基本类型，也可以判断原生引用类型，还可以判断原生JSON对象。  \n\n##### 判断基本类型\n数字number、字符串string、布尔值boolean。\n```js\nObject.prototype.toString.call(2);//\"[object Number]\"\nObject.prototype.toString.call(\"s\");//\"[object String]\"\nObject.prototype.toString.call(true);//\"[object Boolean]\"\n```\n\n##### 判断空类型\nnull和undefined。\n```js\nObject.prototype.toString.call(null);//\"[object Null]\"\nObject.prototype.toString.call(undefined);//\"[object Undefined]\"\n```\n\n##### 判断复合类型\n对象Object、数组Array、方法Function、日期Date、布尔Boolean、数字Number、字符串String、正则RegExp、Math。  \n例如上面例子中的引用类型存储值就可以使用Object.prototype.toString()方法区别出来：\n```js\nObject.prototype.toString.call({});//\"[object Object]\"\nObject.prototype.toString.call([]);//\"[object Array]\"\nObject.prototype.toString.call(function(){});//\"[object Function]\"\nObject.prototype.toString.call(String);//\"[object Function]\"\nvar t = new Date();\nObject.prototype.toString.call(t);//\"[object Date]\"\nvar bb = new Boolean();\nObject.prototype.toString.call(bb);//\"[object Boolean]\"\nvar bb = new Number();\nObject.prototype.toString.call(bb);//\"[object Number]\"\nvar str = new String();\nObject.prototype.toString.call(str);//\"[object String]\"\nvar reg = new RegExp(\"^1[34578][0-9]{9}$\",\"g\");\nObject.prototype.toString.call(reg);//\"[object RegExp]\"\nvar reg = Math.valueOf();\nObject.prototype.toString.call(reg);//\"[object Math]\"\n```\n##### 判断原生JSON对象\n```js\nvar isNativeJSON = window.JSON && Object.prototype.toString.call(JSON);\nconsole.log(isNativeJSON);//[object JSON]\n```\n输出为\n##### 判断自定义类型\n```js\nfunction Foo(name,age) {\n    this.name = name;\n    this.age = age;\n}\nvar foo =new Foo(\"harry\",20);\nObject.prototype.toString.call(foo);//\"[object Object]\"\n```\n遇到的一个问题是，使用Object.prototype.toString.call()方法不能判断foo是Foo类的实例。只能用instanceof来判断。\n#### instanceof判断数据类型  \ninstanceof作用是判断原型与实例之间的关系。用法是：\n```js\n实例 instanceof 原型\n```\n>instanceof操作符会在实例的原型链上查找，直到找到右边构造函数的prototype属性，或者为null的时候停止。\n> 引用自\n> http://blog.xieluping.cn/2017/08/18/instanceof/\n\n```js\nconsole.log(foo instanceof Foo);//true\n```\n","slug":"Object-prototype-toString-call","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi00005mo01j08m0767","content":"<p>在搬砖途中看到一大神的代码，用Object.prototype.toString.call()判断数据类型，在这里学习总结下，在js中，判断数据类型除了用typeof运算符之外，还可以用Object.prototype.toString.call()方法、instanceof操作符。  </p>\n<h3 id=\"几种判断方法的区别\"><a href=\"#几种判断方法的区别\" class=\"headerlink\" title=\"几种判断方法的区别\"></a>几种判断方法的区别</h3><h4 id=\"typeof判断数据类型\"><a href=\"#typeof判断数据类型\" class=\"headerlink\" title=\"typeof判断数据类型\"></a>typeof判断数据类型</h4><p>使用typeof操作符，判断数据类型返回值如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span><span class=\"comment\">//\"number\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">\"a\"</span><span class=\"comment\">//\"string\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span><span class=\"comment\">//\"boolean\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;<span class=\"comment\">//\"object\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> []<span class=\"comment\">//\"object\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;<span class=\"comment\">//\"function\"</span></div></pre></td></tr></table></figure></p>\n<p>使用时的一个问题是，在判断数组和对象存储值时，都返回”object”。</p>\n<h4 id=\"Object-prototype上的原生toString-方法判断数据类型\"><a href=\"#Object-prototype上的原生toString-方法判断数据类型\" class=\"headerlink\" title=\"Object.prototype上的原生toString()方法判断数据类型\"></a>Object.prototype上的原生toString()方法判断数据类型</h4><p>Object.prototype.toString.call()方法既可以判断基本类型，也可以判断原生引用类型，还可以判断原生JSON对象。  </p>\n<h5 id=\"判断基本类型\"><a href=\"#判断基本类型\" class=\"headerlink\" title=\"判断基本类型\"></a>判断基本类型</h5><p>数字number、字符串string、布尔值boolean。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">2</span>);<span class=\"comment\">//\"[object Number]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">\"s\"</span>);<span class=\"comment\">//\"[object String]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">true</span>);<span class=\"comment\">//\"[object Boolean]\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"判断空类型\"><a href=\"#判断空类型\" class=\"headerlink\" title=\"判断空类型\"></a>判断空类型</h5><p>null和undefined。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>);<span class=\"comment\">//\"[object Null]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>);<span class=\"comment\">//\"[object Undefined]\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"判断复合类型\"><a href=\"#判断复合类型\" class=\"headerlink\" title=\"判断复合类型\"></a>判断复合类型</h5><p>对象Object、数组Array、方法Function、日期Date、布尔Boolean、数字Number、字符串String、正则RegExp、Math。<br>例如上面例子中的引用类型存储值就可以使用Object.prototype.toString()方法区别出来：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;);<span class=\"comment\">//\"[object Object]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([]);<span class=\"comment\">//\"[object Array]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);<span class=\"comment\">//\"[object Function]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">String</span>);<span class=\"comment\">//\"[object Function]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(t);<span class=\"comment\">//\"[object Date]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(bb);<span class=\"comment\">//\"[object Boolean]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(bb);<span class=\"comment\">//\"[object Number]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(str);<span class=\"comment\">//\"[object String]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^1[34578][0-9]&#123;9&#125;$\"</span>,<span class=\"string\">\"g\"</span>);</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(reg);<span class=\"comment\">//\"[object RegExp]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"built_in\">Math</span>.valueOf();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(reg);<span class=\"comment\">//\"[object Math]\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"判断原生JSON对象\"><a href=\"#判断原生JSON对象\" class=\"headerlink\" title=\"判断原生JSON对象\"></a>判断原生JSON对象</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isNativeJSON = <span class=\"built_in\">window</span>.JSON &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">JSON</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(isNativeJSON);<span class=\"comment\">//[object JSON]</span></div></pre></td></tr></table></figure>\n<p>输出为</p>\n<h5 id=\"判断自定义类型\"><a href=\"#判断自定义类型\" class=\"headerlink\" title=\"判断自定义类型\"></a>判断自定义类型</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> foo =<span class=\"keyword\">new</span> Foo(<span class=\"string\">\"harry\"</span>,<span class=\"number\">20</span>);</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(foo);<span class=\"comment\">//\"[object Object]\"</span></div></pre></td></tr></table></figure>\n<p>遇到的一个问题是，使用Object.prototype.toString.call()方法不能判断foo是Foo类的实例。只能用instanceof来判断。</p>\n<h4 id=\"instanceof判断数据类型\"><a href=\"#instanceof判断数据类型\" class=\"headerlink\" title=\"instanceof判断数据类型\"></a>instanceof判断数据类型</h4><p>instanceof作用是判断原型与实例之间的关系。用法是：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">实例 <span class=\"keyword\">instanceof</span> 原型</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>instanceof操作符会在实例的原型链上查找，直到找到右边构造函数的prototype属性，或者为null的时候停止。<br>引用自<br><a href=\"http://blog.xieluping.cn/2017/08/18/instanceof/\" target=\"_blank\" rel=\"noopener\">http://blog.xieluping.cn/2017/08/18/instanceof/</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> Foo);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在搬砖途中看到一大神的代码，用Object.prototype.toString.call()判断数据类型，在这里学习总结下，在js中，判断数据类型除了用typeof运算符之外，还可以用Object.prototype.toString.call()方法、instanceof操作符。  </p>\n<h3 id=\"几种判断方法的区别\"><a href=\"#几种判断方法的区别\" class=\"headerlink\" title=\"几种判断方法的区别\"></a>几种判断方法的区别</h3><h4 id=\"typeof判断数据类型\"><a href=\"#typeof判断数据类型\" class=\"headerlink\" title=\"typeof判断数据类型\"></a>typeof判断数据类型</h4><p>使用typeof操作符，判断数据类型返回值如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span><span class=\"comment\">//\"number\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">\"a\"</span><span class=\"comment\">//\"string\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span><span class=\"comment\">//\"boolean\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;<span class=\"comment\">//\"object\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> []<span class=\"comment\">//\"object\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;<span class=\"comment\">//\"function\"</span></div></pre></td></tr></table></figure></p>\n<p>使用时的一个问题是，在判断数组和对象存储值时，都返回”object”。</p>\n<h4 id=\"Object-prototype上的原生toString-方法判断数据类型\"><a href=\"#Object-prototype上的原生toString-方法判断数据类型\" class=\"headerlink\" title=\"Object.prototype上的原生toString()方法判断数据类型\"></a>Object.prototype上的原生toString()方法判断数据类型</h4><p>Object.prototype.toString.call()方法既可以判断基本类型，也可以判断原生引用类型，还可以判断原生JSON对象。  </p>\n<h5 id=\"判断基本类型\"><a href=\"#判断基本类型\" class=\"headerlink\" title=\"判断基本类型\"></a>判断基本类型</h5><p>数字number、字符串string、布尔值boolean。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">2</span>);<span class=\"comment\">//\"[object Number]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">\"s\"</span>);<span class=\"comment\">//\"[object String]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">true</span>);<span class=\"comment\">//\"[object Boolean]\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"判断空类型\"><a href=\"#判断空类型\" class=\"headerlink\" title=\"判断空类型\"></a>判断空类型</h5><p>null和undefined。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>);<span class=\"comment\">//\"[object Null]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>);<span class=\"comment\">//\"[object Undefined]\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"判断复合类型\"><a href=\"#判断复合类型\" class=\"headerlink\" title=\"判断复合类型\"></a>判断复合类型</h5><p>对象Object、数组Array、方法Function、日期Date、布尔Boolean、数字Number、字符串String、正则RegExp、Math。<br>例如上面例子中的引用类型存储值就可以使用Object.prototype.toString()方法区别出来：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;);<span class=\"comment\">//\"[object Object]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([]);<span class=\"comment\">//\"[object Array]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);<span class=\"comment\">//\"[object Function]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">String</span>);<span class=\"comment\">//\"[object Function]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(t);<span class=\"comment\">//\"[object Date]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(bb);<span class=\"comment\">//\"[object Boolean]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(bb);<span class=\"comment\">//\"[object Number]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(str);<span class=\"comment\">//\"[object String]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^1[34578][0-9]&#123;9&#125;$\"</span>,<span class=\"string\">\"g\"</span>);</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(reg);<span class=\"comment\">//\"[object RegExp]\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"built_in\">Math</span>.valueOf();</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(reg);<span class=\"comment\">//\"[object Math]\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"判断原生JSON对象\"><a href=\"#判断原生JSON对象\" class=\"headerlink\" title=\"判断原生JSON对象\"></a>判断原生JSON对象</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isNativeJSON = <span class=\"built_in\">window</span>.JSON &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">JSON</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(isNativeJSON);<span class=\"comment\">//[object JSON]</span></div></pre></td></tr></table></figure>\n<p>输出为</p>\n<h5 id=\"判断自定义类型\"><a href=\"#判断自定义类型\" class=\"headerlink\" title=\"判断自定义类型\"></a>判断自定义类型</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> foo =<span class=\"keyword\">new</span> Foo(<span class=\"string\">\"harry\"</span>,<span class=\"number\">20</span>);</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(foo);<span class=\"comment\">//\"[object Object]\"</span></div></pre></td></tr></table></figure>\n<p>遇到的一个问题是，使用Object.prototype.toString.call()方法不能判断foo是Foo类的实例。只能用instanceof来判断。</p>\n<h4 id=\"instanceof判断数据类型\"><a href=\"#instanceof判断数据类型\" class=\"headerlink\" title=\"instanceof判断数据类型\"></a>instanceof判断数据类型</h4><p>instanceof作用是判断原型与实例之间的关系。用法是：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">实例 <span class=\"keyword\">instanceof</span> 原型</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>instanceof操作符会在实例的原型链上查找，直到找到右边构造函数的prototype属性，或者为null的时候停止。<br>引用自<br><a href=\"http://blog.xieluping.cn/2017/08/18/instanceof/\" target=\"_blank\" rel=\"noopener\">http://blog.xieluping.cn/2017/08/18/instanceof/</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> Foo);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n"},{"title":"正则表达式学习总结","date":"2017-08-30T11:57:31.000Z","_content":"正则表达式的基本语法：\n```js\nvar expression = /pattern(模式)/flags(标识符);\n```\npattern(模式)可以是由字符类、限定符、分组、向前查找以及反向引用。flags(标识符)取值为：i(不区分大小写)，g(全局匹配)，m(多行匹配),同一个正则表达式可以带有一个或多个flags。\n\n### 创建正则表达式\n#### 字面量创建\n```js\n//匹配字符串中所有“at”的实例\nvar e = /at/g;\n//匹配第一个“bat”或“cat”,不区分大小写\nvar e = /[bc]at/i;\n```\n#### RegExp构造函数创建\nRegExp构造函数接收两个参数，第一个参数是要匹配的字符串模式，第二个是可选的标识符字符串。\n```js\n//匹配第一个“bat”或“cat”,不区分大小写\nvar e = new RegExp(\"[bc]at\",\"i\");\n```\n两种创建方式的比较：\n>在ECMAScript3中，字面量创建和RegExp对象创建区别是：字面量创建始终会共享同一个RegExp实例，而构造函数创建的每一个RegExp实例都是一个新实例  \n> ECMAScript5明确规定：使用正则表达式字面量必须像直接调用RegExp构造函数一样，每次都创建新的RegExp实例。IE9+、Firefox 4+和Chrome都做出了修改。\n\n正则表达式中的元字符必须转义。元字符有：\n```js\n( [ { \\ ^ $ | ) ? * + . ] }\n```\n例如：\n```js\n//匹配第一个“[bc]at”,不区分大小写\nvar e = /\\[bc\\]at/i;\n//在RegExp构造函数创建时，元字符需要双重on转义\nvar e = new RegExp(\"\\\\[bc\\\\]at\",\"i\");\n```\n### RegExp实例的属性和方法\n#### RegExp实例属性\n\n```sh\nignoreCase 返回布尔值，表示RegExp对象是否具有标志 i\nglobal 返回布尔值，表示RegExp对象是否具有表示 g\nmultiline 返回布尔值，表示RegExp对象是否具有表示 m\nlastIndex 一个整数，标识开始下一次匹配的字符位置\nsoure 返回正则表达式的原文本 （不包括反斜杠）\ni 执行对大小写不敏感的匹配\ng 执行全局匹配 （查找所有匹配而非在找到第一个匹配后停止）\nm 执行多行匹配\n```\n\n#### 字符类匹配\n\n```sh\n[...]查找方括号之间的任何字符\n[^..]查找任何不在方括号之间的字符\n[a-z]查找任何从小写a到小写z的字符\n[A-Z]查找任何从大写A到大写Z的字符\n[A-z]查找任何从大写A到小写z的字符\n. 查找单个字符，除了换行和行结束符\n\\w 查找单词字符，等价于 [a-zA-Z0-9]\n\\W 查找非单词字符，等价于 [^a-zA-Z0-9]\n\\s 查找空白字符\n\\S 查找非空白字符\n\\d 查找数字，等价于[0-9]\n\\D 查找非数字字符，等价于[^0-9]\n\\b 匹配单词边界\n\\r 查找回车符\n\\t 查找制表符\n\\0 查找NULL字符\n\\n 查找换行符\n```\n\n#### 重复字符匹配\n```sh\n{n,m}匹配前一项至少n次，但不能超过m次\n{n,}匹配前一项n次或更多次\n{n}匹配前一项n次\nn?匹配前一项0次或者1次，也就是说前一项是可选的，等价于{0,1}\nn+匹配前一项一次或多次，等价于{1,}\nn*匹配前一项0次或多次，等价于{0，}\nn$匹配任何结尾为n的字符串\n^n匹配任何开头为n的字符串\n？=n匹配任何其后紧接指定字符串n的字符串\n?!n匹配任何其后没有紧接指定字符串n的字符串\n```\n\n#### 匹配特定数字\n```sh\n^[1-9]\\d*$ 匹配正整数\n^-[1-9]\\d*$ 匹配负整数\n^-?[0-9]\\d*$ 匹配整数\n^[1-9]\\d*|0$ 匹配非负整数（正整数 + 0）\n^-[1-9]\\d*|0$ 匹配非正整数（负整数 + 0）\n^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*$ 匹配正浮点数\n^-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*)$ 匹配负浮点数\n^-?([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0)$ 匹配浮点数\n^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0$ 匹配非负浮点数（正浮点数 + 0）\n^(-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*))|0?.0+|0$ 匹配非正浮点数（负浮点数 + 0）\n```\n\n#### 方法\n##### exec()方法\nexec()方法为模式的捕获组而设计的，该方法接收一个参数，即要匹配的字符串，该方法返回一个包含捕获组的数组Array,如果没有捕获组匹配返回null。返回的数组Array中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配到的字符串。数组Array中还有两个参数input(返回要匹配的字符串)，index(返回匹配项在字符串中的位置)  \n模式中的捕获组就是指圆括号中的字符串。\nexg:\n```js\nvar e = /do(es)(d)?/;\ne.exec(\"ssdoesdo\");\n/**\narray[0]:\"doesd\",\narray[1]:\"es\",\narray[2]:\"d\",\nindex:2,\ninput:\"ssdoesdo\"\n**/\n```\n例子中，模式中包含两个捕获组\"es\"、\"d\"，即圆括号中的字符串。\n\n##### test()方法\ntest()方法检索字符串中指定的值，该方法接收一个参数，如果字符串中含有与模式匹配的文本则返回true，否则返回false。\nexg:\n```js\nvar e = /do(es)?/;\ne.test(\"doesdo\");\n//true\n```\n如果正则表达式中带有g标识符,则每一次调用test方法和exec方法都从上一次匹配结束位置开始匹配；如果正则表达式中没有g标识符，则每次调用方法都从字符串起始位置开始匹配。\nexg:\n```js\nvar e = /do(es)?/g;\ne.exec(\"ssdoesdoesdoes\");\n/*\narray[0]:\"does\",\narray[1]:\"es\",\nindex:2,\ninput:\"ssdoesdoesdoes\"\n*/\ne.exec(\"ssdoesdoesdoes\");\n/*\narray[0]:\"does\",\narray[1]:\"es\",\nindex:6,\ninput:\"ssdoesdoesdoes\"\n*/\n\n```\n```js\nvar e = /do(es)?/g;\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//6\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//10\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//14\n```\n```js\nvar e = /do(es)?/;\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//0\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//0\n```\n### 常用的正则校验\n```js\n/^1[34578]\\d{9}$/ //匹配手机号\n/^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/ //匹配座机号\n/^[0-9]\\d*$/  //匹配正整数\n/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/ //匹配ip地址\n/^(\\w-*\\.*)+@(\\w-?)+(\\.\\w{2,})+$/  //匹配邮箱\n/^(\\d{14}|\\d{17})(\\d|[xX])$/  //匹配身份证\n```\n","source":"_posts/RegExp.md","raw":"---\ntitle: 正则表达式学习总结\ndate: 2017-08-30 19:57:31\ntags:\n    - RegExp\n---\n正则表达式的基本语法：\n```js\nvar expression = /pattern(模式)/flags(标识符);\n```\npattern(模式)可以是由字符类、限定符、分组、向前查找以及反向引用。flags(标识符)取值为：i(不区分大小写)，g(全局匹配)，m(多行匹配),同一个正则表达式可以带有一个或多个flags。\n\n### 创建正则表达式\n#### 字面量创建\n```js\n//匹配字符串中所有“at”的实例\nvar e = /at/g;\n//匹配第一个“bat”或“cat”,不区分大小写\nvar e = /[bc]at/i;\n```\n#### RegExp构造函数创建\nRegExp构造函数接收两个参数，第一个参数是要匹配的字符串模式，第二个是可选的标识符字符串。\n```js\n//匹配第一个“bat”或“cat”,不区分大小写\nvar e = new RegExp(\"[bc]at\",\"i\");\n```\n两种创建方式的比较：\n>在ECMAScript3中，字面量创建和RegExp对象创建区别是：字面量创建始终会共享同一个RegExp实例，而构造函数创建的每一个RegExp实例都是一个新实例  \n> ECMAScript5明确规定：使用正则表达式字面量必须像直接调用RegExp构造函数一样，每次都创建新的RegExp实例。IE9+、Firefox 4+和Chrome都做出了修改。\n\n正则表达式中的元字符必须转义。元字符有：\n```js\n( [ { \\ ^ $ | ) ? * + . ] }\n```\n例如：\n```js\n//匹配第一个“[bc]at”,不区分大小写\nvar e = /\\[bc\\]at/i;\n//在RegExp构造函数创建时，元字符需要双重on转义\nvar e = new RegExp(\"\\\\[bc\\\\]at\",\"i\");\n```\n### RegExp实例的属性和方法\n#### RegExp实例属性\n\n```sh\nignoreCase 返回布尔值，表示RegExp对象是否具有标志 i\nglobal 返回布尔值，表示RegExp对象是否具有表示 g\nmultiline 返回布尔值，表示RegExp对象是否具有表示 m\nlastIndex 一个整数，标识开始下一次匹配的字符位置\nsoure 返回正则表达式的原文本 （不包括反斜杠）\ni 执行对大小写不敏感的匹配\ng 执行全局匹配 （查找所有匹配而非在找到第一个匹配后停止）\nm 执行多行匹配\n```\n\n#### 字符类匹配\n\n```sh\n[...]查找方括号之间的任何字符\n[^..]查找任何不在方括号之间的字符\n[a-z]查找任何从小写a到小写z的字符\n[A-Z]查找任何从大写A到大写Z的字符\n[A-z]查找任何从大写A到小写z的字符\n. 查找单个字符，除了换行和行结束符\n\\w 查找单词字符，等价于 [a-zA-Z0-9]\n\\W 查找非单词字符，等价于 [^a-zA-Z0-9]\n\\s 查找空白字符\n\\S 查找非空白字符\n\\d 查找数字，等价于[0-9]\n\\D 查找非数字字符，等价于[^0-9]\n\\b 匹配单词边界\n\\r 查找回车符\n\\t 查找制表符\n\\0 查找NULL字符\n\\n 查找换行符\n```\n\n#### 重复字符匹配\n```sh\n{n,m}匹配前一项至少n次，但不能超过m次\n{n,}匹配前一项n次或更多次\n{n}匹配前一项n次\nn?匹配前一项0次或者1次，也就是说前一项是可选的，等价于{0,1}\nn+匹配前一项一次或多次，等价于{1,}\nn*匹配前一项0次或多次，等价于{0，}\nn$匹配任何结尾为n的字符串\n^n匹配任何开头为n的字符串\n？=n匹配任何其后紧接指定字符串n的字符串\n?!n匹配任何其后没有紧接指定字符串n的字符串\n```\n\n#### 匹配特定数字\n```sh\n^[1-9]\\d*$ 匹配正整数\n^-[1-9]\\d*$ 匹配负整数\n^-?[0-9]\\d*$ 匹配整数\n^[1-9]\\d*|0$ 匹配非负整数（正整数 + 0）\n^-[1-9]\\d*|0$ 匹配非正整数（负整数 + 0）\n^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*$ 匹配正浮点数\n^-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*)$ 匹配负浮点数\n^-?([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0)$ 匹配浮点数\n^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0$ 匹配非负浮点数（正浮点数 + 0）\n^(-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*))|0?.0+|0$ 匹配非正浮点数（负浮点数 + 0）\n```\n\n#### 方法\n##### exec()方法\nexec()方法为模式的捕获组而设计的，该方法接收一个参数，即要匹配的字符串，该方法返回一个包含捕获组的数组Array,如果没有捕获组匹配返回null。返回的数组Array中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配到的字符串。数组Array中还有两个参数input(返回要匹配的字符串)，index(返回匹配项在字符串中的位置)  \n模式中的捕获组就是指圆括号中的字符串。\nexg:\n```js\nvar e = /do(es)(d)?/;\ne.exec(\"ssdoesdo\");\n/**\narray[0]:\"doesd\",\narray[1]:\"es\",\narray[2]:\"d\",\nindex:2,\ninput:\"ssdoesdo\"\n**/\n```\n例子中，模式中包含两个捕获组\"es\"、\"d\"，即圆括号中的字符串。\n\n##### test()方法\ntest()方法检索字符串中指定的值，该方法接收一个参数，如果字符串中含有与模式匹配的文本则返回true，否则返回false。\nexg:\n```js\nvar e = /do(es)?/;\ne.test(\"doesdo\");\n//true\n```\n如果正则表达式中带有g标识符,则每一次调用test方法和exec方法都从上一次匹配结束位置开始匹配；如果正则表达式中没有g标识符，则每次调用方法都从字符串起始位置开始匹配。\nexg:\n```js\nvar e = /do(es)?/g;\ne.exec(\"ssdoesdoesdoes\");\n/*\narray[0]:\"does\",\narray[1]:\"es\",\nindex:2,\ninput:\"ssdoesdoesdoes\"\n*/\ne.exec(\"ssdoesdoesdoes\");\n/*\narray[0]:\"does\",\narray[1]:\"es\",\nindex:6,\ninput:\"ssdoesdoesdoes\"\n*/\n\n```\n```js\nvar e = /do(es)?/g;\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//6\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//10\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//14\n```\n```js\nvar e = /do(es)?/;\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//0\nconsole.log(e.test(\"ssdoesdoesdoes\"));\nconsole.log(e.lastIndex);\n//true\n//0\n```\n### 常用的正则校验\n```js\n/^1[34578]\\d{9}$/ //匹配手机号\n/^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/ //匹配座机号\n/^[0-9]\\d*$/  //匹配正整数\n/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/ //匹配ip地址\n/^(\\w-*\\.*)+@(\\w-?)+(\\.\\w{2,})+$/  //匹配邮箱\n/^(\\d{14}|\\d{17})(\\d|[xX])$/  //匹配身份证\n```\n","slug":"RegExp","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi10006mo01mu97m929","content":"<p>正则表达式的基本语法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> expression = <span class=\"regexp\">/pattern(模式)/</span>flags(标识符);</div></pre></td></tr></table></figure></p>\n<p>pattern(模式)可以是由字符类、限定符、分组、向前查找以及反向引用。flags(标识符)取值为：i(不区分大小写)，g(全局匹配)，m(多行匹配),同一个正则表达式可以带有一个或多个flags。</p>\n<h3 id=\"创建正则表达式\"><a href=\"#创建正则表达式\" class=\"headerlink\" title=\"创建正则表达式\"></a>创建正则表达式</h3><h4 id=\"字面量创建\"><a href=\"#字面量创建\" class=\"headerlink\" title=\"字面量创建\"></a>字面量创建</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//匹配字符串中所有“at”的实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/at/g</span>;</div><div class=\"line\"><span class=\"comment\">//匹配第一个“bat”或“cat”,不区分大小写</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/[bc]at/i</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"RegExp构造函数创建\"><a href=\"#RegExp构造函数创建\" class=\"headerlink\" title=\"RegExp构造函数创建\"></a>RegExp构造函数创建</h4><p>RegExp构造函数接收两个参数，第一个参数是要匹配的字符串模式，第二个是可选的标识符字符串。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//匹配第一个“bat”或“cat”,不区分大小写</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"[bc]at\"</span>,<span class=\"string\">\"i\"</span>);</div></pre></td></tr></table></figure></p>\n<p>两种创建方式的比较：</p>\n<blockquote>\n<p>在ECMAScript3中，字面量创建和RegExp对象创建区别是：字面量创建始终会共享同一个RegExp实例，而构造函数创建的每一个RegExp实例都是一个新实例<br>ECMAScript5明确规定：使用正则表达式字面量必须像直接调用RegExp构造函数一样，每次都创建新的RegExp实例。IE9+、Firefox 4+和Chrome都做出了修改。</p>\n</blockquote>\n<p>正则表达式中的元字符必须转义。元字符有：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">( [ &#123; \\ ^ $ | ) ? * + . ] &#125;</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//匹配第一个“[bc]at”,不区分大小写</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/\\[bc\\]at/i</span>;</div><div class=\"line\"><span class=\"comment\">//在RegExp构造函数创建时，元字符需要双重on转义</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\[bc\\\\]at\"</span>,<span class=\"string\">\"i\"</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"RegExp实例的属性和方法\"><a href=\"#RegExp实例的属性和方法\" class=\"headerlink\" title=\"RegExp实例的属性和方法\"></a>RegExp实例的属性和方法</h3><h4 id=\"RegExp实例属性\"><a href=\"#RegExp实例属性\" class=\"headerlink\" title=\"RegExp实例属性\"></a>RegExp实例属性</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ignoreCase 返回布尔值，表示RegExp对象是否具有标志 i</div><div class=\"line\">global 返回布尔值，表示RegExp对象是否具有表示 g</div><div class=\"line\">multiline 返回布尔值，表示RegExp对象是否具有表示 m</div><div class=\"line\">lastIndex 一个整数，标识开始下一次匹配的字符位置</div><div class=\"line\">soure 返回正则表达式的原文本 （不包括反斜杠）</div><div class=\"line\">i 执行对大小写不敏感的匹配</div><div class=\"line\">g 执行全局匹配 （查找所有匹配而非在找到第一个匹配后停止）</div><div class=\"line\">m 执行多行匹配</div></pre></td></tr></table></figure>\n<h4 id=\"字符类匹配\"><a href=\"#字符类匹配\" class=\"headerlink\" title=\"字符类匹配\"></a>字符类匹配</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...]查找方括号之间的任何字符</div><div class=\"line\">[^..]查找任何不在方括号之间的字符</div><div class=\"line\">[a-z]查找任何从小写a到小写z的字符</div><div class=\"line\">[A-Z]查找任何从大写A到大写Z的字符</div><div class=\"line\">[A-z]查找任何从大写A到小写z的字符</div><div class=\"line\">. 查找单个字符，除了换行和行结束符</div><div class=\"line\">\\w 查找单词字符，等价于 [a-zA-Z0-9]</div><div class=\"line\">\\W 查找非单词字符，等价于 [^a-zA-Z0-9]</div><div class=\"line\">\\s 查找空白字符</div><div class=\"line\">\\S 查找非空白字符</div><div class=\"line\">\\d 查找数字，等价于[0-9]</div><div class=\"line\">\\D 查找非数字字符，等价于[^0-9]</div><div class=\"line\">\\b 匹配单词边界</div><div class=\"line\">\\r 查找回车符</div><div class=\"line\">\\t 查找制表符</div><div class=\"line\">\\0 查找NULL字符</div><div class=\"line\">\\n 查找换行符</div></pre></td></tr></table></figure>\n<h4 id=\"重复字符匹配\"><a href=\"#重复字符匹配\" class=\"headerlink\" title=\"重复字符匹配\"></a>重复字符匹配</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;n,m&#125;匹配前一项至少n次，但不能超过m次</div><div class=\"line\">&#123;n,&#125;匹配前一项n次或更多次</div><div class=\"line\">&#123;n&#125;匹配前一项n次</div><div class=\"line\">n?匹配前一项0次或者1次，也就是说前一项是可选的，等价于&#123;0,1&#125;</div><div class=\"line\">n+匹配前一项一次或多次，等价于&#123;1,&#125;</div><div class=\"line\">n*匹配前一项0次或多次，等价于&#123;0，&#125;</div><div class=\"line\">n$匹配任何结尾为n的字符串</div><div class=\"line\">^n匹配任何开头为n的字符串</div><div class=\"line\">？=n匹配任何其后紧接指定字符串n的字符串</div><div class=\"line\">?!n匹配任何其后没有紧接指定字符串n的字符串</div></pre></td></tr></table></figure>\n<h4 id=\"匹配特定数字\"><a href=\"#匹配特定数字\" class=\"headerlink\" title=\"匹配特定数字\"></a>匹配特定数字</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[1-9]\\d*$ 匹配正整数</div><div class=\"line\">^-[1-9]\\d*$ 匹配负整数</div><div class=\"line\">^-?[0-9]\\d*$ 匹配整数</div><div class=\"line\">^[1-9]\\d*|0$ 匹配非负整数（正整数 + 0）</div><div class=\"line\">^-[1-9]\\d*|0$ 匹配非正整数（负整数 + 0）</div><div class=\"line\">^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*$ 匹配正浮点数</div><div class=\"line\">^-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*)$ 匹配负浮点数</div><div class=\"line\">^-?([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0)$ 匹配浮点数</div><div class=\"line\">^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0$ 匹配非负浮点数（正浮点数 + 0）</div><div class=\"line\">^(-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*))|0?.0+|0$ 匹配非正浮点数（负浮点数 + 0）</div></pre></td></tr></table></figure>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"exec-方法\"><a href=\"#exec-方法\" class=\"headerlink\" title=\"exec()方法\"></a>exec()方法</h5><p>exec()方法为模式的捕获组而设计的，该方法接收一个参数，即要匹配的字符串，该方法返回一个包含捕获组的数组Array,如果没有捕获组匹配返回null。返回的数组Array中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配到的字符串。数组Array中还有两个参数input(返回要匹配的字符串)，index(返回匹配项在字符串中的位置)<br>模式中的捕获组就是指圆括号中的字符串。<br>exg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)(d)?/</span>;</div><div class=\"line\">e.exec(<span class=\"string\">\"ssdoesdo\"</span>);</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">array[0]:\"doesd\",</div><div class=\"line\">array[1]:\"es\",</div><div class=\"line\">array[2]:\"d\",</div><div class=\"line\">index:2,</div><div class=\"line\">input:\"ssdoesdo\"</div><div class=\"line\">**/</div></pre></td></tr></table></figure></p>\n<p>例子中，模式中包含两个捕获组”es”、”d”，即圆括号中的字符串。</p>\n<h5 id=\"test-方法\"><a href=\"#test-方法\" class=\"headerlink\" title=\"test()方法\"></a>test()方法</h5><p>test()方法检索字符串中指定的值，该方法接收一个参数，如果字符串中含有与模式匹配的文本则返回true，否则返回false。<br>exg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/</span>;</div><div class=\"line\">e.test(<span class=\"string\">\"doesdo\"</span>);</div><div class=\"line\"><span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>如果正则表达式中带有g标识符,则每一次调用test方法和exec方法都从上一次匹配结束位置开始匹配；如果正则表达式中没有g标识符，则每次调用方法都从字符串起始位置开始匹配。<br>exg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/g</span>;</div><div class=\"line\">e.exec(<span class=\"string\">\"ssdoesdoesdoes\"</span>);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">array[0]:\"does\",</div><div class=\"line\">array[1]:\"es\",</div><div class=\"line\">index:2,</div><div class=\"line\">input:\"ssdoesdoesdoes\"</div><div class=\"line\">*/</div><div class=\"line\">e.exec(<span class=\"string\">\"ssdoesdoesdoes\"</span>);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">array[0]:\"does\",</div><div class=\"line\">array[1]:\"es\",</div><div class=\"line\">index:6,</div><div class=\"line\">input:\"ssdoesdoesdoes\"</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/g</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//14</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//0</span></div></pre></td></tr></table></figure>\n<h3 id=\"常用的正则校验\"><a href=\"#常用的正则校验\" class=\"headerlink\" title=\"常用的正则校验\"></a>常用的正则校验</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/^<span class=\"number\">1</span>[<span class=\"number\">34578</span>]\\d&#123;<span class=\"number\">9</span>&#125;$/ <span class=\"comment\">//匹配手机号</span></div><div class=\"line\">/^(([<span class=\"number\">0</span>\\+]\\d&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;-)?(<span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;)-)(\\d&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;)(-(\\d&#123;<span class=\"number\">3</span>,&#125;))?$/ <span class=\"comment\">//匹配座机号</span></div><div class=\"line\">/^[<span class=\"number\">0</span><span class=\"number\">-9</span>]\\d*$/  <span class=\"comment\">//匹配正整数</span></div><div class=\"line\">/^\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;$/ <span class=\"comment\">//匹配ip地址</span></div><div class=\"line\">/^(\\w-*\\.*)+@(\\w-?)+(\\.\\w&#123;<span class=\"number\">2</span>,&#125;)+$/  <span class=\"comment\">//匹配邮箱</span></div><div class=\"line\">/^(\\d&#123;<span class=\"number\">14</span>&#125;|\\d&#123;<span class=\"number\">17</span>&#125;)(\\d|[xX])$/  <span class=\"comment\">//匹配身份证</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>正则表达式的基本语法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> expression = <span class=\"regexp\">/pattern(模式)/</span>flags(标识符);</div></pre></td></tr></table></figure></p>\n<p>pattern(模式)可以是由字符类、限定符、分组、向前查找以及反向引用。flags(标识符)取值为：i(不区分大小写)，g(全局匹配)，m(多行匹配),同一个正则表达式可以带有一个或多个flags。</p>\n<h3 id=\"创建正则表达式\"><a href=\"#创建正则表达式\" class=\"headerlink\" title=\"创建正则表达式\"></a>创建正则表达式</h3><h4 id=\"字面量创建\"><a href=\"#字面量创建\" class=\"headerlink\" title=\"字面量创建\"></a>字面量创建</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//匹配字符串中所有“at”的实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/at/g</span>;</div><div class=\"line\"><span class=\"comment\">//匹配第一个“bat”或“cat”,不区分大小写</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/[bc]at/i</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"RegExp构造函数创建\"><a href=\"#RegExp构造函数创建\" class=\"headerlink\" title=\"RegExp构造函数创建\"></a>RegExp构造函数创建</h4><p>RegExp构造函数接收两个参数，第一个参数是要匹配的字符串模式，第二个是可选的标识符字符串。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//匹配第一个“bat”或“cat”,不区分大小写</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"[bc]at\"</span>,<span class=\"string\">\"i\"</span>);</div></pre></td></tr></table></figure></p>\n<p>两种创建方式的比较：</p>\n<blockquote>\n<p>在ECMAScript3中，字面量创建和RegExp对象创建区别是：字面量创建始终会共享同一个RegExp实例，而构造函数创建的每一个RegExp实例都是一个新实例<br>ECMAScript5明确规定：使用正则表达式字面量必须像直接调用RegExp构造函数一样，每次都创建新的RegExp实例。IE9+、Firefox 4+和Chrome都做出了修改。</p>\n</blockquote>\n<p>正则表达式中的元字符必须转义。元字符有：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">( [ &#123; \\ ^ $ | ) ? * + . ] &#125;</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//匹配第一个“[bc]at”,不区分大小写</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/\\[bc\\]at/i</span>;</div><div class=\"line\"><span class=\"comment\">//在RegExp构造函数创建时，元字符需要双重on转义</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\[bc\\\\]at\"</span>,<span class=\"string\">\"i\"</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"RegExp实例的属性和方法\"><a href=\"#RegExp实例的属性和方法\" class=\"headerlink\" title=\"RegExp实例的属性和方法\"></a>RegExp实例的属性和方法</h3><h4 id=\"RegExp实例属性\"><a href=\"#RegExp实例属性\" class=\"headerlink\" title=\"RegExp实例属性\"></a>RegExp实例属性</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ignoreCase 返回布尔值，表示RegExp对象是否具有标志 i</div><div class=\"line\">global 返回布尔值，表示RegExp对象是否具有表示 g</div><div class=\"line\">multiline 返回布尔值，表示RegExp对象是否具有表示 m</div><div class=\"line\">lastIndex 一个整数，标识开始下一次匹配的字符位置</div><div class=\"line\">soure 返回正则表达式的原文本 （不包括反斜杠）</div><div class=\"line\">i 执行对大小写不敏感的匹配</div><div class=\"line\">g 执行全局匹配 （查找所有匹配而非在找到第一个匹配后停止）</div><div class=\"line\">m 执行多行匹配</div></pre></td></tr></table></figure>\n<h4 id=\"字符类匹配\"><a href=\"#字符类匹配\" class=\"headerlink\" title=\"字符类匹配\"></a>字符类匹配</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...]查找方括号之间的任何字符</div><div class=\"line\">[^..]查找任何不在方括号之间的字符</div><div class=\"line\">[a-z]查找任何从小写a到小写z的字符</div><div class=\"line\">[A-Z]查找任何从大写A到大写Z的字符</div><div class=\"line\">[A-z]查找任何从大写A到小写z的字符</div><div class=\"line\">. 查找单个字符，除了换行和行结束符</div><div class=\"line\">\\w 查找单词字符，等价于 [a-zA-Z0-9]</div><div class=\"line\">\\W 查找非单词字符，等价于 [^a-zA-Z0-9]</div><div class=\"line\">\\s 查找空白字符</div><div class=\"line\">\\S 查找非空白字符</div><div class=\"line\">\\d 查找数字，等价于[0-9]</div><div class=\"line\">\\D 查找非数字字符，等价于[^0-9]</div><div class=\"line\">\\b 匹配单词边界</div><div class=\"line\">\\r 查找回车符</div><div class=\"line\">\\t 查找制表符</div><div class=\"line\">\\0 查找NULL字符</div><div class=\"line\">\\n 查找换行符</div></pre></td></tr></table></figure>\n<h4 id=\"重复字符匹配\"><a href=\"#重复字符匹配\" class=\"headerlink\" title=\"重复字符匹配\"></a>重复字符匹配</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;n,m&#125;匹配前一项至少n次，但不能超过m次</div><div class=\"line\">&#123;n,&#125;匹配前一项n次或更多次</div><div class=\"line\">&#123;n&#125;匹配前一项n次</div><div class=\"line\">n?匹配前一项0次或者1次，也就是说前一项是可选的，等价于&#123;0,1&#125;</div><div class=\"line\">n+匹配前一项一次或多次，等价于&#123;1,&#125;</div><div class=\"line\">n*匹配前一项0次或多次，等价于&#123;0，&#125;</div><div class=\"line\">n$匹配任何结尾为n的字符串</div><div class=\"line\">^n匹配任何开头为n的字符串</div><div class=\"line\">？=n匹配任何其后紧接指定字符串n的字符串</div><div class=\"line\">?!n匹配任何其后没有紧接指定字符串n的字符串</div></pre></td></tr></table></figure>\n<h4 id=\"匹配特定数字\"><a href=\"#匹配特定数字\" class=\"headerlink\" title=\"匹配特定数字\"></a>匹配特定数字</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[1-9]\\d*$ 匹配正整数</div><div class=\"line\">^-[1-9]\\d*$ 匹配负整数</div><div class=\"line\">^-?[0-9]\\d*$ 匹配整数</div><div class=\"line\">^[1-9]\\d*|0$ 匹配非负整数（正整数 + 0）</div><div class=\"line\">^-[1-9]\\d*|0$ 匹配非正整数（负整数 + 0）</div><div class=\"line\">^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*$ 匹配正浮点数</div><div class=\"line\">^-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*)$ 匹配负浮点数</div><div class=\"line\">^-?([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0)$ 匹配浮点数</div><div class=\"line\">^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0$ 匹配非负浮点数（正浮点数 + 0）</div><div class=\"line\">^(-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*))|0?.0+|0$ 匹配非正浮点数（负浮点数 + 0）</div></pre></td></tr></table></figure>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"exec-方法\"><a href=\"#exec-方法\" class=\"headerlink\" title=\"exec()方法\"></a>exec()方法</h5><p>exec()方法为模式的捕获组而设计的，该方法接收一个参数，即要匹配的字符串，该方法返回一个包含捕获组的数组Array,如果没有捕获组匹配返回null。返回的数组Array中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配到的字符串。数组Array中还有两个参数input(返回要匹配的字符串)，index(返回匹配项在字符串中的位置)<br>模式中的捕获组就是指圆括号中的字符串。<br>exg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)(d)?/</span>;</div><div class=\"line\">e.exec(<span class=\"string\">\"ssdoesdo\"</span>);</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">array[0]:\"doesd\",</div><div class=\"line\">array[1]:\"es\",</div><div class=\"line\">array[2]:\"d\",</div><div class=\"line\">index:2,</div><div class=\"line\">input:\"ssdoesdo\"</div><div class=\"line\">**/</div></pre></td></tr></table></figure></p>\n<p>例子中，模式中包含两个捕获组”es”、”d”，即圆括号中的字符串。</p>\n<h5 id=\"test-方法\"><a href=\"#test-方法\" class=\"headerlink\" title=\"test()方法\"></a>test()方法</h5><p>test()方法检索字符串中指定的值，该方法接收一个参数，如果字符串中含有与模式匹配的文本则返回true，否则返回false。<br>exg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/</span>;</div><div class=\"line\">e.test(<span class=\"string\">\"doesdo\"</span>);</div><div class=\"line\"><span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>如果正则表达式中带有g标识符,则每一次调用test方法和exec方法都从上一次匹配结束位置开始匹配；如果正则表达式中没有g标识符，则每次调用方法都从字符串起始位置开始匹配。<br>exg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/g</span>;</div><div class=\"line\">e.exec(<span class=\"string\">\"ssdoesdoesdoes\"</span>);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">array[0]:\"does\",</div><div class=\"line\">array[1]:\"es\",</div><div class=\"line\">index:2,</div><div class=\"line\">input:\"ssdoesdoesdoes\"</div><div class=\"line\">*/</div><div class=\"line\">e.exec(<span class=\"string\">\"ssdoesdoesdoes\"</span>);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">array[0]:\"does\",</div><div class=\"line\">array[1]:\"es\",</div><div class=\"line\">index:6,</div><div class=\"line\">input:\"ssdoesdoesdoes\"</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/g</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//14</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"regexp\">/do(es)?/</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.test(<span class=\"string\">\"ssdoesdoesdoes\"</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(e.lastIndex);</div><div class=\"line\"><span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//0</span></div></pre></td></tr></table></figure>\n<h3 id=\"常用的正则校验\"><a href=\"#常用的正则校验\" class=\"headerlink\" title=\"常用的正则校验\"></a>常用的正则校验</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/^<span class=\"number\">1</span>[<span class=\"number\">34578</span>]\\d&#123;<span class=\"number\">9</span>&#125;$/ <span class=\"comment\">//匹配手机号</span></div><div class=\"line\">/^(([<span class=\"number\">0</span>\\+]\\d&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;-)?(<span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;)-)(\\d&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;)(-(\\d&#123;<span class=\"number\">3</span>,&#125;))?$/ <span class=\"comment\">//匹配座机号</span></div><div class=\"line\">/^[<span class=\"number\">0</span><span class=\"number\">-9</span>]\\d*$/  <span class=\"comment\">//匹配正整数</span></div><div class=\"line\">/^\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;$/ <span class=\"comment\">//匹配ip地址</span></div><div class=\"line\">/^(\\w-*\\.*)+@(\\w-?)+(\\.\\w&#123;<span class=\"number\">2</span>,&#125;)+$/  <span class=\"comment\">//匹配邮箱</span></div><div class=\"line\">/^(\\d&#123;<span class=\"number\">14</span>&#125;|\\d&#123;<span class=\"number\">17</span>&#125;)(\\d|[xX])$/  <span class=\"comment\">//匹配身份证</span></div></pre></td></tr></table></figure>\n"},{"title":"angular.copy()方法","date":"2017-09-11T12:01:11.000Z","_content":"### angular.copy()方法的定义\nangular.copy()方法实现对象属性的深度拷贝，返回一个新创建的对象。\n### 用法实例\n```js\nvar a = {\n        name: 'lucy',\n        age: 20\n    }\nvar b = angular.copy(a);\nconsole.log('a=',a);\n//{name: \"lucy\", age: 20}\nconsole.log('b=',b);\n//{name: \"lucy\", age: 20}\n```\n当我们改变a对象的属性，b对象属性并不会随之改变：\n```js\na.name = 'angular';\nconsole.log('a=',a);\n//{name: \"angular\", age: 20}\nconsole.log('b=',b);\n//{name: \"lucy\", age: 20}\n```\n### angular.copy()源码\n```js\n/**\n * @ngdoc function\n * @name angular.copy\n * @module ng\n * @kind function\n *\n * @description\n * Creates a deep copy of `source`, which should be an object or an array.\n *\n * * If no destination is supplied, a copy of the object or array is created.\n * * If a destination is provided, all of its elements (for arrays) or properties (for objects)\n *   are deleted and then all elements/properties from the source are copied to it.\n * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n * * If `source` is identical to `destination` an exception will be thrown.\n *\n * <br />\n * <div class=\"alert alert-warning\">\n *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`\n *   and on `destination`) will be ignored.\n * </div>\n *\n * @param {*} source The source that will be used to make a copy.\n *                   Can be any type, including primitives, `null`, and `undefined`.\n * @param {(Object|Array)=} destination Destination into which the source is copied. If\n *     provided, must be of the same type as `source`.\n * @returns {*} The copy or updated `destination`, if `destination` was specified.\n *\n * @example\n  <example module=\"copyExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form novalidate class=\"simple-form\">\n          <label>Name: <input type=\"text\" ng-model=\"user.name\" /></label><br />\n          <label>Age:  <input type=\"number\" ng-model=\"user.age\" /></label><br />\n          Gender: <label><input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male</label>\n                  <label><input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female</label><br />\n          <button ng-click=\"reset()\">RESET</button>\n          <button ng-click=\"update(user)\">SAVE</button>\n        </form>\n        <pre>form = {{user | json}}</pre>\n        <pre>master = {{master | json}}</pre>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      // Module: copyExample\n      angular.\n        module('copyExample', []).\n        controller('ExampleController', ['$scope', function($scope) {\n          $scope.master = {};\n\n          $scope.reset = function() {\n            // Example with 1 argument\n            $scope.user = angular.copy($scope.master);\n          };\n\n          $scope.update = function(user) {\n            // Example with 2 arguments\n            angular.copy(user, $scope.master);\n          };\n\n          $scope.reset();\n        }]);\n    </file>\n  </example>\n */\nfunction copy(source, destination) {\n  var stackSource = [];\n  var stackDest = [];\n\n  if (destination) {\n    if (isTypedArray(destination) || isArrayBuffer(destination)) {\n      throw ngMinErr('cpta', \"Can't copy! TypedArray destination cannot be mutated.\");\n    }\n    if (source === destination) {\n      throw ngMinErr('cpi', \"Can't copy! Source and destination are identical.\");\n    }\n\n    // Empty the destination object\n    if (isArray(destination)) {\n      destination.length = 0;\n    } else {\n      forEach(destination, function(value, key) {\n        if (key !== '$$hashKey') {\n          delete destination[key];\n        }\n      });\n    }\n\n    stackSource.push(source);\n    stackDest.push(destination);\n    return copyRecurse(source, destination);\n  }\n\n  return copyElement(source);\n\n  function copyRecurse(source, destination) {\n    var h = destination.$$hashKey;\n    var key;\n    if (isArray(source)) {\n      for (var i = 0, ii = source.length; i < ii; i++) {\n        destination.push(copyElement(source[i]));\n      }\n    } else if (isBlankObject(source)) {\n      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n      for (key in source) {\n        destination[key] = copyElement(source[key]);\n      }\n    } else if (source && typeof source.hasOwnProperty === 'function') {\n      // Slow path, which must rely on hasOwnProperty\n      for (key in source) {\n        if (source.hasOwnProperty(key)) {\n          destination[key] = copyElement(source[key]);\n        }\n      }\n    } else {\n      // Slowest path --- hasOwnProperty can't be called as a method\n      for (key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          destination[key] = copyElement(source[key]);\n        }\n      }\n    }\n    setHashKey(destination, h);\n    return destination;\n  }\n/*\n拷贝source的属性，并返回\n*/\n  function copyElement(source) {\n    // Simple values\n    if (!isObject(source)) {\n      return source;\n    }\n\n    // Already copied values\n    var index = stackSource.indexOf(source);\n    if (index !== -1) {\n      return stackDest[index];\n    }\n\n    if (isWindow(source) || isScope(source)) {\n      throw ngMinErr('cpws',\n        \"Can't copy! Making copies of Window or Scope instances is not supported.\");\n    }\n\n    var needsRecurse = false;\n    var destination = copyType(source);\n//创建数组或对象实例--destination\n    if (destination === undefined) {\n      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));\n      needsRecurse = true;\n    }\n\n    stackSource.push(source);\n    stackDest.push(destination);\n\n    return needsRecurse\n      ? copyRecurse(source, destination)\n      : destination;\n  }\n\n  function copyType(source) {\n    switch (toString.call(source)) {\n      case '[object Int8Array]':\n      case '[object Int16Array]':\n      case '[object Int32Array]':\n      case '[object Float32Array]':\n      case '[object Float64Array]':\n      case '[object Uint8Array]':\n      case '[object Uint8ClampedArray]':\n      case '[object Uint16Array]':\n      case '[object Uint32Array]':\n        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);\n\n      case '[object ArrayBuffer]':\n        //Support: IE10\n        if (!source.slice) {\n          var copied = new ArrayBuffer(source.byteLength);\n          new Uint8Array(copied).set(new Uint8Array(source));\n          return copied;\n        }\n        return source.slice(0);\n\n      case '[object Boolean]':\n      case '[object Number]':\n      case '[object String]':\n      case '[object Date]':\n        return new source.constructor(source.valueOf());\n\n      case '[object RegExp]':\n        var re = new RegExp(source.source, source.toString().match(/[^\\/]*$/)[0]);\n        re.lastIndex = source.lastIndex;\n        return re;\n\n      case '[object Blob]':\n        return new source.constructor([source], {type: source.type});\n    }\n\n    if (isFunction(source.cloneNode)) {\n      return source.cloneNode(true);\n    }\n  }\n}\n```\n源码中，copy()方法接收两个参数，第一个是源source，是一个对象或者数组，第二个参数destination可选，作为存储源source的对象，该方法返回一个和源source一样的对象，且该对象是新建的实例，使用时与源source不会相互影响。\n","source":"_posts/angular-copy.md","raw":"---\ntitle: angular.copy()方法\ndate: 2017-09-11 20:01:11\ntags:\n    - angular\n    - JavaScript\n---\n### angular.copy()方法的定义\nangular.copy()方法实现对象属性的深度拷贝，返回一个新创建的对象。\n### 用法实例\n```js\nvar a = {\n        name: 'lucy',\n        age: 20\n    }\nvar b = angular.copy(a);\nconsole.log('a=',a);\n//{name: \"lucy\", age: 20}\nconsole.log('b=',b);\n//{name: \"lucy\", age: 20}\n```\n当我们改变a对象的属性，b对象属性并不会随之改变：\n```js\na.name = 'angular';\nconsole.log('a=',a);\n//{name: \"angular\", age: 20}\nconsole.log('b=',b);\n//{name: \"lucy\", age: 20}\n```\n### angular.copy()源码\n```js\n/**\n * @ngdoc function\n * @name angular.copy\n * @module ng\n * @kind function\n *\n * @description\n * Creates a deep copy of `source`, which should be an object or an array.\n *\n * * If no destination is supplied, a copy of the object or array is created.\n * * If a destination is provided, all of its elements (for arrays) or properties (for objects)\n *   are deleted and then all elements/properties from the source are copied to it.\n * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n * * If `source` is identical to `destination` an exception will be thrown.\n *\n * <br />\n * <div class=\"alert alert-warning\">\n *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`\n *   and on `destination`) will be ignored.\n * </div>\n *\n * @param {*} source The source that will be used to make a copy.\n *                   Can be any type, including primitives, `null`, and `undefined`.\n * @param {(Object|Array)=} destination Destination into which the source is copied. If\n *     provided, must be of the same type as `source`.\n * @returns {*} The copy or updated `destination`, if `destination` was specified.\n *\n * @example\n  <example module=\"copyExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form novalidate class=\"simple-form\">\n          <label>Name: <input type=\"text\" ng-model=\"user.name\" /></label><br />\n          <label>Age:  <input type=\"number\" ng-model=\"user.age\" /></label><br />\n          Gender: <label><input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male</label>\n                  <label><input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female</label><br />\n          <button ng-click=\"reset()\">RESET</button>\n          <button ng-click=\"update(user)\">SAVE</button>\n        </form>\n        <pre>form = {{user | json}}</pre>\n        <pre>master = {{master | json}}</pre>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      // Module: copyExample\n      angular.\n        module('copyExample', []).\n        controller('ExampleController', ['$scope', function($scope) {\n          $scope.master = {};\n\n          $scope.reset = function() {\n            // Example with 1 argument\n            $scope.user = angular.copy($scope.master);\n          };\n\n          $scope.update = function(user) {\n            // Example with 2 arguments\n            angular.copy(user, $scope.master);\n          };\n\n          $scope.reset();\n        }]);\n    </file>\n  </example>\n */\nfunction copy(source, destination) {\n  var stackSource = [];\n  var stackDest = [];\n\n  if (destination) {\n    if (isTypedArray(destination) || isArrayBuffer(destination)) {\n      throw ngMinErr('cpta', \"Can't copy! TypedArray destination cannot be mutated.\");\n    }\n    if (source === destination) {\n      throw ngMinErr('cpi', \"Can't copy! Source and destination are identical.\");\n    }\n\n    // Empty the destination object\n    if (isArray(destination)) {\n      destination.length = 0;\n    } else {\n      forEach(destination, function(value, key) {\n        if (key !== '$$hashKey') {\n          delete destination[key];\n        }\n      });\n    }\n\n    stackSource.push(source);\n    stackDest.push(destination);\n    return copyRecurse(source, destination);\n  }\n\n  return copyElement(source);\n\n  function copyRecurse(source, destination) {\n    var h = destination.$$hashKey;\n    var key;\n    if (isArray(source)) {\n      for (var i = 0, ii = source.length; i < ii; i++) {\n        destination.push(copyElement(source[i]));\n      }\n    } else if (isBlankObject(source)) {\n      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n      for (key in source) {\n        destination[key] = copyElement(source[key]);\n      }\n    } else if (source && typeof source.hasOwnProperty === 'function') {\n      // Slow path, which must rely on hasOwnProperty\n      for (key in source) {\n        if (source.hasOwnProperty(key)) {\n          destination[key] = copyElement(source[key]);\n        }\n      }\n    } else {\n      // Slowest path --- hasOwnProperty can't be called as a method\n      for (key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          destination[key] = copyElement(source[key]);\n        }\n      }\n    }\n    setHashKey(destination, h);\n    return destination;\n  }\n/*\n拷贝source的属性，并返回\n*/\n  function copyElement(source) {\n    // Simple values\n    if (!isObject(source)) {\n      return source;\n    }\n\n    // Already copied values\n    var index = stackSource.indexOf(source);\n    if (index !== -1) {\n      return stackDest[index];\n    }\n\n    if (isWindow(source) || isScope(source)) {\n      throw ngMinErr('cpws',\n        \"Can't copy! Making copies of Window or Scope instances is not supported.\");\n    }\n\n    var needsRecurse = false;\n    var destination = copyType(source);\n//创建数组或对象实例--destination\n    if (destination === undefined) {\n      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));\n      needsRecurse = true;\n    }\n\n    stackSource.push(source);\n    stackDest.push(destination);\n\n    return needsRecurse\n      ? copyRecurse(source, destination)\n      : destination;\n  }\n\n  function copyType(source) {\n    switch (toString.call(source)) {\n      case '[object Int8Array]':\n      case '[object Int16Array]':\n      case '[object Int32Array]':\n      case '[object Float32Array]':\n      case '[object Float64Array]':\n      case '[object Uint8Array]':\n      case '[object Uint8ClampedArray]':\n      case '[object Uint16Array]':\n      case '[object Uint32Array]':\n        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);\n\n      case '[object ArrayBuffer]':\n        //Support: IE10\n        if (!source.slice) {\n          var copied = new ArrayBuffer(source.byteLength);\n          new Uint8Array(copied).set(new Uint8Array(source));\n          return copied;\n        }\n        return source.slice(0);\n\n      case '[object Boolean]':\n      case '[object Number]':\n      case '[object String]':\n      case '[object Date]':\n        return new source.constructor(source.valueOf());\n\n      case '[object RegExp]':\n        var re = new RegExp(source.source, source.toString().match(/[^\\/]*$/)[0]);\n        re.lastIndex = source.lastIndex;\n        return re;\n\n      case '[object Blob]':\n        return new source.constructor([source], {type: source.type});\n    }\n\n    if (isFunction(source.cloneNode)) {\n      return source.cloneNode(true);\n    }\n  }\n}\n```\n源码中，copy()方法接收两个参数，第一个是源source，是一个对象或者数组，第二个参数destination可选，作为存储源source的对象，该方法返回一个和源source一样的对象，且该对象是新建的实例，使用时与源source不会相互影响。\n","slug":"angular-copy","published":1,"updated":"2017-11-14T11:10:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi10008mo0163p05sqt","content":"<h3 id=\"angular-copy-方法的定义\"><a href=\"#angular-copy-方法的定义\" class=\"headerlink\" title=\"angular.copy()方法的定义\"></a>angular.copy()方法的定义</h3><p>angular.copy()方法实现对象属性的深度拷贝，返回一个新创建的对象。</p>\n<h3 id=\"用法实例\"><a href=\"#用法实例\" class=\"headerlink\" title=\"用法实例\"></a>用法实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'lucy'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b = angular.copy(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a='</span>,a);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"lucy\", age: 20&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b='</span>,b);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"lucy\", age: 20&#125;</span></div></pre></td></tr></table></figure>\n<p>当我们改变a对象的属性，b对象属性并不会随之改变：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.name = <span class=\"string\">'angular'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a='</span>,a);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"angular\", age: 20&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b='</span>,b);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"lucy\", age: 20&#125;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"angular-copy-源码\"><a href=\"#angular-copy-源码\" class=\"headerlink\" title=\"angular.copy()源码\"></a>angular.copy()源码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @ngdoc function</div><div class=\"line\"> * @name angular.copy</div><div class=\"line\"> * @module ng</div><div class=\"line\"> * @kind function</div><div class=\"line\"> *</div><div class=\"line\"> * @description</div><div class=\"line\"> * Creates a deep copy of `source`, which should be an object or an array.</div><div class=\"line\"> *</div><div class=\"line\"> * * If no destination is supplied, a copy of the object or array is created.</div><div class=\"line\"> * * If a destination is provided, all of its elements (for arrays) or properties (for objects)</div><div class=\"line\"> *   are deleted and then all elements/properties from the source are copied to it.</div><div class=\"line\"> * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.</div><div class=\"line\"> * * If `source` is identical to `destination` an exception will be thrown.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;br /&gt;</div><div class=\"line\"> * &lt;div class=\"alert alert-warning\"&gt;</div><div class=\"line\"> *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`</div><div class=\"line\"> *   and on `destination`) will be ignored.</div><div class=\"line\"> * &lt;/div&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;*&#125; source The source that will be used to make a copy.</div><div class=\"line\"> *                   Can be any type, including primitives, `null`, and `undefined`.</div><div class=\"line\"> * @param &#123;(Object|Array)=&#125; destination Destination into which the source is copied. If</div><div class=\"line\"> *     provided, must be of the same type as `source`.</div><div class=\"line\"> * @returns &#123;*&#125; The copy or updated `destination`, if `destination` was specified.</div><div class=\"line\"> *</div><div class=\"line\"> * @example</div><div class=\"line\">  &lt;example module=\"copyExample\"&gt;</div><div class=\"line\">    &lt;file name=\"index.html\"&gt;</div><div class=\"line\">      &lt;div ng-controller=\"ExampleController\"&gt;</div><div class=\"line\">        &lt;form novalidate class=\"simple-form\"&gt;</div><div class=\"line\">          &lt;label&gt;Name: &lt;input type=\"text\" ng-model=\"user.name\" /&gt;&lt;/label&gt;&lt;br /&gt;</div><div class=\"line\">          &lt;label&gt;Age:  &lt;input type=\"number\" ng-model=\"user.age\" /&gt;&lt;/label&gt;&lt;br /&gt;</div><div class=\"line\">          Gender: &lt;label&gt;&lt;input type=\"radio\" ng-model=\"user.gender\" value=\"male\" /&gt;male&lt;/label&gt;</div><div class=\"line\">                  &lt;label&gt;&lt;input type=\"radio\" ng-model=\"user.gender\" value=\"female\" /&gt;female&lt;/label&gt;&lt;br /&gt;</div><div class=\"line\">          &lt;button ng-click=\"reset()\"&gt;RESET&lt;/button&gt;</div><div class=\"line\">          &lt;button ng-click=\"update(user)\"&gt;SAVE&lt;/button&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">        &lt;pre&gt;form = &#123;&#123;user | json&#125;&#125;&lt;/pre&gt;</div><div class=\"line\">        &lt;pre&gt;master = &#123;&#123;master | json&#125;&#125;&lt;/pre&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/file&gt;</div><div class=\"line\">    &lt;file name=\"script.js\"&gt;</div><div class=\"line\">      // Module: copyExample</div><div class=\"line\">      angular.</div><div class=\"line\">        module('copyExample', []).</div><div class=\"line\">        controller('ExampleController', ['$scope', function($scope) &#123;</div><div class=\"line\">          $scope.master = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">          $scope.reset = function() &#123;</div><div class=\"line\">            // Example with 1 argument</div><div class=\"line\">            $scope.user = angular.copy($scope.master);</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          $scope.update = function(user) &#123;</div><div class=\"line\">            // Example with 2 arguments</div><div class=\"line\">            angular.copy(user, $scope.master);</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          $scope.reset();</div><div class=\"line\">        &#125;]);</div><div class=\"line\">    &lt;/file&gt;</div><div class=\"line\">  &lt;/example&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">source, destination</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> stackSource = [];</div><div class=\"line\">  <span class=\"keyword\">var</span> stackDest = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (destination) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isTypedArray(destination) || isArrayBuffer(destination)) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> ngMinErr(<span class=\"string\">'cpta'</span>, <span class=\"string\">\"Can't copy! TypedArray destination cannot be mutated.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (source === destination) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> ngMinErr(<span class=\"string\">'cpi'</span>, <span class=\"string\">\"Can't copy! Source and destination are identical.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty the destination object</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isArray(destination)) &#123;</div><div class=\"line\">      destination.length = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      forEach(destination, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (key !== <span class=\"string\">'$$hashKey'</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">delete</span> destination[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    stackSource.push(source);</div><div class=\"line\">    stackDest.push(destination);</div><div class=\"line\">    <span class=\"keyword\">return</span> copyRecurse(source, destination);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> copyElement(source);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyRecurse</span>(<span class=\"params\">source, destination</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> h = destination.$$hashKey;</div><div class=\"line\">    <span class=\"keyword\">var</span> key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArray(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, ii = source.length; i &lt; ii; i++) &#123;</div><div class=\"line\">        destination.push(copyElement(source[i]));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isBlankObject(source)) &#123;</div><div class=\"line\">      <span class=\"comment\">// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        destination[key] = copyElement(source[key]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (source &amp;&amp; <span class=\"keyword\">typeof</span> source.hasOwnProperty === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Slow path, which must rely on hasOwnProperty</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) &#123;</div><div class=\"line\">          destination[key] = copyElement(source[key]);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Slowest path --- hasOwnProperty can't be called as a method</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (hasOwnProperty.call(source, key)) &#123;</div><div class=\"line\">          destination[key] = copyElement(source[key]);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setHashKey(destination, h);</div><div class=\"line\">    <span class=\"keyword\">return</span> destination;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">拷贝source的属性，并返回</div><div class=\"line\">*/</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyElement</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Simple values</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> source;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Already copied values</span></div><div class=\"line\">    <span class=\"keyword\">var</span> index = stackSource.indexOf(source);</div><div class=\"line\">    <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> stackDest[index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isWindow(source) || isScope(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> ngMinErr(<span class=\"string\">'cpws'</span>,</div><div class=\"line\">        <span class=\"string\">\"Can't copy! Making copies of Window or Scope instances is not supported.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> needsRecurse = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> destination = copyType(source);</div><div class=\"line\"><span class=\"comment\">//创建数组或对象实例--destination</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (destination === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      destination = isArray(source) ? [] : <span class=\"built_in\">Object</span>.create(getPrototypeOf(source));</div><div class=\"line\">      needsRecurse = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    stackSource.push(source);</div><div class=\"line\">    stackDest.push(destination);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> needsRecurse</div><div class=\"line\">      ? copyRecurse(source, destination)</div><div class=\"line\">      : destination;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyType</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (toString.call(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Int8Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Int16Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Int32Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Float32Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Float64Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint8Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint8ClampedArray]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint16Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint32Array]'</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> source.constructor(copyElement(source.buffer), source.byteOffset, source.length);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object ArrayBuffer]'</span>:</div><div class=\"line\">        <span class=\"comment\">//Support: IE10</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!source.slice) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> copied = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(source.byteLength);</div><div class=\"line\">          <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(copied).set(<span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(source));</div><div class=\"line\">          <span class=\"keyword\">return</span> copied;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> source.slice(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> source.constructor(source.valueOf());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</div><div class=\"line\">        <span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(source.source, source.toString().match(<span class=\"regexp\">/[^\\/]*$/</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">        re.lastIndex = source.lastIndex;</div><div class=\"line\">        <span class=\"keyword\">return</span> re;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Blob]'</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> source.constructor([source], &#123;<span class=\"attr\">type</span>: source.type&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isFunction(source.cloneNode)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> source.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>源码中，copy()方法接收两个参数，第一个是源source，是一个对象或者数组，第二个参数destination可选，作为存储源source的对象，该方法返回一个和源source一样的对象，且该对象是新建的实例，使用时与源source不会相互影响。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"angular-copy-方法的定义\"><a href=\"#angular-copy-方法的定义\" class=\"headerlink\" title=\"angular.copy()方法的定义\"></a>angular.copy()方法的定义</h3><p>angular.copy()方法实现对象属性的深度拷贝，返回一个新创建的对象。</p>\n<h3 id=\"用法实例\"><a href=\"#用法实例\" class=\"headerlink\" title=\"用法实例\"></a>用法实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'lucy'</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b = angular.copy(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a='</span>,a);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"lucy\", age: 20&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b='</span>,b);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"lucy\", age: 20&#125;</span></div></pre></td></tr></table></figure>\n<p>当我们改变a对象的属性，b对象属性并不会随之改变：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.name = <span class=\"string\">'angular'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a='</span>,a);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"angular\", age: 20&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b='</span>,b);</div><div class=\"line\"><span class=\"comment\">//&#123;name: \"lucy\", age: 20&#125;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"angular-copy-源码\"><a href=\"#angular-copy-源码\" class=\"headerlink\" title=\"angular.copy()源码\"></a>angular.copy()源码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @ngdoc function</div><div class=\"line\"> * @name angular.copy</div><div class=\"line\"> * @module ng</div><div class=\"line\"> * @kind function</div><div class=\"line\"> *</div><div class=\"line\"> * @description</div><div class=\"line\"> * Creates a deep copy of `source`, which should be an object or an array.</div><div class=\"line\"> *</div><div class=\"line\"> * * If no destination is supplied, a copy of the object or array is created.</div><div class=\"line\"> * * If a destination is provided, all of its elements (for arrays) or properties (for objects)</div><div class=\"line\"> *   are deleted and then all elements/properties from the source are copied to it.</div><div class=\"line\"> * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.</div><div class=\"line\"> * * If `source` is identical to `destination` an exception will be thrown.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;br /&gt;</div><div class=\"line\"> * &lt;div class=\"alert alert-warning\"&gt;</div><div class=\"line\"> *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`</div><div class=\"line\"> *   and on `destination`) will be ignored.</div><div class=\"line\"> * &lt;/div&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;*&#125; source The source that will be used to make a copy.</div><div class=\"line\"> *                   Can be any type, including primitives, `null`, and `undefined`.</div><div class=\"line\"> * @param &#123;(Object|Array)=&#125; destination Destination into which the source is copied. If</div><div class=\"line\"> *     provided, must be of the same type as `source`.</div><div class=\"line\"> * @returns &#123;*&#125; The copy or updated `destination`, if `destination` was specified.</div><div class=\"line\"> *</div><div class=\"line\"> * @example</div><div class=\"line\">  &lt;example module=\"copyExample\"&gt;</div><div class=\"line\">    &lt;file name=\"index.html\"&gt;</div><div class=\"line\">      &lt;div ng-controller=\"ExampleController\"&gt;</div><div class=\"line\">        &lt;form novalidate class=\"simple-form\"&gt;</div><div class=\"line\">          &lt;label&gt;Name: &lt;input type=\"text\" ng-model=\"user.name\" /&gt;&lt;/label&gt;&lt;br /&gt;</div><div class=\"line\">          &lt;label&gt;Age:  &lt;input type=\"number\" ng-model=\"user.age\" /&gt;&lt;/label&gt;&lt;br /&gt;</div><div class=\"line\">          Gender: &lt;label&gt;&lt;input type=\"radio\" ng-model=\"user.gender\" value=\"male\" /&gt;male&lt;/label&gt;</div><div class=\"line\">                  &lt;label&gt;&lt;input type=\"radio\" ng-model=\"user.gender\" value=\"female\" /&gt;female&lt;/label&gt;&lt;br /&gt;</div><div class=\"line\">          &lt;button ng-click=\"reset()\"&gt;RESET&lt;/button&gt;</div><div class=\"line\">          &lt;button ng-click=\"update(user)\"&gt;SAVE&lt;/button&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">        &lt;pre&gt;form = &#123;&#123;user | json&#125;&#125;&lt;/pre&gt;</div><div class=\"line\">        &lt;pre&gt;master = &#123;&#123;master | json&#125;&#125;&lt;/pre&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/file&gt;</div><div class=\"line\">    &lt;file name=\"script.js\"&gt;</div><div class=\"line\">      // Module: copyExample</div><div class=\"line\">      angular.</div><div class=\"line\">        module('copyExample', []).</div><div class=\"line\">        controller('ExampleController', ['$scope', function($scope) &#123;</div><div class=\"line\">          $scope.master = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">          $scope.reset = function() &#123;</div><div class=\"line\">            // Example with 1 argument</div><div class=\"line\">            $scope.user = angular.copy($scope.master);</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          $scope.update = function(user) &#123;</div><div class=\"line\">            // Example with 2 arguments</div><div class=\"line\">            angular.copy(user, $scope.master);</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          $scope.reset();</div><div class=\"line\">        &#125;]);</div><div class=\"line\">    &lt;/file&gt;</div><div class=\"line\">  &lt;/example&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">source, destination</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> stackSource = [];</div><div class=\"line\">  <span class=\"keyword\">var</span> stackDest = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (destination) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isTypedArray(destination) || isArrayBuffer(destination)) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> ngMinErr(<span class=\"string\">'cpta'</span>, <span class=\"string\">\"Can't copy! TypedArray destination cannot be mutated.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (source === destination) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> ngMinErr(<span class=\"string\">'cpi'</span>, <span class=\"string\">\"Can't copy! Source and destination are identical.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty the destination object</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isArray(destination)) &#123;</div><div class=\"line\">      destination.length = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      forEach(destination, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (key !== <span class=\"string\">'$$hashKey'</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">delete</span> destination[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    stackSource.push(source);</div><div class=\"line\">    stackDest.push(destination);</div><div class=\"line\">    <span class=\"keyword\">return</span> copyRecurse(source, destination);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> copyElement(source);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyRecurse</span>(<span class=\"params\">source, destination</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> h = destination.$$hashKey;</div><div class=\"line\">    <span class=\"keyword\">var</span> key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArray(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, ii = source.length; i &lt; ii; i++) &#123;</div><div class=\"line\">        destination.push(copyElement(source[i]));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isBlankObject(source)) &#123;</div><div class=\"line\">      <span class=\"comment\">// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        destination[key] = copyElement(source[key]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (source &amp;&amp; <span class=\"keyword\">typeof</span> source.hasOwnProperty === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Slow path, which must rely on hasOwnProperty</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) &#123;</div><div class=\"line\">          destination[key] = copyElement(source[key]);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Slowest path --- hasOwnProperty can't be called as a method</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (hasOwnProperty.call(source, key)) &#123;</div><div class=\"line\">          destination[key] = copyElement(source[key]);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setHashKey(destination, h);</div><div class=\"line\">    <span class=\"keyword\">return</span> destination;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">拷贝source的属性，并返回</div><div class=\"line\">*/</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyElement</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Simple values</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!isObject(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> source;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Already copied values</span></div><div class=\"line\">    <span class=\"keyword\">var</span> index = stackSource.indexOf(source);</div><div class=\"line\">    <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> stackDest[index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isWindow(source) || isScope(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> ngMinErr(<span class=\"string\">'cpws'</span>,</div><div class=\"line\">        <span class=\"string\">\"Can't copy! Making copies of Window or Scope instances is not supported.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> needsRecurse = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> destination = copyType(source);</div><div class=\"line\"><span class=\"comment\">//创建数组或对象实例--destination</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (destination === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">      destination = isArray(source) ? [] : <span class=\"built_in\">Object</span>.create(getPrototypeOf(source));</div><div class=\"line\">      needsRecurse = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    stackSource.push(source);</div><div class=\"line\">    stackDest.push(destination);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> needsRecurse</div><div class=\"line\">      ? copyRecurse(source, destination)</div><div class=\"line\">      : destination;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyType</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (toString.call(source)) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Int8Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Int16Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Int32Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Float32Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Float64Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint8Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint8ClampedArray]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint16Array]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Uint32Array]'</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> source.constructor(copyElement(source.buffer), source.byteOffset, source.length);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object ArrayBuffer]'</span>:</div><div class=\"line\">        <span class=\"comment\">//Support: IE10</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!source.slice) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> copied = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(source.byteLength);</div><div class=\"line\">          <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(copied).set(<span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(source));</div><div class=\"line\">          <span class=\"keyword\">return</span> copied;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> source.slice(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> source.constructor(source.valueOf());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</div><div class=\"line\">        <span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(source.source, source.toString().match(<span class=\"regexp\">/[^\\/]*$/</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">        re.lastIndex = source.lastIndex;</div><div class=\"line\">        <span class=\"keyword\">return</span> re;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Blob]'</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> source.constructor([source], &#123;<span class=\"attr\">type</span>: source.type&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isFunction(source.cloneNode)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> source.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>源码中，copy()方法接收两个参数，第一个是源source，是一个对象或者数组，第二个参数destination可选，作为存储源source的对象，该方法返回一个和源source一样的对象，且该对象是新建的实例，使用时与源source不会相互影响。</p>\n"},{"title":"angular-file-upload","date":"2017-08-14T10:14:25.000Z","_content":"\n背景\n----\n今天做项目遇到文件上传问题，于是找到了一个很强大的文件上传插件angular-file-upload,便做了下使用总结，方便给为老铁查阅啊。  \n\n安装\n----\n\n    npm install --save-dev angularFileUpload  \n\n使用\n----\ndemo1:多文件上传-html文件：\n\n\n    <input type=\"file\" id=\"file\" name=\"file\" nv-file-select uploader=\"uploader\" ng-click=\"clearItems()\" multiple> 上传\n\n更酷的界面效果可以这样用，在htm文件加入官网的例子：\n\n    <div class=\"col-md-9\" style=\"margin-bottom: 40px\">\n                <h2>Uploads only images (with canvas preview)</h2>\n                <h3>The queue</h3>\n                <p>Queue length: {{ uploader.queue.length }}</p>\n\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th width=\"50%\">Name</th>\n                            <th ng-show=\"uploader.isHTML5\">Size</th>\n                            <th ng-show=\"uploader.isHTML5\">Progress</th>\n                            <th>Status</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"item in uploader.queue\">\n                            <td>\n                                <strong>{{ item.file.name }}</strong>\n                                <!-- Image preview -->\n                                <!--auto height-->\n                                <!--<div ng-thumb=\"{ file: item.file, width: 100 }\"></div>-->\n                                <!--auto width-->\n                                <div ng-show=\"uploader.isHTML5\" ng-thumb=\"{ file: item._file, height: 100 }\"></div>\n                                <!--fixed width and height -->\n                                <!--<div ng-thumb=\"{ file: item.file, width: 100, height: 100 }\"></div>-->\n                            </td>\n                            <td ng-show=\"uploader.isHTML5\" nowrap>{{ item.file.size/1024/1024|number:2 }} MB</td>\n                            <td ng-show=\"uploader.isHTML5\">\n                                <div class=\"progress\" style=\"margin-bottom: 0;\">\n                                    <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': item.progress + '%' }\"></div>\n                                </div>\n                            </td>\n                            <td class=\"text-center\">\n                                <span ng-show=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\n                                <span ng-show=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\n                                <span ng-show=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\n                            </td>\n                            <td nowrap>\n                                <button type=\"button\" class=\"btn btn-success btn-xs\" ng-click=\"item.upload()\" ng-disabled=\"item.isReady || item.isUploading || item.isSuccess\">\n                                    <span class=\"glyphicon glyphicon-upload\"></span> Upload\n                                </button>\n                                <button type=\"button\" class=\"btn btn-warning btn-xs\" ng-click=\"item.cancel()\" ng-disabled=\"!item.isUploading\">\n                                    <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\n                                </button>\n                                <button type=\"button\" class=\"btn btn-danger btn-xs\" ng-click=\"item.remove()\">\n                                    <span class=\"glyphicon glyphicon-trash\"></span> Remove\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <div>\n                    <div>\n                        Queue progress:\n                        <div class=\"progress\" style=\"\">\n                            <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': uploader.progress + '%' }\"></div>\n                        </div>\n                    </div>\n                    <button type=\"button\" class=\"btn btn-success btn-s\" ng-click=\"uploader.uploadAll()\" ng-disabled=\"!uploader.getNotUploadedItems().length\">\n                        <span class=\"glyphicon glyphicon-upload\"></span> Upload all\n                    </button>\n                    <button type=\"button\" class=\"btn btn-warning btn-s\" ng-click=\"uploader.cancelAll()\" ng-disabled=\"!uploader.isUploading\">\n                        <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\n                    </button>\n                    <button type=\"button\" class=\"btn btn-danger btn-s\" ng-click=\"uploader.clearQueue()\" ng-disabled=\"!uploader.queue.length\">\n                        <span class=\"glyphicon glyphicon-trash\"></span> Remove all\n                    </button>\n                </div>\n\n            </div>\n\n        </div>\n\n\n\n在项目中引入依赖：\n\n    import angularFileUpload from 'angular-file-upload';\n\n    var app = angular\n        .module('app',[\n          'angularFileUpload'\n        ])\n        .controller('myController',['FileUploader'],controller);\n\n    function controller(FileUploader) {\n        var uploader = $scope.uploader = new FileUploader({\n            url: 'api/portName',\n            queueAfterUpload: 1,   //文件个数\n            removeAfterUpload: true  //上传后删除文件\n        });\n\n        $scope.clearItems = function(){ //重新选择文件时，清空队列，达到覆盖文件的效果\n            uploader.clearQueue();\n        };\n\n        //FILTERS\n        uploader.filters.push({\n            name: 'imageFilter',\n            fn: function(item /*{File|FileLikeObject}*/,options) {\n                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';\n                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !==-1;\n            }\n        });\n\n        //CALLBACKS\n        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {\n            alert('只支持图片上传！');\n        };\n        uploader.onAfterAddingFile = function(fileItem) {\n            console.info('onAfterAddingFile',fileItem);\n            $scope.fileItem = fileItem._file;   //添加文件之后，把文件信息赋给scope\n            //在这里可以判断添加的文件名后缀，文件大小限制\n            if($scope.fileItem.size > MaxSize) {\n                alert('文件大小超限!');\n                uploader.removeFromQueue(fileItem);//超过大小移出队列\n            }else {\n                uploader.uploadAll();\n            }\n\n        };\n        uploader.onAfterAddingAll = function(addedFileItems) {\n            console.info('onAfterAddingAll', addedFileItems);\n        };\n        uploader.onBeforeUploadItem = function(item) {\n            console.info('onBeforeUploadItem', item);\n        };\n        uploader.onProgressItem = function(fileItem, progress) {\n            console.info('onProgressItem', fileItem, progress);\n        };\n        uploader.onProgressAll = function(progress) {\n            console.info('onProgressAll', progress);\n        };\n        uploader.onSuccessItem = function(fileItem, response, status, headers) {\n            console.info('onSuccessItem', fileItem, response, status, headers);\n            //判断是否上传成功\n            if(response.status == 1) {\n                alert('上传成功！')\n            }\n        };\n        uploader.onErrorItem = function(fileItem, response, status, headers) {\n            console.info('onErrorItem', fileItem, response, status, headers);\n        };\n        uploader.onCancelItem = function(fileItem, response, status, headers) {\n            console.info('onCancelItem', fileItem, response, status, headers);\n        };\n        uploader.onCompleteItem = function(fileItem, response, status, headers) {\n            console.info('onCompleteItem', fileItem, response, status, headers);\n        };\n        uploader.onCompleteAll = function() {\n            console.info('onCompleteAll');\n        };\n    }\n\ndemo2:过滤器的使用\n例子中过滤|doc|docx|jpg|png|pdf|多种文件格式。\nhtml:\n\n    <input type=\"file\" id=\"file\" name=\"file\" nv-file-select uploader=\"uploader\" ng-click=\"clearItems()\" filters=\"nameFilter\"> 上传\n\ncontroller.js:\n\n    // FILTERS\n    uploader.filters.push({\n        name: 'nameFilter',\n        fn: function(item /*{File|FileLikeObject}*/, options) {\n            var type = '|' + item.name.slice(item.name.lastIndexOf('.') + 1) + '|';\n            return '|doc|docx|jpg|png|pdf|'.indexOf(type) !== -1;\n        }\n    });\n\n多个过滤器使用\nhtml:\n\n    <input type=\"file\" id=\"file\" name=\"file\" nv-file-select uploader=\"uploader\" ng-click=\"clearItems()\" filters=\"filtername1,filtername2\"> 上传\n\n    // FILTERS\n    uploader.filters.push({\n        name: 'filtername1',\n        fn: function(item /*{File|FileLikeObject}*/, options) {\n            ...\n        }\n    },{\n        name: 'filtername2',\n        fn: function(item /*{File|FileLikeObject}*/, options) {\n            ...\n        }\n    });\n\n注意：filtername1和filtername2两个过滤器之间是逻辑与关系（即&&），所以使用的时候避免出现逻辑或。做项目写了个坑，filtername1过滤器校验图片，filtername2校验word，html使用filters=\"filtername1,filtername2\"就出现图片和word都不允许上传问题。解决方法是用\n\n    item.name.slice(item.name.lastIndexOf('/') + 1) + '|';\n    return '|doc|docx|jpg|png|pdf|'.indexOf(type) !== -1;\n\n小结：angular-file-uplo插件支持多文件上传，限制文件大小，将文件上传用队列queue管理，有很多API可供调用，完成业务逻辑需求，如果浏览器支持H5的话，界面效果也很酷，可以增加进度条展示等等。\n","source":"_posts/angular-file-upload.md","raw":"---\ntitle: angular-file-upload\ndate: 2017-08-14 18:14:25\ntags:\n---\n\n背景\n----\n今天做项目遇到文件上传问题，于是找到了一个很强大的文件上传插件angular-file-upload,便做了下使用总结，方便给为老铁查阅啊。  \n\n安装\n----\n\n    npm install --save-dev angularFileUpload  \n\n使用\n----\ndemo1:多文件上传-html文件：\n\n\n    <input type=\"file\" id=\"file\" name=\"file\" nv-file-select uploader=\"uploader\" ng-click=\"clearItems()\" multiple> 上传\n\n更酷的界面效果可以这样用，在htm文件加入官网的例子：\n\n    <div class=\"col-md-9\" style=\"margin-bottom: 40px\">\n                <h2>Uploads only images (with canvas preview)</h2>\n                <h3>The queue</h3>\n                <p>Queue length: {{ uploader.queue.length }}</p>\n\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th width=\"50%\">Name</th>\n                            <th ng-show=\"uploader.isHTML5\">Size</th>\n                            <th ng-show=\"uploader.isHTML5\">Progress</th>\n                            <th>Status</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"item in uploader.queue\">\n                            <td>\n                                <strong>{{ item.file.name }}</strong>\n                                <!-- Image preview -->\n                                <!--auto height-->\n                                <!--<div ng-thumb=\"{ file: item.file, width: 100 }\"></div>-->\n                                <!--auto width-->\n                                <div ng-show=\"uploader.isHTML5\" ng-thumb=\"{ file: item._file, height: 100 }\"></div>\n                                <!--fixed width and height -->\n                                <!--<div ng-thumb=\"{ file: item.file, width: 100, height: 100 }\"></div>-->\n                            </td>\n                            <td ng-show=\"uploader.isHTML5\" nowrap>{{ item.file.size/1024/1024|number:2 }} MB</td>\n                            <td ng-show=\"uploader.isHTML5\">\n                                <div class=\"progress\" style=\"margin-bottom: 0;\">\n                                    <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': item.progress + '%' }\"></div>\n                                </div>\n                            </td>\n                            <td class=\"text-center\">\n                                <span ng-show=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\n                                <span ng-show=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\n                                <span ng-show=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\n                            </td>\n                            <td nowrap>\n                                <button type=\"button\" class=\"btn btn-success btn-xs\" ng-click=\"item.upload()\" ng-disabled=\"item.isReady || item.isUploading || item.isSuccess\">\n                                    <span class=\"glyphicon glyphicon-upload\"></span> Upload\n                                </button>\n                                <button type=\"button\" class=\"btn btn-warning btn-xs\" ng-click=\"item.cancel()\" ng-disabled=\"!item.isUploading\">\n                                    <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\n                                </button>\n                                <button type=\"button\" class=\"btn btn-danger btn-xs\" ng-click=\"item.remove()\">\n                                    <span class=\"glyphicon glyphicon-trash\"></span> Remove\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <div>\n                    <div>\n                        Queue progress:\n                        <div class=\"progress\" style=\"\">\n                            <div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ 'width': uploader.progress + '%' }\"></div>\n                        </div>\n                    </div>\n                    <button type=\"button\" class=\"btn btn-success btn-s\" ng-click=\"uploader.uploadAll()\" ng-disabled=\"!uploader.getNotUploadedItems().length\">\n                        <span class=\"glyphicon glyphicon-upload\"></span> Upload all\n                    </button>\n                    <button type=\"button\" class=\"btn btn-warning btn-s\" ng-click=\"uploader.cancelAll()\" ng-disabled=\"!uploader.isUploading\">\n                        <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\n                    </button>\n                    <button type=\"button\" class=\"btn btn-danger btn-s\" ng-click=\"uploader.clearQueue()\" ng-disabled=\"!uploader.queue.length\">\n                        <span class=\"glyphicon glyphicon-trash\"></span> Remove all\n                    </button>\n                </div>\n\n            </div>\n\n        </div>\n\n\n\n在项目中引入依赖：\n\n    import angularFileUpload from 'angular-file-upload';\n\n    var app = angular\n        .module('app',[\n          'angularFileUpload'\n        ])\n        .controller('myController',['FileUploader'],controller);\n\n    function controller(FileUploader) {\n        var uploader = $scope.uploader = new FileUploader({\n            url: 'api/portName',\n            queueAfterUpload: 1,   //文件个数\n            removeAfterUpload: true  //上传后删除文件\n        });\n\n        $scope.clearItems = function(){ //重新选择文件时，清空队列，达到覆盖文件的效果\n            uploader.clearQueue();\n        };\n\n        //FILTERS\n        uploader.filters.push({\n            name: 'imageFilter',\n            fn: function(item /*{File|FileLikeObject}*/,options) {\n                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';\n                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !==-1;\n            }\n        });\n\n        //CALLBACKS\n        uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {\n            alert('只支持图片上传！');\n        };\n        uploader.onAfterAddingFile = function(fileItem) {\n            console.info('onAfterAddingFile',fileItem);\n            $scope.fileItem = fileItem._file;   //添加文件之后，把文件信息赋给scope\n            //在这里可以判断添加的文件名后缀，文件大小限制\n            if($scope.fileItem.size > MaxSize) {\n                alert('文件大小超限!');\n                uploader.removeFromQueue(fileItem);//超过大小移出队列\n            }else {\n                uploader.uploadAll();\n            }\n\n        };\n        uploader.onAfterAddingAll = function(addedFileItems) {\n            console.info('onAfterAddingAll', addedFileItems);\n        };\n        uploader.onBeforeUploadItem = function(item) {\n            console.info('onBeforeUploadItem', item);\n        };\n        uploader.onProgressItem = function(fileItem, progress) {\n            console.info('onProgressItem', fileItem, progress);\n        };\n        uploader.onProgressAll = function(progress) {\n            console.info('onProgressAll', progress);\n        };\n        uploader.onSuccessItem = function(fileItem, response, status, headers) {\n            console.info('onSuccessItem', fileItem, response, status, headers);\n            //判断是否上传成功\n            if(response.status == 1) {\n                alert('上传成功！')\n            }\n        };\n        uploader.onErrorItem = function(fileItem, response, status, headers) {\n            console.info('onErrorItem', fileItem, response, status, headers);\n        };\n        uploader.onCancelItem = function(fileItem, response, status, headers) {\n            console.info('onCancelItem', fileItem, response, status, headers);\n        };\n        uploader.onCompleteItem = function(fileItem, response, status, headers) {\n            console.info('onCompleteItem', fileItem, response, status, headers);\n        };\n        uploader.onCompleteAll = function() {\n            console.info('onCompleteAll');\n        };\n    }\n\ndemo2:过滤器的使用\n例子中过滤|doc|docx|jpg|png|pdf|多种文件格式。\nhtml:\n\n    <input type=\"file\" id=\"file\" name=\"file\" nv-file-select uploader=\"uploader\" ng-click=\"clearItems()\" filters=\"nameFilter\"> 上传\n\ncontroller.js:\n\n    // FILTERS\n    uploader.filters.push({\n        name: 'nameFilter',\n        fn: function(item /*{File|FileLikeObject}*/, options) {\n            var type = '|' + item.name.slice(item.name.lastIndexOf('.') + 1) + '|';\n            return '|doc|docx|jpg|png|pdf|'.indexOf(type) !== -1;\n        }\n    });\n\n多个过滤器使用\nhtml:\n\n    <input type=\"file\" id=\"file\" name=\"file\" nv-file-select uploader=\"uploader\" ng-click=\"clearItems()\" filters=\"filtername1,filtername2\"> 上传\n\n    // FILTERS\n    uploader.filters.push({\n        name: 'filtername1',\n        fn: function(item /*{File|FileLikeObject}*/, options) {\n            ...\n        }\n    },{\n        name: 'filtername2',\n        fn: function(item /*{File|FileLikeObject}*/, options) {\n            ...\n        }\n    });\n\n注意：filtername1和filtername2两个过滤器之间是逻辑与关系（即&&），所以使用的时候避免出现逻辑或。做项目写了个坑，filtername1过滤器校验图片，filtername2校验word，html使用filters=\"filtername1,filtername2\"就出现图片和word都不允许上传问题。解决方法是用\n\n    item.name.slice(item.name.lastIndexOf('/') + 1) + '|';\n    return '|doc|docx|jpg|png|pdf|'.indexOf(type) !== -1;\n\n小结：angular-file-uplo插件支持多文件上传，限制文件大小，将文件上传用队列queue管理，有很多API可供调用，完成业务逻辑需求，如果浏览器支持H5的话，界面效果也很酷，可以增加进度条展示等等。\n","slug":"angular-file-upload","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi20009mo01i68eysz1","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>今天做项目遇到文件上传问题，于是找到了一个很强大的文件上传插件angular-file-upload,便做了下使用总结，方便给为老铁查阅啊。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev angularFileUpload  \n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>demo1:多文件上传-html文件：</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; nv-file-select uploader=&quot;uploader&quot; ng-click=&quot;clearItems()&quot; multiple&gt; 上传\n</code></pre><p>更酷的界面效果可以这样用，在htm文件加入官网的例子：</p>\n<pre><code>&lt;div class=&quot;col-md-9&quot; style=&quot;margin-bottom: 40px&quot;&gt;\n            &lt;h2&gt;Uploads only images (with canvas preview)&lt;/h2&gt;\n            &lt;h3&gt;The queue&lt;/h3&gt;\n            &lt;p&gt;Queue length: {{ uploader.queue.length }}&lt;/p&gt;\n\n            &lt;table class=&quot;table&quot;&gt;\n                &lt;thead&gt;\n                    &lt;tr&gt;\n                        &lt;th width=&quot;50%&quot;&gt;Name&lt;/th&gt;\n                        &lt;th ng-show=&quot;uploader.isHTML5&quot;&gt;Size&lt;/th&gt;\n                        &lt;th ng-show=&quot;uploader.isHTML5&quot;&gt;Progress&lt;/th&gt;\n                        &lt;th&gt;Status&lt;/th&gt;\n                        &lt;th&gt;Actions&lt;/th&gt;\n                    &lt;/tr&gt;\n                &lt;/thead&gt;\n                &lt;tbody&gt;\n                    &lt;tr ng-repeat=&quot;item in uploader.queue&quot;&gt;\n                        &lt;td&gt;\n                            &lt;strong&gt;{{ item.file.name }}&lt;/strong&gt;\n                            &lt;!-- Image preview --&gt;\n                            &lt;!--auto height--&gt;\n                            &lt;!--&lt;div ng-thumb=&quot;{ file: item.file, width: 100 }&quot;&gt;&lt;/div&gt;--&gt;\n                            &lt;!--auto width--&gt;\n                            &lt;div ng-show=&quot;uploader.isHTML5&quot; ng-thumb=&quot;{ file: item._file, height: 100 }&quot;&gt;&lt;/div&gt;\n                            &lt;!--fixed width and height --&gt;\n                            &lt;!--&lt;div ng-thumb=&quot;{ file: item.file, width: 100, height: 100 }&quot;&gt;&lt;/div&gt;--&gt;\n                        &lt;/td&gt;\n                        &lt;td ng-show=&quot;uploader.isHTML5&quot; nowrap&gt;{{ item.file.size/1024/1024|number:2 }} MB&lt;/td&gt;\n                        &lt;td ng-show=&quot;uploader.isHTML5&quot;&gt;\n                            &lt;div class=&quot;progress&quot; style=&quot;margin-bottom: 0;&quot;&gt;\n                                &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; ng-style=&quot;{ &apos;width&apos;: item.progress + &apos;%&apos; }&quot;&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/td&gt;\n                        &lt;td class=&quot;text-center&quot;&gt;\n                            &lt;span ng-show=&quot;item.isSuccess&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-ok&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n                            &lt;span ng-show=&quot;item.isCancel&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n                            &lt;span ng-show=&quot;item.isError&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n                        &lt;/td&gt;\n                        &lt;td nowrap&gt;\n                            &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-xs&quot; ng-click=&quot;item.upload()&quot; ng-disabled=&quot;item.isReady || item.isUploading || item.isSuccess&quot;&gt;\n                                &lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; Upload\n                            &lt;/button&gt;\n                            &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-xs&quot; ng-click=&quot;item.cancel()&quot; ng-disabled=&quot;!item.isUploading&quot;&gt;\n                                &lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; Cancel\n                            &lt;/button&gt;\n                            &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-xs&quot; ng-click=&quot;item.remove()&quot;&gt;\n                                &lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; Remove\n                            &lt;/button&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n\n            &lt;div&gt;\n                &lt;div&gt;\n                    Queue progress:\n                    &lt;div class=&quot;progress&quot; style=&quot;&quot;&gt;\n                        &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; ng-style=&quot;{ &apos;width&apos;: uploader.progress + &apos;%&apos; }&quot;&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-s&quot; ng-click=&quot;uploader.uploadAll()&quot; ng-disabled=&quot;!uploader.getNotUploadedItems().length&quot;&gt;\n                    &lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; Upload all\n                &lt;/button&gt;\n                &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-s&quot; ng-click=&quot;uploader.cancelAll()&quot; ng-disabled=&quot;!uploader.isUploading&quot;&gt;\n                    &lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; Cancel all\n                &lt;/button&gt;\n                &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-s&quot; ng-click=&quot;uploader.clearQueue()&quot; ng-disabled=&quot;!uploader.queue.length&quot;&gt;\n                    &lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; Remove all\n                &lt;/button&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n</code></pre><p>在项目中引入依赖：</p>\n<pre><code>import angularFileUpload from &apos;angular-file-upload&apos;;\n\nvar app = angular\n    .module(&apos;app&apos;,[\n      &apos;angularFileUpload&apos;\n    ])\n    .controller(&apos;myController&apos;,[&apos;FileUploader&apos;],controller);\n\nfunction controller(FileUploader) {\n    var uploader = $scope.uploader = new FileUploader({\n        url: &apos;api/portName&apos;,\n        queueAfterUpload: 1,   //文件个数\n        removeAfterUpload: true  //上传后删除文件\n    });\n\n    $scope.clearItems = function(){ //重新选择文件时，清空队列，达到覆盖文件的效果\n        uploader.clearQueue();\n    };\n\n    //FILTERS\n    uploader.filters.push({\n        name: &apos;imageFilter&apos;,\n        fn: function(item /*{File|FileLikeObject}*/,options) {\n            var type = &apos;|&apos; + item.type.slice(item.type.lastIndexOf(&apos;/&apos;) + 1) + &apos;|&apos;;\n            return &apos;|jpg|png|jpeg|bmp|gif|&apos;.indexOf(type) !==-1;\n        }\n    });\n\n    //CALLBACKS\n    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {\n        alert(&apos;只支持图片上传！&apos;);\n    };\n    uploader.onAfterAddingFile = function(fileItem) {\n        console.info(&apos;onAfterAddingFile&apos;,fileItem);\n        $scope.fileItem = fileItem._file;   //添加文件之后，把文件信息赋给scope\n        //在这里可以判断添加的文件名后缀，文件大小限制\n        if($scope.fileItem.size &gt; MaxSize) {\n            alert(&apos;文件大小超限!&apos;);\n            uploader.removeFromQueue(fileItem);//超过大小移出队列\n        }else {\n            uploader.uploadAll();\n        }\n\n    };\n    uploader.onAfterAddingAll = function(addedFileItems) {\n        console.info(&apos;onAfterAddingAll&apos;, addedFileItems);\n    };\n    uploader.onBeforeUploadItem = function(item) {\n        console.info(&apos;onBeforeUploadItem&apos;, item);\n    };\n    uploader.onProgressItem = function(fileItem, progress) {\n        console.info(&apos;onProgressItem&apos;, fileItem, progress);\n    };\n    uploader.onProgressAll = function(progress) {\n        console.info(&apos;onProgressAll&apos;, progress);\n    };\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onSuccessItem&apos;, fileItem, response, status, headers);\n        //判断是否上传成功\n        if(response.status == 1) {\n            alert(&apos;上传成功！&apos;)\n        }\n    };\n    uploader.onErrorItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onErrorItem&apos;, fileItem, response, status, headers);\n    };\n    uploader.onCancelItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onCancelItem&apos;, fileItem, response, status, headers);\n    };\n    uploader.onCompleteItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onCompleteItem&apos;, fileItem, response, status, headers);\n    };\n    uploader.onCompleteAll = function() {\n        console.info(&apos;onCompleteAll&apos;);\n    };\n}\n</code></pre><p>demo2:过滤器的使用<br>例子中过滤|doc|docx|jpg|png|pdf|多种文件格式。<br>html:</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; nv-file-select uploader=&quot;uploader&quot; ng-click=&quot;clearItems()&quot; filters=&quot;nameFilter&quot;&gt; 上传\n</code></pre><p>controller.js:</p>\n<pre><code>// FILTERS\nuploader.filters.push({\n    name: &apos;nameFilter&apos;,\n    fn: function(item /*{File|FileLikeObject}*/, options) {\n        var type = &apos;|&apos; + item.name.slice(item.name.lastIndexOf(&apos;.&apos;) + 1) + &apos;|&apos;;\n        return &apos;|doc|docx|jpg|png|pdf|&apos;.indexOf(type) !== -1;\n    }\n});\n</code></pre><p>多个过滤器使用<br>html:</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; nv-file-select uploader=&quot;uploader&quot; ng-click=&quot;clearItems()&quot; filters=&quot;filtername1,filtername2&quot;&gt; 上传\n\n// FILTERS\nuploader.filters.push({\n    name: &apos;filtername1&apos;,\n    fn: function(item /*{File|FileLikeObject}*/, options) {\n        ...\n    }\n},{\n    name: &apos;filtername2&apos;,\n    fn: function(item /*{File|FileLikeObject}*/, options) {\n        ...\n    }\n});\n</code></pre><p>注意：filtername1和filtername2两个过滤器之间是逻辑与关系（即&amp;&amp;），所以使用的时候避免出现逻辑或。做项目写了个坑，filtername1过滤器校验图片，filtername2校验word，html使用filters=”filtername1,filtername2”就出现图片和word都不允许上传问题。解决方法是用</p>\n<pre><code>item.name.slice(item.name.lastIndexOf(&apos;/&apos;) + 1) + &apos;|&apos;;\nreturn &apos;|doc|docx|jpg|png|pdf|&apos;.indexOf(type) !== -1;\n</code></pre><p>小结：angular-file-uplo插件支持多文件上传，限制文件大小，将文件上传用队列queue管理，有很多API可供调用，完成业务逻辑需求，如果浏览器支持H5的话，界面效果也很酷，可以增加进度条展示等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>今天做项目遇到文件上传问题，于是找到了一个很强大的文件上传插件angular-file-upload,便做了下使用总结，方便给为老铁查阅啊。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev angularFileUpload  \n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>demo1:多文件上传-html文件：</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; nv-file-select uploader=&quot;uploader&quot; ng-click=&quot;clearItems()&quot; multiple&gt; 上传\n</code></pre><p>更酷的界面效果可以这样用，在htm文件加入官网的例子：</p>\n<pre><code>&lt;div class=&quot;col-md-9&quot; style=&quot;margin-bottom: 40px&quot;&gt;\n            &lt;h2&gt;Uploads only images (with canvas preview)&lt;/h2&gt;\n            &lt;h3&gt;The queue&lt;/h3&gt;\n            &lt;p&gt;Queue length: {{ uploader.queue.length }}&lt;/p&gt;\n\n            &lt;table class=&quot;table&quot;&gt;\n                &lt;thead&gt;\n                    &lt;tr&gt;\n                        &lt;th width=&quot;50%&quot;&gt;Name&lt;/th&gt;\n                        &lt;th ng-show=&quot;uploader.isHTML5&quot;&gt;Size&lt;/th&gt;\n                        &lt;th ng-show=&quot;uploader.isHTML5&quot;&gt;Progress&lt;/th&gt;\n                        &lt;th&gt;Status&lt;/th&gt;\n                        &lt;th&gt;Actions&lt;/th&gt;\n                    &lt;/tr&gt;\n                &lt;/thead&gt;\n                &lt;tbody&gt;\n                    &lt;tr ng-repeat=&quot;item in uploader.queue&quot;&gt;\n                        &lt;td&gt;\n                            &lt;strong&gt;{{ item.file.name }}&lt;/strong&gt;\n                            &lt;!-- Image preview --&gt;\n                            &lt;!--auto height--&gt;\n                            &lt;!--&lt;div ng-thumb=&quot;{ file: item.file, width: 100 }&quot;&gt;&lt;/div&gt;--&gt;\n                            &lt;!--auto width--&gt;\n                            &lt;div ng-show=&quot;uploader.isHTML5&quot; ng-thumb=&quot;{ file: item._file, height: 100 }&quot;&gt;&lt;/div&gt;\n                            &lt;!--fixed width and height --&gt;\n                            &lt;!--&lt;div ng-thumb=&quot;{ file: item.file, width: 100, height: 100 }&quot;&gt;&lt;/div&gt;--&gt;\n                        &lt;/td&gt;\n                        &lt;td ng-show=&quot;uploader.isHTML5&quot; nowrap&gt;{{ item.file.size/1024/1024|number:2 }} MB&lt;/td&gt;\n                        &lt;td ng-show=&quot;uploader.isHTML5&quot;&gt;\n                            &lt;div class=&quot;progress&quot; style=&quot;margin-bottom: 0;&quot;&gt;\n                                &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; ng-style=&quot;{ &apos;width&apos;: item.progress + &apos;%&apos; }&quot;&gt;&lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/td&gt;\n                        &lt;td class=&quot;text-center&quot;&gt;\n                            &lt;span ng-show=&quot;item.isSuccess&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-ok&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n                            &lt;span ng-show=&quot;item.isCancel&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n                            &lt;span ng-show=&quot;item.isError&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n                        &lt;/td&gt;\n                        &lt;td nowrap&gt;\n                            &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-xs&quot; ng-click=&quot;item.upload()&quot; ng-disabled=&quot;item.isReady || item.isUploading || item.isSuccess&quot;&gt;\n                                &lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; Upload\n                            &lt;/button&gt;\n                            &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-xs&quot; ng-click=&quot;item.cancel()&quot; ng-disabled=&quot;!item.isUploading&quot;&gt;\n                                &lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; Cancel\n                            &lt;/button&gt;\n                            &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-xs&quot; ng-click=&quot;item.remove()&quot;&gt;\n                                &lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; Remove\n                            &lt;/button&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n\n            &lt;div&gt;\n                &lt;div&gt;\n                    Queue progress:\n                    &lt;div class=&quot;progress&quot; style=&quot;&quot;&gt;\n                        &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; ng-style=&quot;{ &apos;width&apos;: uploader.progress + &apos;%&apos; }&quot;&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-s&quot; ng-click=&quot;uploader.uploadAll()&quot; ng-disabled=&quot;!uploader.getNotUploadedItems().length&quot;&gt;\n                    &lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; Upload all\n                &lt;/button&gt;\n                &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-s&quot; ng-click=&quot;uploader.cancelAll()&quot; ng-disabled=&quot;!uploader.isUploading&quot;&gt;\n                    &lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; Cancel all\n                &lt;/button&gt;\n                &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-s&quot; ng-click=&quot;uploader.clearQueue()&quot; ng-disabled=&quot;!uploader.queue.length&quot;&gt;\n                    &lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; Remove all\n                &lt;/button&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n</code></pre><p>在项目中引入依赖：</p>\n<pre><code>import angularFileUpload from &apos;angular-file-upload&apos;;\n\nvar app = angular\n    .module(&apos;app&apos;,[\n      &apos;angularFileUpload&apos;\n    ])\n    .controller(&apos;myController&apos;,[&apos;FileUploader&apos;],controller);\n\nfunction controller(FileUploader) {\n    var uploader = $scope.uploader = new FileUploader({\n        url: &apos;api/portName&apos;,\n        queueAfterUpload: 1,   //文件个数\n        removeAfterUpload: true  //上传后删除文件\n    });\n\n    $scope.clearItems = function(){ //重新选择文件时，清空队列，达到覆盖文件的效果\n        uploader.clearQueue();\n    };\n\n    //FILTERS\n    uploader.filters.push({\n        name: &apos;imageFilter&apos;,\n        fn: function(item /*{File|FileLikeObject}*/,options) {\n            var type = &apos;|&apos; + item.type.slice(item.type.lastIndexOf(&apos;/&apos;) + 1) + &apos;|&apos;;\n            return &apos;|jpg|png|jpeg|bmp|gif|&apos;.indexOf(type) !==-1;\n        }\n    });\n\n    //CALLBACKS\n    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {\n        alert(&apos;只支持图片上传！&apos;);\n    };\n    uploader.onAfterAddingFile = function(fileItem) {\n        console.info(&apos;onAfterAddingFile&apos;,fileItem);\n        $scope.fileItem = fileItem._file;   //添加文件之后，把文件信息赋给scope\n        //在这里可以判断添加的文件名后缀，文件大小限制\n        if($scope.fileItem.size &gt; MaxSize) {\n            alert(&apos;文件大小超限!&apos;);\n            uploader.removeFromQueue(fileItem);//超过大小移出队列\n        }else {\n            uploader.uploadAll();\n        }\n\n    };\n    uploader.onAfterAddingAll = function(addedFileItems) {\n        console.info(&apos;onAfterAddingAll&apos;, addedFileItems);\n    };\n    uploader.onBeforeUploadItem = function(item) {\n        console.info(&apos;onBeforeUploadItem&apos;, item);\n    };\n    uploader.onProgressItem = function(fileItem, progress) {\n        console.info(&apos;onProgressItem&apos;, fileItem, progress);\n    };\n    uploader.onProgressAll = function(progress) {\n        console.info(&apos;onProgressAll&apos;, progress);\n    };\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onSuccessItem&apos;, fileItem, response, status, headers);\n        //判断是否上传成功\n        if(response.status == 1) {\n            alert(&apos;上传成功！&apos;)\n        }\n    };\n    uploader.onErrorItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onErrorItem&apos;, fileItem, response, status, headers);\n    };\n    uploader.onCancelItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onCancelItem&apos;, fileItem, response, status, headers);\n    };\n    uploader.onCompleteItem = function(fileItem, response, status, headers) {\n        console.info(&apos;onCompleteItem&apos;, fileItem, response, status, headers);\n    };\n    uploader.onCompleteAll = function() {\n        console.info(&apos;onCompleteAll&apos;);\n    };\n}\n</code></pre><p>demo2:过滤器的使用<br>例子中过滤|doc|docx|jpg|png|pdf|多种文件格式。<br>html:</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; nv-file-select uploader=&quot;uploader&quot; ng-click=&quot;clearItems()&quot; filters=&quot;nameFilter&quot;&gt; 上传\n</code></pre><p>controller.js:</p>\n<pre><code>// FILTERS\nuploader.filters.push({\n    name: &apos;nameFilter&apos;,\n    fn: function(item /*{File|FileLikeObject}*/, options) {\n        var type = &apos;|&apos; + item.name.slice(item.name.lastIndexOf(&apos;.&apos;) + 1) + &apos;|&apos;;\n        return &apos;|doc|docx|jpg|png|pdf|&apos;.indexOf(type) !== -1;\n    }\n});\n</code></pre><p>多个过滤器使用<br>html:</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; nv-file-select uploader=&quot;uploader&quot; ng-click=&quot;clearItems()&quot; filters=&quot;filtername1,filtername2&quot;&gt; 上传\n\n// FILTERS\nuploader.filters.push({\n    name: &apos;filtername1&apos;,\n    fn: function(item /*{File|FileLikeObject}*/, options) {\n        ...\n    }\n},{\n    name: &apos;filtername2&apos;,\n    fn: function(item /*{File|FileLikeObject}*/, options) {\n        ...\n    }\n});\n</code></pre><p>注意：filtername1和filtername2两个过滤器之间是逻辑与关系（即&amp;&amp;），所以使用的时候避免出现逻辑或。做项目写了个坑，filtername1过滤器校验图片，filtername2校验word，html使用filters=”filtername1,filtername2”就出现图片和word都不允许上传问题。解决方法是用</p>\n<pre><code>item.name.slice(item.name.lastIndexOf(&apos;/&apos;) + 1) + &apos;|&apos;;\nreturn &apos;|doc|docx|jpg|png|pdf|&apos;.indexOf(type) !== -1;\n</code></pre><p>小结：angular-file-uplo插件支持多文件上传，限制文件大小，将文件上传用队列queue管理，有很多API可供调用，完成业务逻辑需求，如果浏览器支持H5的话，界面效果也很酷，可以增加进度条展示等等。</p>\n"},{"title":"angular-instruction","date":"2017-03-04T23:34:13.000Z","_content":"# Angular几个常用指令\n\n###### 1.ng-if指令\n**定义：**指令用于表达式值为false时移除 HTML 元素；如果if语句的执行结果为true，会添加移除元素，并显示。ng-if 指令不同于 ng-hide， ng-hide 隐藏元素，而 ng-if 是从 DOM 中移除元素。\n\n**用法实例：**通过ng-if控制元素隐藏/显示，达到点击隐藏和显示的效果也是常见的用法。推荐这种方法，简单快捷有木有。\n\n\n\n\t<div ng-click=\"a!=a\" ng-if=\"aa\">\n    \t<!--每当点击div元素，改变a的值，达到隐藏显示div元素的目的-->\n    \t...\n\t</div>\n\t<script>\n   \t\tvar a=true;\n\t</script>\n\n###### 2.ng-show指令\n**定义：**ng-show 指令在表达式为 true 时显示指定的 HTML 元素，否则隐藏指定的 HTML 元素\n\n**用法:**\n`<div ng-show=\"expression\">\n    ...\n</div>`\n\nExpression是表达式，你可以自己定义。\n###### 3.ng-hide指令\n**定义：**指令在表达式为 true 时隐藏 HTML 元素\n\n**用法:**\n\n\n    <div ng-hide=\"expression\">\n        ...\n    </div>\n\n###### 4.ng-repeat指令\n**定义：**指令用于循环输出指定次数的 HTML 元素\n集合必须是数组或对象\n\n**用法：**\n\n\t<body ng-app=\"moduleName\" ng-controller=\"CtrlName\">\n\n\t\t<h1 ng-repeat=\"item in group\">{{item}}</h1>\n\n\t<script>\n    var app = angular.module(\"moduleName\", []);\n    app.controller(\"CtrlName\", function($scope) {\n        $scope.group = [\n            \"RMB\",\n            \"Doller\",\n            \"Chnia\",\n            \"Beijing\"\n        ]\n    });\n\t</script>\n\n\t</body>\n\n\n渲染出的DOM：\n\n\t<body ng-app=\"moduleName\" ng-controller=\"CtrlName\">\n\t\t<h1>RMB</h1>\n\t\t<h1>Doller</h1>\n\t\t<h1>Chnia</h1>\n\t\t<h1>Beijing</h1>\n\t</body>\n\nNg-reapt在处理后台数据时经常用到，后台返回的数据往往比这要复杂，可能是数组里包含了对象，比如在上面group里加一个List对象：\n\n\t$scope.group = [\n         \"RMB\",\n         \"Doller\",\n         \"Chnia\",\n         \"List\":{a:1,b:2}\n    ]\n\n要取得a的值，就要这么写：\n\n\t<h1 ng-repeat=\"item in group\">{{item.List.a}}</h1>\n\n更多内容敬请关注博客，欢迎和我交流哦*~*\n","source":"_posts/angular-instruction.md","raw":"---\ntitle: angular-instruction\ndate: 2017-03-05 07:34:13\ntags:\n---\n# Angular几个常用指令\n\n###### 1.ng-if指令\n**定义：**指令用于表达式值为false时移除 HTML 元素；如果if语句的执行结果为true，会添加移除元素，并显示。ng-if 指令不同于 ng-hide， ng-hide 隐藏元素，而 ng-if 是从 DOM 中移除元素。\n\n**用法实例：**通过ng-if控制元素隐藏/显示，达到点击隐藏和显示的效果也是常见的用法。推荐这种方法，简单快捷有木有。\n\n\n\n\t<div ng-click=\"a!=a\" ng-if=\"aa\">\n    \t<!--每当点击div元素，改变a的值，达到隐藏显示div元素的目的-->\n    \t...\n\t</div>\n\t<script>\n   \t\tvar a=true;\n\t</script>\n\n###### 2.ng-show指令\n**定义：**ng-show 指令在表达式为 true 时显示指定的 HTML 元素，否则隐藏指定的 HTML 元素\n\n**用法:**\n`<div ng-show=\"expression\">\n    ...\n</div>`\n\nExpression是表达式，你可以自己定义。\n###### 3.ng-hide指令\n**定义：**指令在表达式为 true 时隐藏 HTML 元素\n\n**用法:**\n\n\n    <div ng-hide=\"expression\">\n        ...\n    </div>\n\n###### 4.ng-repeat指令\n**定义：**指令用于循环输出指定次数的 HTML 元素\n集合必须是数组或对象\n\n**用法：**\n\n\t<body ng-app=\"moduleName\" ng-controller=\"CtrlName\">\n\n\t\t<h1 ng-repeat=\"item in group\">{{item}}</h1>\n\n\t<script>\n    var app = angular.module(\"moduleName\", []);\n    app.controller(\"CtrlName\", function($scope) {\n        $scope.group = [\n            \"RMB\",\n            \"Doller\",\n            \"Chnia\",\n            \"Beijing\"\n        ]\n    });\n\t</script>\n\n\t</body>\n\n\n渲染出的DOM：\n\n\t<body ng-app=\"moduleName\" ng-controller=\"CtrlName\">\n\t\t<h1>RMB</h1>\n\t\t<h1>Doller</h1>\n\t\t<h1>Chnia</h1>\n\t\t<h1>Beijing</h1>\n\t</body>\n\nNg-reapt在处理后台数据时经常用到，后台返回的数据往往比这要复杂，可能是数组里包含了对象，比如在上面group里加一个List对象：\n\n\t$scope.group = [\n         \"RMB\",\n         \"Doller\",\n         \"Chnia\",\n         \"List\":{a:1,b:2}\n    ]\n\n要取得a的值，就要这么写：\n\n\t<h1 ng-repeat=\"item in group\">{{item.List.a}}</h1>\n\n更多内容敬请关注博客，欢迎和我交流哦*~*\n","slug":"angular-instruction","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi3000bmo017fqjbwxm","content":"<h1 id=\"Angular几个常用指令\"><a href=\"#Angular几个常用指令\" class=\"headerlink\" title=\"Angular几个常用指令\"></a>Angular几个常用指令</h1><h6 id=\"1-ng-if指令\"><a href=\"#1-ng-if指令\" class=\"headerlink\" title=\"1.ng-if指令\"></a>1.ng-if指令</h6><p><strong>定义：</strong>指令用于表达式值为false时移除 HTML 元素；如果if语句的执行结果为true，会添加移除元素，并显示。ng-if 指令不同于 ng-hide， ng-hide 隐藏元素，而 ng-if 是从 DOM 中移除元素。</p>\n<p><strong>用法实例：</strong>通过ng-if控制元素隐藏/显示，达到点击隐藏和显示的效果也是常见的用法。推荐这种方法，简单快捷有木有。</p>\n<pre><code>&lt;div ng-click=&quot;a!=a&quot; ng-if=&quot;aa&quot;&gt;\n    &lt;!--每当点击div元素，改变a的值，达到隐藏显示div元素的目的--&gt;\n    ...\n&lt;/div&gt;\n&lt;script&gt;\n       var a=true;\n&lt;/script&gt;\n</code></pre><h6 id=\"2-ng-show指令\"><a href=\"#2-ng-show指令\" class=\"headerlink\" title=\"2.ng-show指令\"></a>2.ng-show指令</h6><p><strong>定义：</strong>ng-show 指令在表达式为 true 时显示指定的 HTML 元素，否则隐藏指定的 HTML 元素</p>\n<p><strong>用法:</strong><br><code>&lt;div ng-show=&quot;expression&quot;&gt;\n    ...\n&lt;/div&gt;</code></p>\n<p>Expression是表达式，你可以自己定义。</p>\n<h6 id=\"3-ng-hide指令\"><a href=\"#3-ng-hide指令\" class=\"headerlink\" title=\"3.ng-hide指令\"></a>3.ng-hide指令</h6><p><strong>定义：</strong>指令在表达式为 true 时隐藏 HTML 元素</p>\n<p><strong>用法:</strong></p>\n<pre><code>&lt;div ng-hide=&quot;expression&quot;&gt;\n    ...\n&lt;/div&gt;\n</code></pre><h6 id=\"4-ng-repeat指令\"><a href=\"#4-ng-repeat指令\" class=\"headerlink\" title=\"4.ng-repeat指令\"></a>4.ng-repeat指令</h6><p><strong>定义：</strong>指令用于循环输出指定次数的 HTML 元素<br>集合必须是数组或对象</p>\n<p><strong>用法：</strong></p>\n<pre><code>&lt;body ng-app=&quot;moduleName&quot; ng-controller=&quot;CtrlName&quot;&gt;\n\n    &lt;h1 ng-repeat=&quot;item in group&quot;&gt;{{item}}&lt;/h1&gt;\n\n&lt;script&gt;\nvar app = angular.module(&quot;moduleName&quot;, []);\napp.controller(&quot;CtrlName&quot;, function($scope) {\n    $scope.group = [\n        &quot;RMB&quot;,\n        &quot;Doller&quot;,\n        &quot;Chnia&quot;,\n        &quot;Beijing&quot;\n    ]\n});\n&lt;/script&gt;\n\n&lt;/body&gt;\n</code></pre><p>渲染出的DOM：</p>\n<pre><code>&lt;body ng-app=&quot;moduleName&quot; ng-controller=&quot;CtrlName&quot;&gt;\n    &lt;h1&gt;RMB&lt;/h1&gt;\n    &lt;h1&gt;Doller&lt;/h1&gt;\n    &lt;h1&gt;Chnia&lt;/h1&gt;\n    &lt;h1&gt;Beijing&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre><p>Ng-reapt在处理后台数据时经常用到，后台返回的数据往往比这要复杂，可能是数组里包含了对象，比如在上面group里加一个List对象：</p>\n<pre><code>$scope.group = [\n     &quot;RMB&quot;,\n     &quot;Doller&quot;,\n     &quot;Chnia&quot;,\n     &quot;List&quot;:{a:1,b:2}\n]\n</code></pre><p>要取得a的值，就要这么写：</p>\n<pre><code>&lt;h1 ng-repeat=&quot;item in group&quot;&gt;{{item.List.a}}&lt;/h1&gt;\n</code></pre><p>更多内容敬请关注博客，欢迎和我交流哦<em>~</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Angular几个常用指令\"><a href=\"#Angular几个常用指令\" class=\"headerlink\" title=\"Angular几个常用指令\"></a>Angular几个常用指令</h1><h6 id=\"1-ng-if指令\"><a href=\"#1-ng-if指令\" class=\"headerlink\" title=\"1.ng-if指令\"></a>1.ng-if指令</h6><p><strong>定义：</strong>指令用于表达式值为false时移除 HTML 元素；如果if语句的执行结果为true，会添加移除元素，并显示。ng-if 指令不同于 ng-hide， ng-hide 隐藏元素，而 ng-if 是从 DOM 中移除元素。</p>\n<p><strong>用法实例：</strong>通过ng-if控制元素隐藏/显示，达到点击隐藏和显示的效果也是常见的用法。推荐这种方法，简单快捷有木有。</p>\n<pre><code>&lt;div ng-click=&quot;a!=a&quot; ng-if=&quot;aa&quot;&gt;\n    &lt;!--每当点击div元素，改变a的值，达到隐藏显示div元素的目的--&gt;\n    ...\n&lt;/div&gt;\n&lt;script&gt;\n       var a=true;\n&lt;/script&gt;\n</code></pre><h6 id=\"2-ng-show指令\"><a href=\"#2-ng-show指令\" class=\"headerlink\" title=\"2.ng-show指令\"></a>2.ng-show指令</h6><p><strong>定义：</strong>ng-show 指令在表达式为 true 时显示指定的 HTML 元素，否则隐藏指定的 HTML 元素</p>\n<p><strong>用法:</strong><br><code>&lt;div ng-show=&quot;expression&quot;&gt;\n    ...\n&lt;/div&gt;</code></p>\n<p>Expression是表达式，你可以自己定义。</p>\n<h6 id=\"3-ng-hide指令\"><a href=\"#3-ng-hide指令\" class=\"headerlink\" title=\"3.ng-hide指令\"></a>3.ng-hide指令</h6><p><strong>定义：</strong>指令在表达式为 true 时隐藏 HTML 元素</p>\n<p><strong>用法:</strong></p>\n<pre><code>&lt;div ng-hide=&quot;expression&quot;&gt;\n    ...\n&lt;/div&gt;\n</code></pre><h6 id=\"4-ng-repeat指令\"><a href=\"#4-ng-repeat指令\" class=\"headerlink\" title=\"4.ng-repeat指令\"></a>4.ng-repeat指令</h6><p><strong>定义：</strong>指令用于循环输出指定次数的 HTML 元素<br>集合必须是数组或对象</p>\n<p><strong>用法：</strong></p>\n<pre><code>&lt;body ng-app=&quot;moduleName&quot; ng-controller=&quot;CtrlName&quot;&gt;\n\n    &lt;h1 ng-repeat=&quot;item in group&quot;&gt;{{item}}&lt;/h1&gt;\n\n&lt;script&gt;\nvar app = angular.module(&quot;moduleName&quot;, []);\napp.controller(&quot;CtrlName&quot;, function($scope) {\n    $scope.group = [\n        &quot;RMB&quot;,\n        &quot;Doller&quot;,\n        &quot;Chnia&quot;,\n        &quot;Beijing&quot;\n    ]\n});\n&lt;/script&gt;\n\n&lt;/body&gt;\n</code></pre><p>渲染出的DOM：</p>\n<pre><code>&lt;body ng-app=&quot;moduleName&quot; ng-controller=&quot;CtrlName&quot;&gt;\n    &lt;h1&gt;RMB&lt;/h1&gt;\n    &lt;h1&gt;Doller&lt;/h1&gt;\n    &lt;h1&gt;Chnia&lt;/h1&gt;\n    &lt;h1&gt;Beijing&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre><p>Ng-reapt在处理后台数据时经常用到，后台返回的数据往往比这要复杂，可能是数组里包含了对象，比如在上面group里加一个List对象：</p>\n<pre><code>$scope.group = [\n     &quot;RMB&quot;,\n     &quot;Doller&quot;,\n     &quot;Chnia&quot;,\n     &quot;List&quot;:{a:1,b:2}\n]\n</code></pre><p>要取得a的值，就要这么写：</p>\n<pre><code>&lt;h1 ng-repeat=&quot;item in group&quot;&gt;{{item.List.a}}&lt;/h1&gt;\n</code></pre><p>更多内容敬请关注博客，欢迎和我交流哦<em>~</em></p>\n"},{"title":"Javascript中的apply、call和bind","date":"2017-09-12T12:53:40.000Z","_content":"这三种方法的作用是一样的，都能改变函数的执行作用域，区别只是在调用时传入的参数不同。\n### apply方法\napply()方法接收两个参数，第一个参数是函数内this的作用域，第二个参数是一个数组对象或者arguments。\n```js\nvar oo = {\n    a:5,\n    b:3\n}\nvar a = 9,b=1;\nfunction foo(a,b) {\n    return this.a-this.b;\n}\nconsole.log(foo.apply(oo));//2\nconsole.log(foo.apply());//8\n\n```\n### call方法\n### bind方法\n","source":"_posts/apply-call-bind.md","raw":"---\ntitle: Javascript中的apply、call和bind\ndate: 2017-09-12 20:53:40\ntags:\n    - JavaScript\n    - frontend\n---\n这三种方法的作用是一样的，都能改变函数的执行作用域，区别只是在调用时传入的参数不同。\n### apply方法\napply()方法接收两个参数，第一个参数是函数内this的作用域，第二个参数是一个数组对象或者arguments。\n```js\nvar oo = {\n    a:5,\n    b:3\n}\nvar a = 9,b=1;\nfunction foo(a,b) {\n    return this.a-this.b;\n}\nconsole.log(foo.apply(oo));//2\nconsole.log(foo.apply());//8\n\n```\n### call方法\n### bind方法\n","slug":"apply-call-bind","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi4000dmo01qbpap73c","content":"<p>这三种方法的作用是一样的，都能改变函数的执行作用域，区别只是在调用时传入的参数不同。</p>\n<h3 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h3><p>apply()方法接收两个参数，第一个参数是函数内this的作用域，第二个参数是一个数组对象或者arguments。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oo = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">5</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span>,b=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a-<span class=\"keyword\">this</span>.b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.apply(oo));<span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.apply());<span class=\"comment\">//8</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h3><h3 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h3>","site":{"data":{}},"excerpt":"","more":"<p>这三种方法的作用是一样的，都能改变函数的执行作用域，区别只是在调用时传入的参数不同。</p>\n<h3 id=\"apply方法\"><a href=\"#apply方法\" class=\"headerlink\" title=\"apply方法\"></a>apply方法</h3><p>apply()方法接收两个参数，第一个参数是函数内this的作用域，第二个参数是一个数组对象或者arguments。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oo = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">5</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span>,b=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a-<span class=\"keyword\">this</span>.b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.apply(oo));<span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.apply());<span class=\"comment\">//8</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"call方法\"><a href=\"#call方法\" class=\"headerlink\" title=\"call方法\"></a>call方法</h3><h3 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h3>"},{"title":"如何在npm上发布一个插件","date":"2017-12-03T08:04:53.000Z","_content":"今天尝试在\b\b在npm上发布\b一个插件，做下笔记给大家分享。\n### 1.在GitHub\b新建一个项目\n这次用\b我自己写的一个gulp插件来做例子，\b演示下如何一步一步在npm上发布自己的插件。  \n\n首先，在GitHub上新建一个项目，我的插件取名叫\bgulp-px-to-rem,\b如图:\n![图3](https://upload.cc/i/UqKSsB.jpg)\n新建成功后，\b将gulp-px-to-rem项目克隆到本地。这就是即将发布到npm的插件项目:\n![图片2](https://upload.cc/i/9bi6o1.jpg)\n\n### 2.在npm注册一个账号\n访问npm官网注册一个账号：https://www.npmjs.com。  \n用命令行\b登录：\n```shell\nnpm login\n```\n\n### 3.发布插件\n\b进入本地项目gulp-px-to-rem的根目录下:  \n\n```shell\nnpm publish\n```\n发布完成后，在npm官网下搜索我们刚发布的插件：\n![图1](https://upload.cc/i/08il1d.jpg)\n如上，搜搜到插件gulp-px-to-rem,表示已经发布成功！  \n\n### 发布常见问题\n小坑：注意每次再发布的时候，到package.json文件改下版本号再发布，否则会报错。  \n\n备注：\n为了在GitHub同步代码，可以把每次发布更新到\bGitHub。只需三步命令：\n```shell\ngit add .\ngit ci -m '备注'\ngit push\n```\n","source":"_posts/create-npm-plug.md","raw":"---\ntitle: 如何在npm上发布一个插件\ndate: 2017-12-03 16:04:53\ntags:\n    - frontend\n    - JavaScript\n    - npm\n---\n今天尝试在\b\b在npm上发布\b一个插件，做下笔记给大家分享。\n### 1.在GitHub\b新建一个项目\n这次用\b我自己写的一个gulp插件来做例子，\b演示下如何一步一步在npm上发布自己的插件。  \n\n首先，在GitHub上新建一个项目，我的插件取名叫\bgulp-px-to-rem,\b如图:\n![图3](https://upload.cc/i/UqKSsB.jpg)\n新建成功后，\b将gulp-px-to-rem项目克隆到本地。这就是即将发布到npm的插件项目:\n![图片2](https://upload.cc/i/9bi6o1.jpg)\n\n### 2.在npm注册一个账号\n访问npm官网注册一个账号：https://www.npmjs.com。  \n用命令行\b登录：\n```shell\nnpm login\n```\n\n### 3.发布插件\n\b进入本地项目gulp-px-to-rem的根目录下:  \n\n```shell\nnpm publish\n```\n发布完成后，在npm官网下搜索我们刚发布的插件：\n![图1](https://upload.cc/i/08il1d.jpg)\n如上，搜搜到插件gulp-px-to-rem,表示已经发布成功！  \n\n### 发布常见问题\n小坑：注意每次再发布的时候，到package.json文件改下版本号再发布，否则会报错。  \n\n备注：\n为了在GitHub同步代码，可以把每次发布更新到\bGitHub。只需三步命令：\n```shell\ngit add .\ngit ci -m '备注'\ngit push\n```\n","slug":"create-npm-plug","published":1,"updated":"2017-12-03T09:01:34.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi5000gmo01ohr03nhx","content":"<p>今天尝试在\b\b在npm上发布\b一个插件，做下笔记给大家分享。</p>\n<h3 id=\"1-在GitHub新建一个项目\"><a href=\"#1-在GitHub新建一个项目\" class=\"headerlink\" title=\"1.在GitHub\b新建一个项目\"></a>1.在GitHub\b新建一个项目</h3><p>这次用\b我自己写的一个gulp插件来做例子，\b演示下如何一步一步在npm上发布自己的插件。  </p>\n<p>首先，在GitHub上新建一个项目，我的插件取名叫\bgulp-px-to-rem,\b如图:<br><img src=\"https://upload.cc/i/UqKSsB.jpg\" alt=\"图3\"><br>新建成功后，\b将gulp-px-to-rem项目克隆到本地。这就是即将发布到npm的插件项目:<br><img src=\"https://upload.cc/i/9bi6o1.jpg\" alt=\"图片2\"></p>\n<h3 id=\"2-在npm注册一个账号\"><a href=\"#2-在npm注册一个账号\" class=\"headerlink\" title=\"2.在npm注册一个账号\"></a>2.在npm注册一个账号</h3><p>访问npm官网注册一个账号：<a href=\"https://www.npmjs.com。\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com。</a><br>用命令行\b登录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm login</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-发布插件\"><a href=\"#3-发布插件\" class=\"headerlink\" title=\"3.发布插件\"></a>3.发布插件</h3><p>\b进入本地项目gulp-px-to-rem的根目录下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure>\n<p>发布完成后，在npm官网下搜索我们刚发布的插件：<br><img src=\"https://upload.cc/i/08il1d.jpg\" alt=\"图1\"><br>如上，搜搜到插件gulp-px-to-rem,表示已经发布成功！  </p>\n<h3 id=\"发布常见问题\"><a href=\"#发布常见问题\" class=\"headerlink\" title=\"发布常见问题\"></a>发布常见问题</h3><p>小坑：注意每次再发布的时候，到package.json文件改下版本号再发布，否则会报错。  </p>\n<p>备注：<br>为了在GitHub同步代码，可以把每次发布更新到\bGitHub。只需三步命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git ci -m &apos;备注&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天尝试在\b\b在npm上发布\b一个插件，做下笔记给大家分享。</p>\n<h3 id=\"1-在GitHub新建一个项目\"><a href=\"#1-在GitHub新建一个项目\" class=\"headerlink\" title=\"1.在GitHub\b新建一个项目\"></a>1.在GitHub\b新建一个项目</h3><p>这次用\b我自己写的一个gulp插件来做例子，\b演示下如何一步一步在npm上发布自己的插件。  </p>\n<p>首先，在GitHub上新建一个项目，我的插件取名叫\bgulp-px-to-rem,\b如图:<br><img src=\"https://upload.cc/i/UqKSsB.jpg\" alt=\"图3\"><br>新建成功后，\b将gulp-px-to-rem项目克隆到本地。这就是即将发布到npm的插件项目:<br><img src=\"https://upload.cc/i/9bi6o1.jpg\" alt=\"图片2\"></p>\n<h3 id=\"2-在npm注册一个账号\"><a href=\"#2-在npm注册一个账号\" class=\"headerlink\" title=\"2.在npm注册一个账号\"></a>2.在npm注册一个账号</h3><p>访问npm官网注册一个账号：<a href=\"https://www.npmjs.com。\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com。</a><br>用命令行\b登录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm login</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-发布插件\"><a href=\"#3-发布插件\" class=\"headerlink\" title=\"3.发布插件\"></a>3.发布插件</h3><p>\b进入本地项目gulp-px-to-rem的根目录下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure>\n<p>发布完成后，在npm官网下搜索我们刚发布的插件：<br><img src=\"https://upload.cc/i/08il1d.jpg\" alt=\"图1\"><br>如上，搜搜到插件gulp-px-to-rem,表示已经发布成功！  </p>\n<h3 id=\"发布常见问题\"><a href=\"#发布常见问题\" class=\"headerlink\" title=\"发布常见问题\"></a>发布常见问题</h3><p>小坑：注意每次再发布的时候，到package.json文件改下版本号再发布，否则会报错。  </p>\n<p>备注：<br>为了在GitHub同步代码，可以把每次发布更新到\bGitHub。只需三步命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git ci -m &apos;备注&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n"},{"title":"gulp构建一个项目","date":"2017-08-23T06:02:00.000Z","_content":"介绍：这篇文章总结了使用gulp构建一个项目的详细过程。包括开发环境搭建，构建项目并用于生产部署。  \n\ngulp自动化构建工具具备以下特点：\n基于流、任务化\n常用API：src、dest、watch、task、pipe\n\n一．安装\n----\n1.安装gulp：(注意这里默认大家已经安装了npm和nodejs)\n新建项目文件，cmd切换到项目目录下，这里我新建了项目文件webapp  \n\n安装全局gulp：\n\n    npm i -g gulp\n\n\n2.接下来安装node依赖文件\n首先用npm初始化项目配置文件：\n\n    npm init\n\n然后命令行一直回车就行，配置文件之后可以更改\n\n\n3.作为项目的开发依赖（devDependencies）安装：在当前目录安装gulp\n在当前目录安装gulp:\n\n    npm i --save-dev gulp\n\n--save-dev的意思是将当前文件保存到配置文件当中，nodejs模块保存到packge.json文件当中，当我们需要项目保存到git仓库的时候，只需要保存packge.json文件到git仓库就行。当别人需要编译你的项目，只要npm i就可以拿到你的项目配置信息。\n\n我们可以看下package.json文件：在依赖模块添加了gulp信息\n\n然后我们看项目文件夹webapp的node_modules文件下多了个gulp文件夹，这个就是我们刚添加的gulp模块\n\n4.扩展插件--在当前项目文件webapp目录下，安装gulp依赖文件。\n安装命令：\n\n    npm i --save--dev 插件名称\n\n需要安装的gulp插件：\n\n    gulp-clean  \n    gulp-concat（文件合并）  \n    gulp-connect  \n    gulp-minify-html（html压缩）  \n    gulp-minify-css（CSS压缩）\n    gulp-cssmin（CSS压缩）（任选一个）  \n    gulp-jshint（JS代码检查）\n    gulp-imagemin（压缩图片）  \n    gulp-less（编译Less）    \n    gulp-sass（编译Sass）\n    gulp-load-plugins  \n    gulp-uglify （JS压缩）\n    gulp-livereload（自动刷新）\n    open\n\n比如说：\n\n    npm i --save--dev gulp-clean\n\n如果你不想一个个安装，有个批量安装的小窍门：\n\n    npm i --save--dev gulp-clean gulp-concat gulp-connect ...\n\n各个模块之间以空格隔开。\n安装好之后呢，我们在package.json文件里可以看到这些依赖插件\n\n5.进行配置\n在webapp项目根目录下，新建gulpfile.js文件，在文件中写入如下配置代码：\n\n    var gulp = require('gulp');          //引入模块\n    var $ = require('gulp-load-plugins');  //有了这个模块，其他的模块可以以$符号引入\n    var open = require('open');         //引入open\n\n    var app = {//声明一个全局变量，定义项目的路径\n        srcPath : 'src/',      //源文件\n        devPath : 'build/',   //开发环境--整合之后的路径\n        prdPath : 'dist/'     //生成部署\n    };\n\n6.拷贝命令\n定义任务的API，第二个参数是一个回调函数，在回调函数里我们写入逻辑操作代码\n\n    gulp.task('任务名',function () {\n        gulp.路径(路径)\t\t//读取文件\n        .pipe(...操作文件)\n        .pipe(gulp.dest(目录))\t//生成文件\n    })\n\n\n二．使用\n----\n应用实例：\n1.拷贝HTML：\na.新建文件夹src存放源代码\n\n\nb.新建完之后，我们在gulpfile.js文件下敲入如下代码进行拷贝html：（前提之前已配置好各个路径）\n\n    gulp.task('html',function () {\n        gulp.src(app.srcPath + '**/*.html')\n        .pipe(gulp.dest(app.devPath))  //pipe是一个API  写文件的API--dest 拷贝到app.devPath + 'vendeor'\n        .pipe(gulp.dest(app.prdPath))     //生成\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    })\n\nc.可以测试下，命令行打开，在项目路径下，输入\n\n    gulp html\n\nd.执行成功后可以看到项目文件下生成了新的文件夹build\n\n\n2.拷贝第三方依赖库lib：前提是安装好bower并且用bower安装了第三方依赖文件（本例使用Bower安装了Angular，在bower_componets文件下）\n题外话：全局安装bower：\n\n    npm install bower -g\n\nBower安装第三方依赖Angular:\n\n    bower install --save angular\n\n开始拷贝JS：\na.在gulpfile.js文件下敲入如下代码进行拷贝js：（前提之前已配置好各个路径）\n\n    gulp.task('lib',function () {\n        gulp.src('bower_components/**/*.js')\n        .pipe(gulp.dest(app.devPath + 'vendor'))\n        .pipe(gulp.dest(app.prdPath + 'vendor'))\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    })\n\nb.命令行进入项目路径，执行命令：\n\n    gulp lib\n\nc.如果在build目录下生成vendor文件夹及其angular文件，表示成功。\n\n\n\n3.拷贝CSS\na.src目录新建目录style，新建文件index.less和1.less，在两个文件编写测试代码。\n\nb.然后在gulpfile.js文件新建任务：\n\n    gulp.task('less',function () {\n        gulp.src(app.srcPath + 'style/index.less')\n            .pipe($.less())                     //别忘了less后的括号\n            .pipe(gulp.dest(app.devPath + 'css'))\n            .pipe($.cssmin())                  //压缩\n            .pipe(gulp.dest(app.prdPath + 'css'))\n            .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    });\n\nc.运行，在命令行输入\n\n    gulp less\n\n\n\n4.拷贝JS\n同样的套路：\na.src下新建目录script，在script里新建文件1.js和2.js，随便写点测试代码。\n\nb.新建gulp任务：\n在gulpfile.js文件下添加如下一段代码即可：\n\n    gulp.task('js',function () {\n        gulp.src(app.srcPath + 'script/**/*.js')\n            .pipe($.concat('index.js'))\t\t\t//生成\n            .pipe(gulp.dest(app.devPath + 'js'))    //写入开发环境\n            .pipe($.uglify())\t\t\t\t\t//压缩\n            .pipe(gulp.dest(app.prdPath + 'js'))    //部署到生产环境\n            .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    });\n\nc.运行\n在命令行输入：\n\n    gulp js\n\nd.查看运行结果，在生产环境dist目录下生成js文件夹及其index.js文件。\n\n\n5.拷贝image\n套路是一样的啊，\na.在src里新建image目录，在该目录里新建一张图片，比如1.png\nb.新建gulp任务，在gulpfile.js文件下添加如下代码：\n\n    gulp.task('image',function () {\n        gulp.src(app.srcPath + 'image/**/*')           //读取文件\n            .pipe(gulp.dest(app.devPath + 'image'))\t\t//拷贝到开发环境\n            .pipe($.imagemin()) \t\t\t\t\t//压缩图片\n            .pipe(gulp.dest(app.prdPath + 'image'))    //部署到生产环境\n            .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    });\n\nc.项目路径下运行下：\n\n    gulp image\n\n\nd.查看运行结果，在生产环境目录dist里生产image目录及其文件\n\n6.在我们部署到生产环境之后，往往需要清除build和dist 目录，避免出现旧的影响新的。这时候就需要新建一个清除任务：\n在gulpfile.js文件下添加如下代码块：\n\n    gulp.task('clean',function () {  //清除\n        gulp.src([app.devPath,app.prdPath]) //要删除目录\n        .pipe($.clean());\n    });\n\n运行：\n\n    gulp clean\n\n\n7新建gulp总任务。在我们真正部署的时候，往往通过新建一个gulp总任务来执行之前的所有打包压缩任务，减少繁琐操作，代码如下：\n\n    gulp.task('build',['image','js','less','lib','html','json']);  //总任务  执行gulp build即可\n\n运行：\n\n    gulp build\n\n\n8新建服务----自动化启动总任务build和服务器\n在gulpfile.js文件下，敲入如下新建服务代码：\n\n    //新建服务\n    gulp.task('serve',['build'],function () {\n        $.connect.server({        //启动一个服务器\n            root:[app.devPath],   //从开发目录下读取\n            livereload:true,      //自动刷新浏览器，ie不支持\n            port:1234           //端口\n        });\n        open('http://localhost:1234');   //自动打开网址，打开浏览器\n\n        //监听\n        gulp.watch('bower_components/**/*',['lib']);\n        gulp.watch(app.srcPath + '**/*.html',['html']);\n        gulp.watch(app.srcPath + 'data/**/*.json',['json']);\n        gulp.watch(app.srcPath + 'style/**/*.less',['less']);\n        gulp.watch(app.srcPath + 'script/**/*.js',['js']);\n        gulp.watch(app.srcPath + 'image/**/*',['image']);\n    });\n\n8.1有一个小技能，我们可以新建一个gulp默认任务，让它运行gulp的时候自动启动服务serve：\n\n    //建立默认启动任务\n    gulp.task('default',['serve']);//default 依赖serve\n\n\n可以测试一下，命令行敲入：\n\n    gulp\n\n然后等待运行结束，浏览器会自动打开网址：http://localhost:1234/\n你可以在src目录下的index.html页面敲入代码：hello world!\n此时你会发现网页自动刷新了\n\n当一个程序员打出hello world时就像中乐透一样哈哈:)\n","source":"_posts/gulp-dev.md","raw":"---\ntitle: gulp构建一个项目\ndate: 2017-08-23 14:02:00\ntags:\n---\n介绍：这篇文章总结了使用gulp构建一个项目的详细过程。包括开发环境搭建，构建项目并用于生产部署。  \n\ngulp自动化构建工具具备以下特点：\n基于流、任务化\n常用API：src、dest、watch、task、pipe\n\n一．安装\n----\n1.安装gulp：(注意这里默认大家已经安装了npm和nodejs)\n新建项目文件，cmd切换到项目目录下，这里我新建了项目文件webapp  \n\n安装全局gulp：\n\n    npm i -g gulp\n\n\n2.接下来安装node依赖文件\n首先用npm初始化项目配置文件：\n\n    npm init\n\n然后命令行一直回车就行，配置文件之后可以更改\n\n\n3.作为项目的开发依赖（devDependencies）安装：在当前目录安装gulp\n在当前目录安装gulp:\n\n    npm i --save-dev gulp\n\n--save-dev的意思是将当前文件保存到配置文件当中，nodejs模块保存到packge.json文件当中，当我们需要项目保存到git仓库的时候，只需要保存packge.json文件到git仓库就行。当别人需要编译你的项目，只要npm i就可以拿到你的项目配置信息。\n\n我们可以看下package.json文件：在依赖模块添加了gulp信息\n\n然后我们看项目文件夹webapp的node_modules文件下多了个gulp文件夹，这个就是我们刚添加的gulp模块\n\n4.扩展插件--在当前项目文件webapp目录下，安装gulp依赖文件。\n安装命令：\n\n    npm i --save--dev 插件名称\n\n需要安装的gulp插件：\n\n    gulp-clean  \n    gulp-concat（文件合并）  \n    gulp-connect  \n    gulp-minify-html（html压缩）  \n    gulp-minify-css（CSS压缩）\n    gulp-cssmin（CSS压缩）（任选一个）  \n    gulp-jshint（JS代码检查）\n    gulp-imagemin（压缩图片）  \n    gulp-less（编译Less）    \n    gulp-sass（编译Sass）\n    gulp-load-plugins  \n    gulp-uglify （JS压缩）\n    gulp-livereload（自动刷新）\n    open\n\n比如说：\n\n    npm i --save--dev gulp-clean\n\n如果你不想一个个安装，有个批量安装的小窍门：\n\n    npm i --save--dev gulp-clean gulp-concat gulp-connect ...\n\n各个模块之间以空格隔开。\n安装好之后呢，我们在package.json文件里可以看到这些依赖插件\n\n5.进行配置\n在webapp项目根目录下，新建gulpfile.js文件，在文件中写入如下配置代码：\n\n    var gulp = require('gulp');          //引入模块\n    var $ = require('gulp-load-plugins');  //有了这个模块，其他的模块可以以$符号引入\n    var open = require('open');         //引入open\n\n    var app = {//声明一个全局变量，定义项目的路径\n        srcPath : 'src/',      //源文件\n        devPath : 'build/',   //开发环境--整合之后的路径\n        prdPath : 'dist/'     //生成部署\n    };\n\n6.拷贝命令\n定义任务的API，第二个参数是一个回调函数，在回调函数里我们写入逻辑操作代码\n\n    gulp.task('任务名',function () {\n        gulp.路径(路径)\t\t//读取文件\n        .pipe(...操作文件)\n        .pipe(gulp.dest(目录))\t//生成文件\n    })\n\n\n二．使用\n----\n应用实例：\n1.拷贝HTML：\na.新建文件夹src存放源代码\n\n\nb.新建完之后，我们在gulpfile.js文件下敲入如下代码进行拷贝html：（前提之前已配置好各个路径）\n\n    gulp.task('html',function () {\n        gulp.src(app.srcPath + '**/*.html')\n        .pipe(gulp.dest(app.devPath))  //pipe是一个API  写文件的API--dest 拷贝到app.devPath + 'vendeor'\n        .pipe(gulp.dest(app.prdPath))     //生成\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    })\n\nc.可以测试下，命令行打开，在项目路径下，输入\n\n    gulp html\n\nd.执行成功后可以看到项目文件下生成了新的文件夹build\n\n\n2.拷贝第三方依赖库lib：前提是安装好bower并且用bower安装了第三方依赖文件（本例使用Bower安装了Angular，在bower_componets文件下）\n题外话：全局安装bower：\n\n    npm install bower -g\n\nBower安装第三方依赖Angular:\n\n    bower install --save angular\n\n开始拷贝JS：\na.在gulpfile.js文件下敲入如下代码进行拷贝js：（前提之前已配置好各个路径）\n\n    gulp.task('lib',function () {\n        gulp.src('bower_components/**/*.js')\n        .pipe(gulp.dest(app.devPath + 'vendor'))\n        .pipe(gulp.dest(app.prdPath + 'vendor'))\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    })\n\nb.命令行进入项目路径，执行命令：\n\n    gulp lib\n\nc.如果在build目录下生成vendor文件夹及其angular文件，表示成功。\n\n\n\n3.拷贝CSS\na.src目录新建目录style，新建文件index.less和1.less，在两个文件编写测试代码。\n\nb.然后在gulpfile.js文件新建任务：\n\n    gulp.task('less',function () {\n        gulp.src(app.srcPath + 'style/index.less')\n            .pipe($.less())                     //别忘了less后的括号\n            .pipe(gulp.dest(app.devPath + 'css'))\n            .pipe($.cssmin())                  //压缩\n            .pipe(gulp.dest(app.prdPath + 'css'))\n            .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    });\n\nc.运行，在命令行输入\n\n    gulp less\n\n\n\n4.拷贝JS\n同样的套路：\na.src下新建目录script，在script里新建文件1.js和2.js，随便写点测试代码。\n\nb.新建gulp任务：\n在gulpfile.js文件下添加如下一段代码即可：\n\n    gulp.task('js',function () {\n        gulp.src(app.srcPath + 'script/**/*.js')\n            .pipe($.concat('index.js'))\t\t\t//生成\n            .pipe(gulp.dest(app.devPath + 'js'))    //写入开发环境\n            .pipe($.uglify())\t\t\t\t\t//压缩\n            .pipe(gulp.dest(app.prdPath + 'js'))    //部署到生产环境\n            .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    });\n\nc.运行\n在命令行输入：\n\n    gulp js\n\nd.查看运行结果，在生产环境dist目录下生成js文件夹及其index.js文件。\n\n\n5.拷贝image\n套路是一样的啊，\na.在src里新建image目录，在该目录里新建一张图片，比如1.png\nb.新建gulp任务，在gulpfile.js文件下添加如下代码：\n\n    gulp.task('image',function () {\n        gulp.src(app.srcPath + 'image/**/*')           //读取文件\n            .pipe(gulp.dest(app.devPath + 'image'))\t\t//拷贝到开发环境\n            .pipe($.imagemin()) \t\t\t\t\t//压缩图片\n            .pipe(gulp.dest(app.prdPath + 'image'))    //部署到生产环境\n            .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n    });\n\nc.项目路径下运行下：\n\n    gulp image\n\n\nd.查看运行结果，在生产环境目录dist里生产image目录及其文件\n\n6.在我们部署到生产环境之后，往往需要清除build和dist 目录，避免出现旧的影响新的。这时候就需要新建一个清除任务：\n在gulpfile.js文件下添加如下代码块：\n\n    gulp.task('clean',function () {  //清除\n        gulp.src([app.devPath,app.prdPath]) //要删除目录\n        .pipe($.clean());\n    });\n\n运行：\n\n    gulp clean\n\n\n7新建gulp总任务。在我们真正部署的时候，往往通过新建一个gulp总任务来执行之前的所有打包压缩任务，减少繁琐操作，代码如下：\n\n    gulp.task('build',['image','js','less','lib','html','json']);  //总任务  执行gulp build即可\n\n运行：\n\n    gulp build\n\n\n8新建服务----自动化启动总任务build和服务器\n在gulpfile.js文件下，敲入如下新建服务代码：\n\n    //新建服务\n    gulp.task('serve',['build'],function () {\n        $.connect.server({        //启动一个服务器\n            root:[app.devPath],   //从开发目录下读取\n            livereload:true,      //自动刷新浏览器，ie不支持\n            port:1234           //端口\n        });\n        open('http://localhost:1234');   //自动打开网址，打开浏览器\n\n        //监听\n        gulp.watch('bower_components/**/*',['lib']);\n        gulp.watch(app.srcPath + '**/*.html',['html']);\n        gulp.watch(app.srcPath + 'data/**/*.json',['json']);\n        gulp.watch(app.srcPath + 'style/**/*.less',['less']);\n        gulp.watch(app.srcPath + 'script/**/*.js',['js']);\n        gulp.watch(app.srcPath + 'image/**/*',['image']);\n    });\n\n8.1有一个小技能，我们可以新建一个gulp默认任务，让它运行gulp的时候自动启动服务serve：\n\n    //建立默认启动任务\n    gulp.task('default',['serve']);//default 依赖serve\n\n\n可以测试一下，命令行敲入：\n\n    gulp\n\n然后等待运行结束，浏览器会自动打开网址：http://localhost:1234/\n你可以在src目录下的index.html页面敲入代码：hello world!\n此时你会发现网页自动刷新了\n\n当一个程序员打出hello world时就像中乐透一样哈哈:)\n","slug":"gulp-dev","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi7000imo01g7jehcxv","content":"<p>介绍：这篇文章总结了使用gulp构建一个项目的详细过程。包括开发环境搭建，构建项目并用于生产部署。  </p>\n<p>gulp自动化构建工具具备以下特点：<br>基于流、任务化<br>常用API：src、dest、watch、task、pipe</p>\n<h2 id=\"一．安装\"><a href=\"#一．安装\" class=\"headerlink\" title=\"一．安装\"></a>一．安装</h2><p>1.安装gulp：(注意这里默认大家已经安装了npm和nodejs)<br>新建项目文件，cmd切换到项目目录下，这里我新建了项目文件webapp  </p>\n<p>安装全局gulp：</p>\n<pre><code>npm i -g gulp\n</code></pre><p>2.接下来安装node依赖文件<br>首先用npm初始化项目配置文件：</p>\n<pre><code>npm init\n</code></pre><p>然后命令行一直回车就行，配置文件之后可以更改</p>\n<p>3.作为项目的开发依赖（devDependencies）安装：在当前目录安装gulp<br>在当前目录安装gulp:</p>\n<pre><code>npm i --save-dev gulp\n</code></pre><p>–save-dev的意思是将当前文件保存到配置文件当中，nodejs模块保存到packge.json文件当中，当我们需要项目保存到git仓库的时候，只需要保存packge.json文件到git仓库就行。当别人需要编译你的项目，只要npm i就可以拿到你的项目配置信息。</p>\n<p>我们可以看下package.json文件：在依赖模块添加了gulp信息</p>\n<p>然后我们看项目文件夹webapp的node_modules文件下多了个gulp文件夹，这个就是我们刚添加的gulp模块</p>\n<p>4.扩展插件–在当前项目文件webapp目录下，安装gulp依赖文件。<br>安装命令：</p>\n<pre><code>npm i --save--dev 插件名称\n</code></pre><p>需要安装的gulp插件：</p>\n<pre><code>gulp-clean  \ngulp-concat（文件合并）  \ngulp-connect  \ngulp-minify-html（html压缩）  \ngulp-minify-css（CSS压缩）\ngulp-cssmin（CSS压缩）（任选一个）  \ngulp-jshint（JS代码检查）\ngulp-imagemin（压缩图片）  \ngulp-less（编译Less）    \ngulp-sass（编译Sass）\ngulp-load-plugins  \ngulp-uglify （JS压缩）\ngulp-livereload（自动刷新）\nopen\n</code></pre><p>比如说：</p>\n<pre><code>npm i --save--dev gulp-clean\n</code></pre><p>如果你不想一个个安装，有个批量安装的小窍门：</p>\n<pre><code>npm i --save--dev gulp-clean gulp-concat gulp-connect ...\n</code></pre><p>各个模块之间以空格隔开。<br>安装好之后呢，我们在package.json文件里可以看到这些依赖插件</p>\n<p>5.进行配置<br>在webapp项目根目录下，新建gulpfile.js文件，在文件中写入如下配置代码：</p>\n<pre><code>var gulp = require(&apos;gulp&apos;);          //引入模块\nvar $ = require(&apos;gulp-load-plugins&apos;);  //有了这个模块，其他的模块可以以$符号引入\nvar open = require(&apos;open&apos;);         //引入open\n\nvar app = {//声明一个全局变量，定义项目的路径\n    srcPath : &apos;src/&apos;,      //源文件\n    devPath : &apos;build/&apos;,   //开发环境--整合之后的路径\n    prdPath : &apos;dist/&apos;     //生成部署\n};\n</code></pre><p>6.拷贝命令<br>定义任务的API，第二个参数是一个回调函数，在回调函数里我们写入逻辑操作代码</p>\n<pre><code>gulp.task(&apos;任务名&apos;,function () {\n    gulp.路径(路径)        //读取文件\n    .pipe(...操作文件)\n    .pipe(gulp.dest(目录))    //生成文件\n})\n</code></pre><h2 id=\"二．使用\"><a href=\"#二．使用\" class=\"headerlink\" title=\"二．使用\"></a>二．使用</h2><p>应用实例：<br>1.拷贝HTML：<br>a.新建文件夹src存放源代码</p>\n<p>b.新建完之后，我们在gulpfile.js文件下敲入如下代码进行拷贝html：（前提之前已配置好各个路径）</p>\n<pre><code>gulp.task(&apos;html&apos;,function () {\n    gulp.src(app.srcPath + &apos;**/*.html&apos;)\n    .pipe(gulp.dest(app.devPath))  //pipe是一个API  写文件的API--dest 拷贝到app.devPath + &apos;vendeor&apos;\n    .pipe(gulp.dest(app.prdPath))     //生成\n    .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n})\n</code></pre><p>c.可以测试下，命令行打开，在项目路径下，输入</p>\n<pre><code>gulp html\n</code></pre><p>d.执行成功后可以看到项目文件下生成了新的文件夹build</p>\n<p>2.拷贝第三方依赖库lib：前提是安装好bower并且用bower安装了第三方依赖文件（本例使用Bower安装了Angular，在bower_componets文件下）<br>题外话：全局安装bower：</p>\n<pre><code>npm install bower -g\n</code></pre><p>Bower安装第三方依赖Angular:</p>\n<pre><code>bower install --save angular\n</code></pre><p>开始拷贝JS：<br>a.在gulpfile.js文件下敲入如下代码进行拷贝js：（前提之前已配置好各个路径）</p>\n<pre><code>gulp.task(&apos;lib&apos;,function () {\n    gulp.src(&apos;bower_components/**/*.js&apos;)\n    .pipe(gulp.dest(app.devPath + &apos;vendor&apos;))\n    .pipe(gulp.dest(app.prdPath + &apos;vendor&apos;))\n    .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n})\n</code></pre><p>b.命令行进入项目路径，执行命令：</p>\n<pre><code>gulp lib\n</code></pre><p>c.如果在build目录下生成vendor文件夹及其angular文件，表示成功。</p>\n<p>3.拷贝CSS<br>a.src目录新建目录style，新建文件index.less和1.less，在两个文件编写测试代码。</p>\n<p>b.然后在gulpfile.js文件新建任务：</p>\n<pre><code>gulp.task(&apos;less&apos;,function () {\n    gulp.src(app.srcPath + &apos;style/index.less&apos;)\n        .pipe($.less())                     //别忘了less后的括号\n        .pipe(gulp.dest(app.devPath + &apos;css&apos;))\n        .pipe($.cssmin())                  //压缩\n        .pipe(gulp.dest(app.prdPath + &apos;css&apos;))\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n});\n</code></pre><p>c.运行，在命令行输入</p>\n<pre><code>gulp less\n</code></pre><p>4.拷贝JS<br>同样的套路：<br>a.src下新建目录script，在script里新建文件1.js和2.js，随便写点测试代码。</p>\n<p>b.新建gulp任务：<br>在gulpfile.js文件下添加如下一段代码即可：</p>\n<pre><code>gulp.task(&apos;js&apos;,function () {\n    gulp.src(app.srcPath + &apos;script/**/*.js&apos;)\n        .pipe($.concat(&apos;index.js&apos;))            //生成\n        .pipe(gulp.dest(app.devPath + &apos;js&apos;))    //写入开发环境\n        .pipe($.uglify())                    //压缩\n        .pipe(gulp.dest(app.prdPath + &apos;js&apos;))    //部署到生产环境\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n});\n</code></pre><p>c.运行<br>在命令行输入：</p>\n<pre><code>gulp js\n</code></pre><p>d.查看运行结果，在生产环境dist目录下生成js文件夹及其index.js文件。</p>\n<p>5.拷贝image<br>套路是一样的啊，<br>a.在src里新建image目录，在该目录里新建一张图片，比如1.png<br>b.新建gulp任务，在gulpfile.js文件下添加如下代码：</p>\n<pre><code>gulp.task(&apos;image&apos;,function () {\n    gulp.src(app.srcPath + &apos;image/**/*&apos;)           //读取文件\n        .pipe(gulp.dest(app.devPath + &apos;image&apos;))        //拷贝到开发环境\n        .pipe($.imagemin())                     //压缩图片\n        .pipe(gulp.dest(app.prdPath + &apos;image&apos;))    //部署到生产环境\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n});\n</code></pre><p>c.项目路径下运行下：</p>\n<pre><code>gulp image\n</code></pre><p>d.查看运行结果，在生产环境目录dist里生产image目录及其文件</p>\n<p>6.在我们部署到生产环境之后，往往需要清除build和dist 目录，避免出现旧的影响新的。这时候就需要新建一个清除任务：<br>在gulpfile.js文件下添加如下代码块：</p>\n<pre><code>gulp.task(&apos;clean&apos;,function () {  //清除\n    gulp.src([app.devPath,app.prdPath]) //要删除目录\n    .pipe($.clean());\n});\n</code></pre><p>运行：</p>\n<pre><code>gulp clean\n</code></pre><p>7新建gulp总任务。在我们真正部署的时候，往往通过新建一个gulp总任务来执行之前的所有打包压缩任务，减少繁琐操作，代码如下：</p>\n<pre><code>gulp.task(&apos;build&apos;,[&apos;image&apos;,&apos;js&apos;,&apos;less&apos;,&apos;lib&apos;,&apos;html&apos;,&apos;json&apos;]);  //总任务  执行gulp build即可\n</code></pre><p>运行：</p>\n<pre><code>gulp build\n</code></pre><p>8新建服务—-自动化启动总任务build和服务器<br>在gulpfile.js文件下，敲入如下新建服务代码：</p>\n<pre><code>//新建服务\ngulp.task(&apos;serve&apos;,[&apos;build&apos;],function () {\n    $.connect.server({        //启动一个服务器\n        root:[app.devPath],   //从开发目录下读取\n        livereload:true,      //自动刷新浏览器，ie不支持\n        port:1234           //端口\n    });\n    open(&apos;http://localhost:1234&apos;);   //自动打开网址，打开浏览器\n\n    //监听\n    gulp.watch(&apos;bower_components/**/*&apos;,[&apos;lib&apos;]);\n    gulp.watch(app.srcPath + &apos;**/*.html&apos;,[&apos;html&apos;]);\n    gulp.watch(app.srcPath + &apos;data/**/*.json&apos;,[&apos;json&apos;]);\n    gulp.watch(app.srcPath + &apos;style/**/*.less&apos;,[&apos;less&apos;]);\n    gulp.watch(app.srcPath + &apos;script/**/*.js&apos;,[&apos;js&apos;]);\n    gulp.watch(app.srcPath + &apos;image/**/*&apos;,[&apos;image&apos;]);\n});\n</code></pre><p>8.1有一个小技能，我们可以新建一个gulp默认任务，让它运行gulp的时候自动启动服务serve：</p>\n<pre><code>//建立默认启动任务\ngulp.task(&apos;default&apos;,[&apos;serve&apos;]);//default 依赖serve\n</code></pre><p>可以测试一下，命令行敲入：</p>\n<pre><code>gulp\n</code></pre><p>然后等待运行结束，浏览器会自动打开网址：<a href=\"http://localhost:1234/\" target=\"_blank\" rel=\"noopener\">http://localhost:1234/</a><br>你可以在src目录下的index.html页面敲入代码：hello world!<br>此时你会发现网页自动刷新了</p>\n<p>当一个程序员打出hello world时就像中乐透一样哈哈:)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>介绍：这篇文章总结了使用gulp构建一个项目的详细过程。包括开发环境搭建，构建项目并用于生产部署。  </p>\n<p>gulp自动化构建工具具备以下特点：<br>基于流、任务化<br>常用API：src、dest、watch、task、pipe</p>\n<h2 id=\"一．安装\"><a href=\"#一．安装\" class=\"headerlink\" title=\"一．安装\"></a>一．安装</h2><p>1.安装gulp：(注意这里默认大家已经安装了npm和nodejs)<br>新建项目文件，cmd切换到项目目录下，这里我新建了项目文件webapp  </p>\n<p>安装全局gulp：</p>\n<pre><code>npm i -g gulp\n</code></pre><p>2.接下来安装node依赖文件<br>首先用npm初始化项目配置文件：</p>\n<pre><code>npm init\n</code></pre><p>然后命令行一直回车就行，配置文件之后可以更改</p>\n<p>3.作为项目的开发依赖（devDependencies）安装：在当前目录安装gulp<br>在当前目录安装gulp:</p>\n<pre><code>npm i --save-dev gulp\n</code></pre><p>–save-dev的意思是将当前文件保存到配置文件当中，nodejs模块保存到packge.json文件当中，当我们需要项目保存到git仓库的时候，只需要保存packge.json文件到git仓库就行。当别人需要编译你的项目，只要npm i就可以拿到你的项目配置信息。</p>\n<p>我们可以看下package.json文件：在依赖模块添加了gulp信息</p>\n<p>然后我们看项目文件夹webapp的node_modules文件下多了个gulp文件夹，这个就是我们刚添加的gulp模块</p>\n<p>4.扩展插件–在当前项目文件webapp目录下，安装gulp依赖文件。<br>安装命令：</p>\n<pre><code>npm i --save--dev 插件名称\n</code></pre><p>需要安装的gulp插件：</p>\n<pre><code>gulp-clean  \ngulp-concat（文件合并）  \ngulp-connect  \ngulp-minify-html（html压缩）  \ngulp-minify-css（CSS压缩）\ngulp-cssmin（CSS压缩）（任选一个）  \ngulp-jshint（JS代码检查）\ngulp-imagemin（压缩图片）  \ngulp-less（编译Less）    \ngulp-sass（编译Sass）\ngulp-load-plugins  \ngulp-uglify （JS压缩）\ngulp-livereload（自动刷新）\nopen\n</code></pre><p>比如说：</p>\n<pre><code>npm i --save--dev gulp-clean\n</code></pre><p>如果你不想一个个安装，有个批量安装的小窍门：</p>\n<pre><code>npm i --save--dev gulp-clean gulp-concat gulp-connect ...\n</code></pre><p>各个模块之间以空格隔开。<br>安装好之后呢，我们在package.json文件里可以看到这些依赖插件</p>\n<p>5.进行配置<br>在webapp项目根目录下，新建gulpfile.js文件，在文件中写入如下配置代码：</p>\n<pre><code>var gulp = require(&apos;gulp&apos;);          //引入模块\nvar $ = require(&apos;gulp-load-plugins&apos;);  //有了这个模块，其他的模块可以以$符号引入\nvar open = require(&apos;open&apos;);         //引入open\n\nvar app = {//声明一个全局变量，定义项目的路径\n    srcPath : &apos;src/&apos;,      //源文件\n    devPath : &apos;build/&apos;,   //开发环境--整合之后的路径\n    prdPath : &apos;dist/&apos;     //生成部署\n};\n</code></pre><p>6.拷贝命令<br>定义任务的API，第二个参数是一个回调函数，在回调函数里我们写入逻辑操作代码</p>\n<pre><code>gulp.task(&apos;任务名&apos;,function () {\n    gulp.路径(路径)        //读取文件\n    .pipe(...操作文件)\n    .pipe(gulp.dest(目录))    //生成文件\n})\n</code></pre><h2 id=\"二．使用\"><a href=\"#二．使用\" class=\"headerlink\" title=\"二．使用\"></a>二．使用</h2><p>应用实例：<br>1.拷贝HTML：<br>a.新建文件夹src存放源代码</p>\n<p>b.新建完之后，我们在gulpfile.js文件下敲入如下代码进行拷贝html：（前提之前已配置好各个路径）</p>\n<pre><code>gulp.task(&apos;html&apos;,function () {\n    gulp.src(app.srcPath + &apos;**/*.html&apos;)\n    .pipe(gulp.dest(app.devPath))  //pipe是一个API  写文件的API--dest 拷贝到app.devPath + &apos;vendeor&apos;\n    .pipe(gulp.dest(app.prdPath))     //生成\n    .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n})\n</code></pre><p>c.可以测试下，命令行打开，在项目路径下，输入</p>\n<pre><code>gulp html\n</code></pre><p>d.执行成功后可以看到项目文件下生成了新的文件夹build</p>\n<p>2.拷贝第三方依赖库lib：前提是安装好bower并且用bower安装了第三方依赖文件（本例使用Bower安装了Angular，在bower_componets文件下）<br>题外话：全局安装bower：</p>\n<pre><code>npm install bower -g\n</code></pre><p>Bower安装第三方依赖Angular:</p>\n<pre><code>bower install --save angular\n</code></pre><p>开始拷贝JS：<br>a.在gulpfile.js文件下敲入如下代码进行拷贝js：（前提之前已配置好各个路径）</p>\n<pre><code>gulp.task(&apos;lib&apos;,function () {\n    gulp.src(&apos;bower_components/**/*.js&apos;)\n    .pipe(gulp.dest(app.devPath + &apos;vendor&apos;))\n    .pipe(gulp.dest(app.prdPath + &apos;vendor&apos;))\n    .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n})\n</code></pre><p>b.命令行进入项目路径，执行命令：</p>\n<pre><code>gulp lib\n</code></pre><p>c.如果在build目录下生成vendor文件夹及其angular文件，表示成功。</p>\n<p>3.拷贝CSS<br>a.src目录新建目录style，新建文件index.less和1.less，在两个文件编写测试代码。</p>\n<p>b.然后在gulpfile.js文件新建任务：</p>\n<pre><code>gulp.task(&apos;less&apos;,function () {\n    gulp.src(app.srcPath + &apos;style/index.less&apos;)\n        .pipe($.less())                     //别忘了less后的括号\n        .pipe(gulp.dest(app.devPath + &apos;css&apos;))\n        .pipe($.cssmin())                  //压缩\n        .pipe(gulp.dest(app.prdPath + &apos;css&apos;))\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n});\n</code></pre><p>c.运行，在命令行输入</p>\n<pre><code>gulp less\n</code></pre><p>4.拷贝JS<br>同样的套路：<br>a.src下新建目录script，在script里新建文件1.js和2.js，随便写点测试代码。</p>\n<p>b.新建gulp任务：<br>在gulpfile.js文件下添加如下一段代码即可：</p>\n<pre><code>gulp.task(&apos;js&apos;,function () {\n    gulp.src(app.srcPath + &apos;script/**/*.js&apos;)\n        .pipe($.concat(&apos;index.js&apos;))            //生成\n        .pipe(gulp.dest(app.devPath + &apos;js&apos;))    //写入开发环境\n        .pipe($.uglify())                    //压缩\n        .pipe(gulp.dest(app.prdPath + &apos;js&apos;))    //部署到生产环境\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n});\n</code></pre><p>c.运行<br>在命令行输入：</p>\n<pre><code>gulp js\n</code></pre><p>d.查看运行结果，在生产环境dist目录下生成js文件夹及其index.js文件。</p>\n<p>5.拷贝image<br>套路是一样的啊，<br>a.在src里新建image目录，在该目录里新建一张图片，比如1.png<br>b.新建gulp任务，在gulpfile.js文件下添加如下代码：</p>\n<pre><code>gulp.task(&apos;image&apos;,function () {\n    gulp.src(app.srcPath + &apos;image/**/*&apos;)           //读取文件\n        .pipe(gulp.dest(app.devPath + &apos;image&apos;))        //拷贝到开发环境\n        .pipe($.imagemin())                     //压缩图片\n        .pipe(gulp.dest(app.prdPath + &apos;image&apos;))    //部署到生产环境\n        .pipe($.connect.reload());//通知服务器刷新浏览器，ie8不支持\n});\n</code></pre><p>c.项目路径下运行下：</p>\n<pre><code>gulp image\n</code></pre><p>d.查看运行结果，在生产环境目录dist里生产image目录及其文件</p>\n<p>6.在我们部署到生产环境之后，往往需要清除build和dist 目录，避免出现旧的影响新的。这时候就需要新建一个清除任务：<br>在gulpfile.js文件下添加如下代码块：</p>\n<pre><code>gulp.task(&apos;clean&apos;,function () {  //清除\n    gulp.src([app.devPath,app.prdPath]) //要删除目录\n    .pipe($.clean());\n});\n</code></pre><p>运行：</p>\n<pre><code>gulp clean\n</code></pre><p>7新建gulp总任务。在我们真正部署的时候，往往通过新建一个gulp总任务来执行之前的所有打包压缩任务，减少繁琐操作，代码如下：</p>\n<pre><code>gulp.task(&apos;build&apos;,[&apos;image&apos;,&apos;js&apos;,&apos;less&apos;,&apos;lib&apos;,&apos;html&apos;,&apos;json&apos;]);  //总任务  执行gulp build即可\n</code></pre><p>运行：</p>\n<pre><code>gulp build\n</code></pre><p>8新建服务—-自动化启动总任务build和服务器<br>在gulpfile.js文件下，敲入如下新建服务代码：</p>\n<pre><code>//新建服务\ngulp.task(&apos;serve&apos;,[&apos;build&apos;],function () {\n    $.connect.server({        //启动一个服务器\n        root:[app.devPath],   //从开发目录下读取\n        livereload:true,      //自动刷新浏览器，ie不支持\n        port:1234           //端口\n    });\n    open(&apos;http://localhost:1234&apos;);   //自动打开网址，打开浏览器\n\n    //监听\n    gulp.watch(&apos;bower_components/**/*&apos;,[&apos;lib&apos;]);\n    gulp.watch(app.srcPath + &apos;**/*.html&apos;,[&apos;html&apos;]);\n    gulp.watch(app.srcPath + &apos;data/**/*.json&apos;,[&apos;json&apos;]);\n    gulp.watch(app.srcPath + &apos;style/**/*.less&apos;,[&apos;less&apos;]);\n    gulp.watch(app.srcPath + &apos;script/**/*.js&apos;,[&apos;js&apos;]);\n    gulp.watch(app.srcPath + &apos;image/**/*&apos;,[&apos;image&apos;]);\n});\n</code></pre><p>8.1有一个小技能，我们可以新建一个gulp默认任务，让它运行gulp的时候自动启动服务serve：</p>\n<pre><code>//建立默认启动任务\ngulp.task(&apos;default&apos;,[&apos;serve&apos;]);//default 依赖serve\n</code></pre><p>可以测试一下，命令行敲入：</p>\n<pre><code>gulp\n</code></pre><p>然后等待运行结束，浏览器会自动打开网址：<a href=\"http://localhost:1234/\" target=\"_blank\" rel=\"noopener\">http://localhost:1234/</a><br>你可以在src目录下的index.html页面敲入代码：hello world!<br>此时你会发现网页自动刷新了</p>\n<p>当一个程序员打出hello world时就像中乐透一样哈哈:)</p>\n"},{"title":"gulp使用","date":"2017-07-20T02:05:20.000Z","_content":"\ngulp是基于流的自动化构建工具，对代码进行打包压缩和管理，提供简单的API就能实现对复杂代码的管理，并且提供很多插件，大大提高了开发效率。\n\n安装\n----\n前提是已安装好node.js,查看[node.js]()安装\n\n全局安装命令\n\n    npm install gulp -g  \n\n-g代表全局安装gulp，这样在你所有的项目下都可以使用gulp\n\n作为项目开发依赖安装命令  \n\n    npm install --save-dev gulp  \n\n--save-dev代表gulp将作为项目开发依赖安装，会在项目的package.js文件里添加gulp安装信息\n\n使用\n----\n在项目根目录下新建gulpfile.js文件，在文件里配置如下：\n\n    var gulp = require('gulp');\n\n    gulp.task('default',function(){\n      ...\n    });\n\n    gulp.task('taskname',function(){\n      ...\n    });\n\n\nrequire引入gulp，之后就可以调用task()方法创建任务，进行管理。\ntask的第一个参数是任务名，当运行gulp时，默认执行default任务；task的第二个参数是一个函数，定义该任务要执行的一些操作。\n\n运行\n----\n在命令行敲入命令：\n\n    $ gulp\n\n几种常用插件\n----\ngulp-uglify是用来压缩JS文件的   \n安装\n\n    npm install --save-dev gulp-uglify  \n\n使用    \n在gulpfile.js文件进行配置如下:   \n\n    var uglify = require('gulp-uglify');\n\n    gulp.task('uglify',function){\n      gulp.src('src/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('dist'))\n    });\n\ngulp.src('文件路径')，将输出匹配路径的文件，并pipe到下一个插件中。*.js将匹配所有.js文件；src/**/*.js将匹配src所有深度下的所有.js文件。   \ngulp.dest('目标文件路径')，将打包好的文件输出到目标路径下。\n\ngulp-cssmin用来压缩css文件      \n安装    \n\n    npm install --save-dev gulp-cssmin\n\n使用   \n在gulpfile.js文件进行配置如下：\n\n    var cssmin = require('gulp-cssmin');\n\n    gulp.task('cssmin',function(){\n      console.log('cssmin');\n      gulp.src('src/css/**/*.css')\n       .pipe(cssmin())\n       .pipe(gulp.dest('dist/css'))；\n    });\n\n  这里将匹配src/css目录下的所有.css文件，用pipe()实现基于流的输出管理。   \n\n  gulp-html-minify压缩html文件    \n  安装    \n\n      npm install --save-dev gulp-html-minify\n\n使用    \n在gulpfile.js文件进行配置如下：\n\n    var htmlmin = require('gulp-html-minify');\n    gulp.task('html',function(){\n        gulp.src('src/**/*.js')\n            .pipe(htmlmin())\n            .pipe(gulp.dest('dist'));\n    })\n\ngulp-less将less文件编译成css文件    \n安装    \n\n    npm install --save-dev gulp-less    \n\n使用    \n在gulpfile.js文件配置如下：    \n\n    var less = require('gulp-less');\n    gulp.task('less',function(){\n        gulp.src('src/**/*.less')\n            .pipe(less())\n            .pipe(cssmin())\n            .pipe(gulp.dest('dist'));\n    });      \n\ngulp-sass用来编译sass文件为css文件  \n安装  \n\n    npm install --save-dev gulp-sass  \n\n使用  \n在gulpfile.js文件配置如下：  \n\n    var sass = require('gulp-sass');\n    gulp.task('sass',function(){\n       gulp.src('src/**/*.scss')\n           .pipe(sass())\n           .pipe(cssmin())\n           .pipe(gulp.dest('dist/css'));\n    });  \n","source":"_posts/gulp-use.md","raw":"---\ntitle: gulp使用\ndate: 2017-07-20 10:05:20\ntags:\n---\n\ngulp是基于流的自动化构建工具，对代码进行打包压缩和管理，提供简单的API就能实现对复杂代码的管理，并且提供很多插件，大大提高了开发效率。\n\n安装\n----\n前提是已安装好node.js,查看[node.js]()安装\n\n全局安装命令\n\n    npm install gulp -g  \n\n-g代表全局安装gulp，这样在你所有的项目下都可以使用gulp\n\n作为项目开发依赖安装命令  \n\n    npm install --save-dev gulp  \n\n--save-dev代表gulp将作为项目开发依赖安装，会在项目的package.js文件里添加gulp安装信息\n\n使用\n----\n在项目根目录下新建gulpfile.js文件，在文件里配置如下：\n\n    var gulp = require('gulp');\n\n    gulp.task('default',function(){\n      ...\n    });\n\n    gulp.task('taskname',function(){\n      ...\n    });\n\n\nrequire引入gulp，之后就可以调用task()方法创建任务，进行管理。\ntask的第一个参数是任务名，当运行gulp时，默认执行default任务；task的第二个参数是一个函数，定义该任务要执行的一些操作。\n\n运行\n----\n在命令行敲入命令：\n\n    $ gulp\n\n几种常用插件\n----\ngulp-uglify是用来压缩JS文件的   \n安装\n\n    npm install --save-dev gulp-uglify  \n\n使用    \n在gulpfile.js文件进行配置如下:   \n\n    var uglify = require('gulp-uglify');\n\n    gulp.task('uglify',function){\n      gulp.src('src/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('dist'))\n    });\n\ngulp.src('文件路径')，将输出匹配路径的文件，并pipe到下一个插件中。*.js将匹配所有.js文件；src/**/*.js将匹配src所有深度下的所有.js文件。   \ngulp.dest('目标文件路径')，将打包好的文件输出到目标路径下。\n\ngulp-cssmin用来压缩css文件      \n安装    \n\n    npm install --save-dev gulp-cssmin\n\n使用   \n在gulpfile.js文件进行配置如下：\n\n    var cssmin = require('gulp-cssmin');\n\n    gulp.task('cssmin',function(){\n      console.log('cssmin');\n      gulp.src('src/css/**/*.css')\n       .pipe(cssmin())\n       .pipe(gulp.dest('dist/css'))；\n    });\n\n  这里将匹配src/css目录下的所有.css文件，用pipe()实现基于流的输出管理。   \n\n  gulp-html-minify压缩html文件    \n  安装    \n\n      npm install --save-dev gulp-html-minify\n\n使用    \n在gulpfile.js文件进行配置如下：\n\n    var htmlmin = require('gulp-html-minify');\n    gulp.task('html',function(){\n        gulp.src('src/**/*.js')\n            .pipe(htmlmin())\n            .pipe(gulp.dest('dist'));\n    })\n\ngulp-less将less文件编译成css文件    \n安装    \n\n    npm install --save-dev gulp-less    \n\n使用    \n在gulpfile.js文件配置如下：    \n\n    var less = require('gulp-less');\n    gulp.task('less',function(){\n        gulp.src('src/**/*.less')\n            .pipe(less())\n            .pipe(cssmin())\n            .pipe(gulp.dest('dist'));\n    });      \n\ngulp-sass用来编译sass文件为css文件  \n安装  \n\n    npm install --save-dev gulp-sass  \n\n使用  \n在gulpfile.js文件配置如下：  \n\n    var sass = require('gulp-sass');\n    gulp.task('sass',function(){\n       gulp.src('src/**/*.scss')\n           .pipe(sass())\n           .pipe(cssmin())\n           .pipe(gulp.dest('dist/css'));\n    });  \n","slug":"gulp-use","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi8000lmo01m2xllf65","content":"<p>gulp是基于流的自动化构建工具，对代码进行打包压缩和管理，提供简单的API就能实现对复杂代码的管理，并且提供很多插件，大大提高了开发效率。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前提是已安装好node.js,查看<a href=\"\">node.js</a>安装</p>\n<p>全局安装命令</p>\n<pre><code>npm install gulp -g  \n</code></pre><p>-g代表全局安装gulp，这样在你所有的项目下都可以使用gulp</p>\n<p>作为项目开发依赖安装命令  </p>\n<pre><code>npm install --save-dev gulp  \n</code></pre><p>–save-dev代表gulp将作为项目开发依赖安装，会在项目的package.js文件里添加gulp安装信息</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在项目根目录下新建gulpfile.js文件，在文件里配置如下：</p>\n<pre><code>var gulp = require(&apos;gulp&apos;);\n\ngulp.task(&apos;default&apos;,function(){\n  ...\n});\n\ngulp.task(&apos;taskname&apos;,function(){\n  ...\n});\n</code></pre><p>require引入gulp，之后就可以调用task()方法创建任务，进行管理。<br>task的第一个参数是任务名，当运行gulp时，默认执行default任务；task的第二个参数是一个函数，定义该任务要执行的一些操作。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>在命令行敲入命令：</p>\n<pre><code>$ gulp\n</code></pre><h2 id=\"几种常用插件\"><a href=\"#几种常用插件\" class=\"headerlink\" title=\"几种常用插件\"></a>几种常用插件</h2><p>gulp-uglify是用来压缩JS文件的<br>安装</p>\n<pre><code>npm install --save-dev gulp-uglify  \n</code></pre><p>使用<br>在gulpfile.js文件进行配置如下:   </p>\n<pre><code>var uglify = require(&apos;gulp-uglify&apos;);\n\ngulp.task(&apos;uglify&apos;,function){\n  gulp.src(&apos;src/*.js&apos;)\n    .pipe(uglify())\n    .pipe(gulp.dest(&apos;dist&apos;))\n});\n</code></pre><p>gulp.src(‘文件路径’)，将输出匹配路径的文件，并pipe到下一个插件中。<em>.js将匹配所有.js文件；src/**/</em>.js将匹配src所有深度下的所有.js文件。<br>gulp.dest(‘目标文件路径’)，将打包好的文件输出到目标路径下。</p>\n<p>gulp-cssmin用来压缩css文件<br>安装    </p>\n<pre><code>npm install --save-dev gulp-cssmin\n</code></pre><p>使用<br>在gulpfile.js文件进行配置如下：</p>\n<pre><code>var cssmin = require(&apos;gulp-cssmin&apos;);\n\ngulp.task(&apos;cssmin&apos;,function(){\n  console.log(&apos;cssmin&apos;);\n  gulp.src(&apos;src/css/**/*.css&apos;)\n   .pipe(cssmin())\n   .pipe(gulp.dest(&apos;dist/css&apos;))；\n});\n</code></pre><p>  这里将匹配src/css目录下的所有.css文件，用pipe()实现基于流的输出管理。   </p>\n<p>  gulp-html-minify压缩html文件<br>  安装    </p>\n<pre><code>npm install --save-dev gulp-html-minify\n</code></pre><p>使用<br>在gulpfile.js文件进行配置如下：</p>\n<pre><code>var htmlmin = require(&apos;gulp-html-minify&apos;);\ngulp.task(&apos;html&apos;,function(){\n    gulp.src(&apos;src/**/*.js&apos;)\n        .pipe(htmlmin())\n        .pipe(gulp.dest(&apos;dist&apos;));\n})\n</code></pre><p>gulp-less将less文件编译成css文件<br>安装    </p>\n<pre><code>npm install --save-dev gulp-less    \n</code></pre><p>使用<br>在gulpfile.js文件配置如下：    </p>\n<pre><code>var less = require(&apos;gulp-less&apos;);\ngulp.task(&apos;less&apos;,function(){\n    gulp.src(&apos;src/**/*.less&apos;)\n        .pipe(less())\n        .pipe(cssmin())\n        .pipe(gulp.dest(&apos;dist&apos;));\n});      \n</code></pre><p>gulp-sass用来编译sass文件为css文件<br>安装  </p>\n<pre><code>npm install --save-dev gulp-sass  \n</code></pre><p>使用<br>在gulpfile.js文件配置如下：  </p>\n<pre><code>var sass = require(&apos;gulp-sass&apos;);\ngulp.task(&apos;sass&apos;,function(){\n   gulp.src(&apos;src/**/*.scss&apos;)\n       .pipe(sass())\n       .pipe(cssmin())\n       .pipe(gulp.dest(&apos;dist/css&apos;));\n});  \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>gulp是基于流的自动化构建工具，对代码进行打包压缩和管理，提供简单的API就能实现对复杂代码的管理，并且提供很多插件，大大提高了开发效率。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前提是已安装好node.js,查看<a href=\"\">node.js</a>安装</p>\n<p>全局安装命令</p>\n<pre><code>npm install gulp -g  \n</code></pre><p>-g代表全局安装gulp，这样在你所有的项目下都可以使用gulp</p>\n<p>作为项目开发依赖安装命令  </p>\n<pre><code>npm install --save-dev gulp  \n</code></pre><p>–save-dev代表gulp将作为项目开发依赖安装，会在项目的package.js文件里添加gulp安装信息</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在项目根目录下新建gulpfile.js文件，在文件里配置如下：</p>\n<pre><code>var gulp = require(&apos;gulp&apos;);\n\ngulp.task(&apos;default&apos;,function(){\n  ...\n});\n\ngulp.task(&apos;taskname&apos;,function(){\n  ...\n});\n</code></pre><p>require引入gulp，之后就可以调用task()方法创建任务，进行管理。<br>task的第一个参数是任务名，当运行gulp时，默认执行default任务；task的第二个参数是一个函数，定义该任务要执行的一些操作。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>在命令行敲入命令：</p>\n<pre><code>$ gulp\n</code></pre><h2 id=\"几种常用插件\"><a href=\"#几种常用插件\" class=\"headerlink\" title=\"几种常用插件\"></a>几种常用插件</h2><p>gulp-uglify是用来压缩JS文件的<br>安装</p>\n<pre><code>npm install --save-dev gulp-uglify  \n</code></pre><p>使用<br>在gulpfile.js文件进行配置如下:   </p>\n<pre><code>var uglify = require(&apos;gulp-uglify&apos;);\n\ngulp.task(&apos;uglify&apos;,function){\n  gulp.src(&apos;src/*.js&apos;)\n    .pipe(uglify())\n    .pipe(gulp.dest(&apos;dist&apos;))\n});\n</code></pre><p>gulp.src(‘文件路径’)，将输出匹配路径的文件，并pipe到下一个插件中。<em>.js将匹配所有.js文件；src/**/</em>.js将匹配src所有深度下的所有.js文件。<br>gulp.dest(‘目标文件路径’)，将打包好的文件输出到目标路径下。</p>\n<p>gulp-cssmin用来压缩css文件<br>安装    </p>\n<pre><code>npm install --save-dev gulp-cssmin\n</code></pre><p>使用<br>在gulpfile.js文件进行配置如下：</p>\n<pre><code>var cssmin = require(&apos;gulp-cssmin&apos;);\n\ngulp.task(&apos;cssmin&apos;,function(){\n  console.log(&apos;cssmin&apos;);\n  gulp.src(&apos;src/css/**/*.css&apos;)\n   .pipe(cssmin())\n   .pipe(gulp.dest(&apos;dist/css&apos;))；\n});\n</code></pre><p>  这里将匹配src/css目录下的所有.css文件，用pipe()实现基于流的输出管理。   </p>\n<p>  gulp-html-minify压缩html文件<br>  安装    </p>\n<pre><code>npm install --save-dev gulp-html-minify\n</code></pre><p>使用<br>在gulpfile.js文件进行配置如下：</p>\n<pre><code>var htmlmin = require(&apos;gulp-html-minify&apos;);\ngulp.task(&apos;html&apos;,function(){\n    gulp.src(&apos;src/**/*.js&apos;)\n        .pipe(htmlmin())\n        .pipe(gulp.dest(&apos;dist&apos;));\n})\n</code></pre><p>gulp-less将less文件编译成css文件<br>安装    </p>\n<pre><code>npm install --save-dev gulp-less    \n</code></pre><p>使用<br>在gulpfile.js文件配置如下：    </p>\n<pre><code>var less = require(&apos;gulp-less&apos;);\ngulp.task(&apos;less&apos;,function(){\n    gulp.src(&apos;src/**/*.less&apos;)\n        .pipe(less())\n        .pipe(cssmin())\n        .pipe(gulp.dest(&apos;dist&apos;));\n});      \n</code></pre><p>gulp-sass用来编译sass文件为css文件<br>安装  </p>\n<pre><code>npm install --save-dev gulp-sass  \n</code></pre><p>使用<br>在gulpfile.js文件配置如下：  </p>\n<pre><code>var sass = require(&apos;gulp-sass&apos;);\ngulp.task(&apos;sass&apos;,function(){\n   gulp.src(&apos;src/**/*.scss&apos;)\n       .pipe(sass())\n       .pipe(cssmin())\n       .pipe(gulp.dest(&apos;dist/css&apos;));\n});  \n</code></pre>"},{"title":"跨域解决方法-JSONP","date":"2017-10-24T12:47:22.000Z","_content":"\n  之前的文章谈到由于浏览器的同源策略，当请求不同源的资源时就会遇到跨域问题，今天尝试用jsonp来解决跨域问题。\n#### JSONP是什么  \n\nJSONP(JSON with Padding)是json的一种“使用模式”,可以让网页取得不同源上的资源数据，它不需要使用XMLHttpRequest对象，而是使用script标签来请求不同源的数据资源。  \n使用JSONP的关键是使用回调函数进行服务器和客户端的数据交互。来看下面的实例：\n#### 解决实例  \n在客户端，即html文件：\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>JSONP-demo</title>\n</head>\n<body>\n<p>test</p>\n<script>\n  function test(data){\n    let p = document.getElementsByTagName('p')[0];\n    p.innnerHTML = data;\n  }\n</script>\n<script src=\"http://localhost:3002?callback=test\"></script>\n<!--src里的问号？后的参数（callback=test)可以在3002端口页面中可以通过req.query.callback获取-->\n</body>\n</html>\n\n```\n在客户端起一个服务在3000端口（这里用express）：\n```js\n\nvar express = require('express'); // 引用express模块\nvar app = express();  // 创建一个简单的服务器\n\nvar requestPort = 3000;\n\napp.use(express.static(__dirname));\n\n```\n在3002端口页面，即服务器：\n```js\nvar express = require('express');\nvar app = express();\n\nvar responsePort = 3002;\n\napp.get('/',function(req,res){\n  var callbackName = req.query.callback;\n  res.send(callbackName + \"('hello jsonp!')\");\n})\n\n```\n#### 跨域解决方法\n##### [1.CORS（cross-origin resourse sharing)跨域资源共享](https://webharry.github.io/2017/10/23/CORS/)\n##### [2.JSONP](https://webharry.github.io/2017/10/24/JSONP/)\n##### 3.document.domain + iframe\n##### 4.window.name + iframe\n##### 5.postMessage\n##### [6.proxy](https://webharry.github.io/2017/10/23/proxy/)","source":"_posts/jsonp.md","raw":"---\ntitle: 跨域解决方法-JSONP\ndate: 2017-10-24 20:47:22\ntags:\n    - frontend\n    - JavaScript\n    - '构建生态'\n---\n\n  之前的文章谈到由于浏览器的同源策略，当请求不同源的资源时就会遇到跨域问题，今天尝试用jsonp来解决跨域问题。\n#### JSONP是什么  \n\nJSONP(JSON with Padding)是json的一种“使用模式”,可以让网页取得不同源上的资源数据，它不需要使用XMLHttpRequest对象，而是使用script标签来请求不同源的数据资源。  \n使用JSONP的关键是使用回调函数进行服务器和客户端的数据交互。来看下面的实例：\n#### 解决实例  \n在客户端，即html文件：\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>JSONP-demo</title>\n</head>\n<body>\n<p>test</p>\n<script>\n  function test(data){\n    let p = document.getElementsByTagName('p')[0];\n    p.innnerHTML = data;\n  }\n</script>\n<script src=\"http://localhost:3002?callback=test\"></script>\n<!--src里的问号？后的参数（callback=test)可以在3002端口页面中可以通过req.query.callback获取-->\n</body>\n</html>\n\n```\n在客户端起一个服务在3000端口（这里用express）：\n```js\n\nvar express = require('express'); // 引用express模块\nvar app = express();  // 创建一个简单的服务器\n\nvar requestPort = 3000;\n\napp.use(express.static(__dirname));\n\n```\n在3002端口页面，即服务器：\n```js\nvar express = require('express');\nvar app = express();\n\nvar responsePort = 3002;\n\napp.get('/',function(req,res){\n  var callbackName = req.query.callback;\n  res.send(callbackName + \"('hello jsonp!')\");\n})\n\n```\n#### 跨域解决方法\n##### [1.CORS（cross-origin resourse sharing)跨域资源共享](https://webharry.github.io/2017/10/23/CORS/)\n##### [2.JSONP](https://webharry.github.io/2017/10/24/JSONP/)\n##### 3.document.domain + iframe\n##### 4.window.name + iframe\n##### 5.postMessage\n##### [6.proxy](https://webharry.github.io/2017/10/23/proxy/)","slug":"jsonp","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi8000mmo01rzcmid3w","content":"<p>  之前的文章谈到由于浏览器的同源策略，当请求不同源的资源时就会遇到跨域问题，今天尝试用jsonp来解决跨域问题。</p>\n<h4 id=\"JSONP是什么\"><a href=\"#JSONP是什么\" class=\"headerlink\" title=\"JSONP是什么\"></a>JSONP是什么</h4><p>JSONP(JSON with Padding)是json的一种“使用模式”,可以让网页取得不同源上的资源数据，它不需要使用XMLHttpRequest对象，而是使用script标签来请求不同源的数据资源。<br>使用JSONP的关键是使用回调函数进行服务器和客户端的数据交互。来看下面的实例：</p>\n<h4 id=\"解决实例\"><a href=\"#解决实例\" class=\"headerlink\" title=\"解决实例\"></a>解决实例</h4><p>在客户端，即html文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP-demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    p.innnerHTML = data;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://localhost:3002?callback=test\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--src里的问号？后的参数（callback=test)可以在3002端口页面中可以通过req.query.callback获取--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在客户端起一个服务在3000端口（这里用express）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>); <span class=\"comment\">// 引用express模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();  <span class=\"comment\">// 创建一个简单的服务器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> requestPort = <span class=\"number\">3000</span>;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname));</div></pre></td></tr></table></figure></p>\n<p>在3002端口页面，即服务器：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> responsePort = <span class=\"number\">3002</span>;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> callbackName = req.query.callback;</div><div class=\"line\">  res.send(callbackName + <span class=\"string\">\"('hello jsonp!')\"</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"跨域解决方法\"><a href=\"#跨域解决方法\" class=\"headerlink\" title=\"跨域解决方法\"></a>跨域解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a><a href=\"https://webharry.github.io/2017/10/23/CORS/\">1.CORS（cross-origin resourse sharing)跨域资源共享</a></h5><h5 id=\"2-JSONP\"><a href=\"#2-JSONP\" class=\"headerlink\" title=\"2.JSONP\"></a><a href=\"https://webharry.github.io/2017/10/24/JSONP/\">2.JSONP</a></h5><h5 id=\"3-document-domain-iframe\"><a href=\"#3-document-domain-iframe\" class=\"headerlink\" title=\"3.document.domain + iframe\"></a>3.document.domain + iframe</h5><h5 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h5><h5 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5.postMessage\"></a>5.postMessage</h5><h5 id=\"6-proxy\"><a href=\"#6-proxy\" class=\"headerlink\" title=\"6.proxy\"></a><a href=\"https://webharry.github.io/2017/10/23/proxy/\">6.proxy</a></h5>","site":{"data":{}},"excerpt":"","more":"<p>  之前的文章谈到由于浏览器的同源策略，当请求不同源的资源时就会遇到跨域问题，今天尝试用jsonp来解决跨域问题。</p>\n<h4 id=\"JSONP是什么\"><a href=\"#JSONP是什么\" class=\"headerlink\" title=\"JSONP是什么\"></a>JSONP是什么</h4><p>JSONP(JSON with Padding)是json的一种“使用模式”,可以让网页取得不同源上的资源数据，它不需要使用XMLHttpRequest对象，而是使用script标签来请求不同源的数据资源。<br>使用JSONP的关键是使用回调函数进行服务器和客户端的数据交互。来看下面的实例：</p>\n<h4 id=\"解决实例\"><a href=\"#解决实例\" class=\"headerlink\" title=\"解决实例\"></a>解决实例</h4><p>在客户端，即html文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP-demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    p.innnerHTML = data;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://localhost:3002?callback=test\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--src里的问号？后的参数（callback=test)可以在3002端口页面中可以通过req.query.callback获取--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在客户端起一个服务在3000端口（这里用express）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>); <span class=\"comment\">// 引用express模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();  <span class=\"comment\">// 创建一个简单的服务器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> requestPort = <span class=\"number\">3000</span>;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname));</div></pre></td></tr></table></figure></p>\n<p>在3002端口页面，即服务器：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> responsePort = <span class=\"number\">3002</span>;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> callbackName = req.query.callback;</div><div class=\"line\">  res.send(callbackName + <span class=\"string\">\"('hello jsonp!')\"</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"跨域解决方法\"><a href=\"#跨域解决方法\" class=\"headerlink\" title=\"跨域解决方法\"></a>跨域解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a><a href=\"https://webharry.github.io/2017/10/23/CORS/\">1.CORS（cross-origin resourse sharing)跨域资源共享</a></h5><h5 id=\"2-JSONP\"><a href=\"#2-JSONP\" class=\"headerlink\" title=\"2.JSONP\"></a><a href=\"https://webharry.github.io/2017/10/24/JSONP/\">2.JSONP</a></h5><h5 id=\"3-document-domain-iframe\"><a href=\"#3-document-domain-iframe\" class=\"headerlink\" title=\"3.document.domain + iframe\"></a>3.document.domain + iframe</h5><h5 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h5><h5 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5.postMessage\"></a>5.postMessage</h5><h5 id=\"6-proxy\"><a href=\"#6-proxy\" class=\"headerlink\" title=\"6.proxy\"></a><a href=\"https://webharry.github.io/2017/10/23/proxy/\">6.proxy</a></h5>"},{"title":"less","date":"2017-03-11T06:50:17.000Z","_content":"**Less语言快速入门**\n\n**介绍：**Less是一门CSS预处理语言，它扩充了CSS语言，重点来了：它增加了诸如变量、混合（Mixins)、函数等功能，这让静态的CSS语言强大了有木有，方便制作主题（比如换肤）、扩充，更易维护。\n\n**使用：**\n\n**1.变量**\n\nLess允许使用变量事先定义一些通用样式，在需要的时候引入，特点就是按需自取，自助餐有木有。\n看下面栗子：\n\n\t//这里是一些简单的LESS语法\n\t@width:400px;\n\t@height:300px;\n\t@font_size:12px;\n\t@color:#ccc;\n\t@font-size:14px;\n\ttextarea {\n\t\twidth:@width;\n\t\theight:@height;\n\t\tfont-size:@font_size;\n\t}\n\t.test {\n\t  color:@color;\n\t  background-color:@color;\n\t  font-size:@font-size;\n\t}\nLess编译后的对应CSS：\n\n\ttextarea {\n\t  width: 400px;\n\t  height: 300px;\n\t  font-size: 12px;\n\t}\n\t.test {\n\t  color: #cccccc;\n\t  font-size: 14px;\n\t  background-color: #cccccc;\n\t}\n这里要注意，Less以‘@’符号作为开头来定义变量，就像JS里以var定义变量一样，且变量的值只能是属性值，不能是变量，比如说，我这样定义一个变量：\n\n\t@font:font-size;\n\t.test{\n\t@font:14px;  //这样做是不行的，less不会编译成功！\n\t}\n**2.后代选择器---可以嵌套**\n\n\t@color:#ccc;\n\n\n\tdiv {\n\t  color:@color;\n\t\tp{   //添加嵌套样式\n\t    \tcolor:@color;\n\t \t}\n\t  &:after{   //通过&添加伪类\n\t    color:#ddd;\n\t  }\n\t}\n\nLess编译后的CSS:\n\n\tdiv {\n\t  color: #cccccc;\n\t}\n\tdiv p {\n\t  color: #cccccc;\n\t}\n\tdiv:after {\n\t  color: #ddd;\n\t}\n\n这种方法也是比较常用的啦~小编我学会后就来推荐啦\n\n**3.文件引用**\n\n\t@import “文件名”;   //文件名可以是相对路径\n\n文件引用有两个常用方法：\n\n①将全局变量引入到样式类文件时，使用’@import “文件名.less”;‘语句引入即可\n\n②另一种常见用法是将初始化的Less文件引入，当需要样式类时，引入初始化Less文件即可。\n\n**4.混合（Mixins)**\n\n混合可以将已经写好的样式A引入到样式B,从而实现样式B对样式A所有属性的继承。\n\n\t.border-radius(@radius: 4px) {\n\t  -webkit-border-radius: @radius;\n\t  -moz-border-radius: @radius;\n\t  border-radius: @radius;\n\t}\n\t#form-box {\n\t  .border-radius;\n\t  div{\n\t    .border-radius(14px);\n\t  }\n\t}\n\nLess编译后的CSS：\n\n\t#form-box {\n\t  -webkit-border-radius: 4px;\n\t  -moz-border-radius: 4px;\n\t  border-radius: 4px;\n\t}\n\t#form-box div {\n\t  -webkit-border-radius: 14px;\n\t  -moz-border-radius: 14px;\n\t  border-radius: 14px;\n\t}\n\n这里提一个比较有意思的变量@arguments，它包含了所有传递进来的参数，如果不想一个个写参数就可以使用它。\n\n\t.margin (@top:0, @right:0, @bottom:0, @left:0) {\n\t  margin:@arguments;\n\t}\n\tdiv {\n\t  .margin(2px,5px);\n\t}\n\nLess编译后的CSS：\n\n\tdiv {\n\t  margin: 2px 5px 0 0;\n\t}\n**5.函数**\n\n\tdiv {\n\t  .fun(100px);  //引用函数\n\t}\n\t.fun(@px){  //函数声明和JS里的很像，括号加参数\n\t  width:@px;\n\t}\n\tLess编译成CSS：\n\tdiv {\n\t  width: 100px;\n\t}\n注意到没有，函数是不编译的\n","source":"_posts/less快速入门.md","raw":"---\ntitle: less\ndate: 2017-03-11 14:50:17\ntags:\n---\n**Less语言快速入门**\n\n**介绍：**Less是一门CSS预处理语言，它扩充了CSS语言，重点来了：它增加了诸如变量、混合（Mixins)、函数等功能，这让静态的CSS语言强大了有木有，方便制作主题（比如换肤）、扩充，更易维护。\n\n**使用：**\n\n**1.变量**\n\nLess允许使用变量事先定义一些通用样式，在需要的时候引入，特点就是按需自取，自助餐有木有。\n看下面栗子：\n\n\t//这里是一些简单的LESS语法\n\t@width:400px;\n\t@height:300px;\n\t@font_size:12px;\n\t@color:#ccc;\n\t@font-size:14px;\n\ttextarea {\n\t\twidth:@width;\n\t\theight:@height;\n\t\tfont-size:@font_size;\n\t}\n\t.test {\n\t  color:@color;\n\t  background-color:@color;\n\t  font-size:@font-size;\n\t}\nLess编译后的对应CSS：\n\n\ttextarea {\n\t  width: 400px;\n\t  height: 300px;\n\t  font-size: 12px;\n\t}\n\t.test {\n\t  color: #cccccc;\n\t  font-size: 14px;\n\t  background-color: #cccccc;\n\t}\n这里要注意，Less以‘@’符号作为开头来定义变量，就像JS里以var定义变量一样，且变量的值只能是属性值，不能是变量，比如说，我这样定义一个变量：\n\n\t@font:font-size;\n\t.test{\n\t@font:14px;  //这样做是不行的，less不会编译成功！\n\t}\n**2.后代选择器---可以嵌套**\n\n\t@color:#ccc;\n\n\n\tdiv {\n\t  color:@color;\n\t\tp{   //添加嵌套样式\n\t    \tcolor:@color;\n\t \t}\n\t  &:after{   //通过&添加伪类\n\t    color:#ddd;\n\t  }\n\t}\n\nLess编译后的CSS:\n\n\tdiv {\n\t  color: #cccccc;\n\t}\n\tdiv p {\n\t  color: #cccccc;\n\t}\n\tdiv:after {\n\t  color: #ddd;\n\t}\n\n这种方法也是比较常用的啦~小编我学会后就来推荐啦\n\n**3.文件引用**\n\n\t@import “文件名”;   //文件名可以是相对路径\n\n文件引用有两个常用方法：\n\n①将全局变量引入到样式类文件时，使用’@import “文件名.less”;‘语句引入即可\n\n②另一种常见用法是将初始化的Less文件引入，当需要样式类时，引入初始化Less文件即可。\n\n**4.混合（Mixins)**\n\n混合可以将已经写好的样式A引入到样式B,从而实现样式B对样式A所有属性的继承。\n\n\t.border-radius(@radius: 4px) {\n\t  -webkit-border-radius: @radius;\n\t  -moz-border-radius: @radius;\n\t  border-radius: @radius;\n\t}\n\t#form-box {\n\t  .border-radius;\n\t  div{\n\t    .border-radius(14px);\n\t  }\n\t}\n\nLess编译后的CSS：\n\n\t#form-box {\n\t  -webkit-border-radius: 4px;\n\t  -moz-border-radius: 4px;\n\t  border-radius: 4px;\n\t}\n\t#form-box div {\n\t  -webkit-border-radius: 14px;\n\t  -moz-border-radius: 14px;\n\t  border-radius: 14px;\n\t}\n\n这里提一个比较有意思的变量@arguments，它包含了所有传递进来的参数，如果不想一个个写参数就可以使用它。\n\n\t.margin (@top:0, @right:0, @bottom:0, @left:0) {\n\t  margin:@arguments;\n\t}\n\tdiv {\n\t  .margin(2px,5px);\n\t}\n\nLess编译后的CSS：\n\n\tdiv {\n\t  margin: 2px 5px 0 0;\n\t}\n**5.函数**\n\n\tdiv {\n\t  .fun(100px);  //引用函数\n\t}\n\t.fun(@px){  //函数声明和JS里的很像，括号加参数\n\t  width:@px;\n\t}\n\tLess编译成CSS：\n\tdiv {\n\t  width: 100px;\n\t}\n注意到没有，函数是不编译的\n","slug":"less快速入门","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzi9000omo01pxo5dexi","content":"<p><strong>Less语言快速入门</strong></p>\n<p><strong>介绍：</strong>Less是一门CSS预处理语言，它扩充了CSS语言，重点来了：它增加了诸如变量、混合（Mixins)、函数等功能，这让静态的CSS语言强大了有木有，方便制作主题（比如换肤）、扩充，更易维护。</p>\n<p><strong>使用：</strong></p>\n<p><strong>1.变量</strong></p>\n<p>Less允许使用变量事先定义一些通用样式，在需要的时候引入，特点就是按需自取，自助餐有木有。<br>看下面栗子：</p>\n<pre><code>//这里是一些简单的LESS语法\n@width:400px;\n@height:300px;\n@font_size:12px;\n@color:#ccc;\n@font-size:14px;\ntextarea {\n    width:@width;\n    height:@height;\n    font-size:@font_size;\n}\n.test {\n  color:@color;\n  background-color:@color;\n  font-size:@font-size;\n}\n</code></pre><p>Less编译后的对应CSS：</p>\n<pre><code>textarea {\n  width: 400px;\n  height: 300px;\n  font-size: 12px;\n}\n.test {\n  color: #cccccc;\n  font-size: 14px;\n  background-color: #cccccc;\n}\n</code></pre><p>这里要注意，Less以‘@’符号作为开头来定义变量，就像JS里以var定义变量一样，且变量的值只能是属性值，不能是变量，比如说，我这样定义一个变量：</p>\n<pre><code>@font:font-size;\n.test{\n@font:14px;  //这样做是不行的，less不会编译成功！\n}\n</code></pre><p><strong>2.后代选择器—可以嵌套</strong></p>\n<pre><code>@color:#ccc;\n\n\ndiv {\n  color:@color;\n    p{   //添加嵌套样式\n        color:@color;\n     }\n  &amp;:after{   //通过&amp;添加伪类\n    color:#ddd;\n  }\n}\n</code></pre><p>Less编译后的CSS:</p>\n<pre><code>div {\n  color: #cccccc;\n}\ndiv p {\n  color: #cccccc;\n}\ndiv:after {\n  color: #ddd;\n}\n</code></pre><p>这种方法也是比较常用的啦~小编我学会后就来推荐啦</p>\n<p><strong>3.文件引用</strong></p>\n<pre><code>@import “文件名”;   //文件名可以是相对路径\n</code></pre><p>文件引用有两个常用方法：</p>\n<p>①将全局变量引入到样式类文件时，使用’@import “文件名.less”;‘语句引入即可</p>\n<p>②另一种常见用法是将初始化的Less文件引入，当需要样式类时，引入初始化Less文件即可。</p>\n<p><strong>4.混合（Mixins)</strong></p>\n<p>混合可以将已经写好的样式A引入到样式B,从而实现样式B对样式A所有属性的继承。</p>\n<pre><code>.border-radius(@radius: 4px) {\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n  border-radius: @radius;\n}\n#form-box {\n  .border-radius;\n  div{\n    .border-radius(14px);\n  }\n}\n</code></pre><p>Less编译后的CSS：</p>\n<pre><code>#form-box {\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n}\n#form-box div {\n  -webkit-border-radius: 14px;\n  -moz-border-radius: 14px;\n  border-radius: 14px;\n}\n</code></pre><p>这里提一个比较有意思的变量@arguments，它包含了所有传递进来的参数，如果不想一个个写参数就可以使用它。</p>\n<pre><code>.margin (@top:0, @right:0, @bottom:0, @left:0) {\n  margin:@arguments;\n}\ndiv {\n  .margin(2px,5px);\n}\n</code></pre><p>Less编译后的CSS：</p>\n<pre><code>div {\n  margin: 2px 5px 0 0;\n}\n</code></pre><p><strong>5.函数</strong></p>\n<pre><code>div {\n  .fun(100px);  //引用函数\n}\n.fun(@px){  //函数声明和JS里的很像，括号加参数\n  width:@px;\n}\nLess编译成CSS：\ndiv {\n  width: 100px;\n}\n</code></pre><p>注意到没有，函数是不编译的</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Less语言快速入门</strong></p>\n<p><strong>介绍：</strong>Less是一门CSS预处理语言，它扩充了CSS语言，重点来了：它增加了诸如变量、混合（Mixins)、函数等功能，这让静态的CSS语言强大了有木有，方便制作主题（比如换肤）、扩充，更易维护。</p>\n<p><strong>使用：</strong></p>\n<p><strong>1.变量</strong></p>\n<p>Less允许使用变量事先定义一些通用样式，在需要的时候引入，特点就是按需自取，自助餐有木有。<br>看下面栗子：</p>\n<pre><code>//这里是一些简单的LESS语法\n@width:400px;\n@height:300px;\n@font_size:12px;\n@color:#ccc;\n@font-size:14px;\ntextarea {\n    width:@width;\n    height:@height;\n    font-size:@font_size;\n}\n.test {\n  color:@color;\n  background-color:@color;\n  font-size:@font-size;\n}\n</code></pre><p>Less编译后的对应CSS：</p>\n<pre><code>textarea {\n  width: 400px;\n  height: 300px;\n  font-size: 12px;\n}\n.test {\n  color: #cccccc;\n  font-size: 14px;\n  background-color: #cccccc;\n}\n</code></pre><p>这里要注意，Less以‘@’符号作为开头来定义变量，就像JS里以var定义变量一样，且变量的值只能是属性值，不能是变量，比如说，我这样定义一个变量：</p>\n<pre><code>@font:font-size;\n.test{\n@font:14px;  //这样做是不行的，less不会编译成功！\n}\n</code></pre><p><strong>2.后代选择器—可以嵌套</strong></p>\n<pre><code>@color:#ccc;\n\n\ndiv {\n  color:@color;\n    p{   //添加嵌套样式\n        color:@color;\n     }\n  &amp;:after{   //通过&amp;添加伪类\n    color:#ddd;\n  }\n}\n</code></pre><p>Less编译后的CSS:</p>\n<pre><code>div {\n  color: #cccccc;\n}\ndiv p {\n  color: #cccccc;\n}\ndiv:after {\n  color: #ddd;\n}\n</code></pre><p>这种方法也是比较常用的啦~小编我学会后就来推荐啦</p>\n<p><strong>3.文件引用</strong></p>\n<pre><code>@import “文件名”;   //文件名可以是相对路径\n</code></pre><p>文件引用有两个常用方法：</p>\n<p>①将全局变量引入到样式类文件时，使用’@import “文件名.less”;‘语句引入即可</p>\n<p>②另一种常见用法是将初始化的Less文件引入，当需要样式类时，引入初始化Less文件即可。</p>\n<p><strong>4.混合（Mixins)</strong></p>\n<p>混合可以将已经写好的样式A引入到样式B,从而实现样式B对样式A所有属性的继承。</p>\n<pre><code>.border-radius(@radius: 4px) {\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n  border-radius: @radius;\n}\n#form-box {\n  .border-radius;\n  div{\n    .border-radius(14px);\n  }\n}\n</code></pre><p>Less编译后的CSS：</p>\n<pre><code>#form-box {\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n}\n#form-box div {\n  -webkit-border-radius: 14px;\n  -moz-border-radius: 14px;\n  border-radius: 14px;\n}\n</code></pre><p>这里提一个比较有意思的变量@arguments，它包含了所有传递进来的参数，如果不想一个个写参数就可以使用它。</p>\n<pre><code>.margin (@top:0, @right:0, @bottom:0, @left:0) {\n  margin:@arguments;\n}\ndiv {\n  .margin(2px,5px);\n}\n</code></pre><p>Less编译后的CSS：</p>\n<pre><code>div {\n  margin: 2px 5px 0 0;\n}\n</code></pre><p><strong>5.函数</strong></p>\n<pre><code>div {\n  .fun(100px);  //引用函数\n}\n.fun(@px){  //函数声明和JS里的很像，括号加参数\n  width:@px;\n}\nLess编译成CSS：\ndiv {\n  width: 100px;\n}\n</code></pre><p>注意到没有，函数是不编译的</p>\n"},{"title":"设置select默认值-Angular","date":"2017-06-08T15:25:27.000Z","_content":"\n\n1.HTML代码\n\n    <body ng-app=\"MyModule\">\n    <div ng-controller=\"MyCtrl\">\n    <select ng-model=\"mylabel\"ng-options=\"v.label for v in lists\"></select>\n    </div>\n    </body>\n \n2.JS代码\n\n    var myModule =angular.module(\"MyModule\", []);\n    myModule.controller('MyCtrl', ['$scope',\n    function($scope) {\n    $scope.lists= [\n    {\"label\": \"步伐1\",\"value\" :\"111\"},\n    {\"label\": \"步伐2\",\"value\" :\"233\"}\n    ];\n    $scope.mylabel= $scope.lists[0];//默认数组第一个作为option的值\n    }\n    ]);\n \n3.执行结果：默认显示“步伐1”\nhttp://img.blog.csdn.net/20170110204541116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ViX2hhcnJ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\n \n4.延伸--ng-options用法[1]\nng-optins属性可以在表达式中使用数组或对象来自动生成一个select的option列表，与ng-repeat类似。\n\n一般用法：\n\n对于数组：\n\n    l v.value for v in array\n    l v.value as v.label for v in array //将v.label值作为v.value\n\n对于对象：\n\n    l  label for (key , value) in object\n    l  select as label for (key ,value) in object\n\n5.引用：更多用法参考链接\n\n[1].http://www.cnblogs.com/panda-zhang/p/5290694.html\n \n \n \n","source":"_posts/ng-option.md","raw":"---\ntitle: 设置select默认值-Angular\ndate: 2017-06-08 23:25:27\n\n---\n\n\n1.HTML代码\n\n    <body ng-app=\"MyModule\">\n    <div ng-controller=\"MyCtrl\">\n    <select ng-model=\"mylabel\"ng-options=\"v.label for v in lists\"></select>\n    </div>\n    </body>\n \n2.JS代码\n\n    var myModule =angular.module(\"MyModule\", []);\n    myModule.controller('MyCtrl', ['$scope',\n    function($scope) {\n    $scope.lists= [\n    {\"label\": \"步伐1\",\"value\" :\"111\"},\n    {\"label\": \"步伐2\",\"value\" :\"233\"}\n    ];\n    $scope.mylabel= $scope.lists[0];//默认数组第一个作为option的值\n    }\n    ]);\n \n3.执行结果：默认显示“步伐1”\nhttp://img.blog.csdn.net/20170110204541116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ViX2hhcnJ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\n \n4.延伸--ng-options用法[1]\nng-optins属性可以在表达式中使用数组或对象来自动生成一个select的option列表，与ng-repeat类似。\n\n一般用法：\n\n对于数组：\n\n    l v.value for v in array\n    l v.value as v.label for v in array //将v.label值作为v.value\n\n对于对象：\n\n    l  label for (key , value) in object\n    l  select as label for (key ,value) in object\n\n5.引用：更多用法参考链接\n\n[1].http://www.cnblogs.com/panda-zhang/p/5290694.html\n \n \n \n","slug":"ng-option","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzia000qmo0118g76jqv","content":"<p>1.HTML代码</p>\n<pre><code>&lt;body ng-app=&quot;MyModule&quot;&gt;\n&lt;div ng-controller=&quot;MyCtrl&quot;&gt;\n&lt;select ng-model=&quot;mylabel&quot;ng-options=&quot;v.label for v in lists&quot;&gt;&lt;/select&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>2.JS代码</p>\n<pre><code>var myModule =angular.module(&quot;MyModule&quot;, []);\nmyModule.controller(&apos;MyCtrl&apos;, [&apos;$scope&apos;,\nfunction($scope) {\n$scope.lists= [\n{&quot;label&quot;: &quot;步伐1&quot;,&quot;value&quot; :&quot;111&quot;},\n{&quot;label&quot;: &quot;步伐2&quot;,&quot;value&quot; :&quot;233&quot;}\n];\n$scope.mylabel= $scope.lists[0];//默认数组第一个作为option的值\n}\n]);\n</code></pre><p>3.执行结果：默认显示“步伐1”<br><a href=\"http://img.blog.csdn.net/20170110204541116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ViX2hhcnJ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" target=\"_blank\" rel=\"noopener\">http://img.blog.csdn.net/20170110204541116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ViX2hhcnJ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center</a></p>\n<p>4.延伸–ng-options用法[1]<br>ng-optins属性可以在表达式中使用数组或对象来自动生成一个select的option列表，与ng-repeat类似。</p>\n<p>一般用法：</p>\n<p>对于数组：</p>\n<pre><code>l v.value for v in array\nl v.value as v.label for v in array //将v.label值作为v.value\n</code></pre><p>对于对象：</p>\n<pre><code>l  label for (key , value) in object\nl  select as label for (key ,value) in object\n</code></pre><p>5.引用：更多用法参考链接</p>\n<p>[1].<a href=\"http://www.cnblogs.com/panda-zhang/p/5290694.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/panda-zhang/p/5290694.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.HTML代码</p>\n<pre><code>&lt;body ng-app=&quot;MyModule&quot;&gt;\n&lt;div ng-controller=&quot;MyCtrl&quot;&gt;\n&lt;select ng-model=&quot;mylabel&quot;ng-options=&quot;v.label for v in lists&quot;&gt;&lt;/select&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>2.JS代码</p>\n<pre><code>var myModule =angular.module(&quot;MyModule&quot;, []);\nmyModule.controller(&apos;MyCtrl&apos;, [&apos;$scope&apos;,\nfunction($scope) {\n$scope.lists= [\n{&quot;label&quot;: &quot;步伐1&quot;,&quot;value&quot; :&quot;111&quot;},\n{&quot;label&quot;: &quot;步伐2&quot;,&quot;value&quot; :&quot;233&quot;}\n];\n$scope.mylabel= $scope.lists[0];//默认数组第一个作为option的值\n}\n]);\n</code></pre><p>3.执行结果：默认显示“步伐1”<br><a href=\"http://img.blog.csdn.net/20170110204541116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ViX2hhcnJ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" target=\"_blank\" rel=\"noopener\">http://img.blog.csdn.net/20170110204541116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ViX2hhcnJ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center</a></p>\n<p>4.延伸–ng-options用法[1]<br>ng-optins属性可以在表达式中使用数组或对象来自动生成一个select的option列表，与ng-repeat类似。</p>\n<p>一般用法：</p>\n<p>对于数组：</p>\n<pre><code>l v.value for v in array\nl v.value as v.label for v in array //将v.label值作为v.value\n</code></pre><p>对于对象：</p>\n<pre><code>l  label for (key , value) in object\nl  select as label for (key ,value) in object\n</code></pre><p>5.引用：更多用法参考链接</p>\n<p>[1].<a href=\"http://www.cnblogs.com/panda-zhang/p/5290694.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/panda-zhang/p/5290694.html</a></p>\n"},{"title":"plugins-browsersync","date":"2017-08-14T10:25:02.000Z","_content":"\nBrowsersync浏览器同步测试工具的使用\n----\n\nBrowsersync能够快速响应文件(html、css、js、less、sass等)的更改，试想当你敲代码的同时，浏览器能够快速响应文件更改，免去手动刷新浏览器，对于开发者来说无疑会提高开发效率。\n\n下面是分别是在gulp和webpack中的安装及使用方法。  \n\n一、gulp + browser-sync安装\n----\n安装\n----\n前提是你已[安装gulp](https://webharry.github.io/2017/07/20/gulp-use/)\n这里用Node.js的包管理安装，前提是你已安装[node.js]()。\n全局安装：\n\n    npm install -g browser-sync\n\n作为项目开发依赖安装：\n\n    npm install --save-dev browser-sync\n\n使用：\n----\n\n在gulpfile.js文件配置如下：  \n\n    var gulp = require('gulp');\n    var browserSync = require('browser-sync').create();\n    var reload = browserSync.reload;\n\n    gulp.task('server',function() {\n        browserSync.init({\n            server: \"./dist\"//生产目录\n        });\n\n        gulp.watch(\"./src/**/*.less\",['less']);\n        gulp.watch(\"./src/**/*.html\",['htmlmin']);\n        gulp.watch(\"./dist/**/*.css\").on('change',reload);\n        gulp.watch(\"./dist/**/*.html\").on('change',reload);\n    });\n\n    gulp.task('default',['server'],function() {\n\n    });\n","source":"_posts/plugins-browsersync.md","raw":"---\ntitle: plugins-browsersync\ndate: 2017-08-14 18:25:02\ntags:\n---\n\nBrowsersync浏览器同步测试工具的使用\n----\n\nBrowsersync能够快速响应文件(html、css、js、less、sass等)的更改，试想当你敲代码的同时，浏览器能够快速响应文件更改，免去手动刷新浏览器，对于开发者来说无疑会提高开发效率。\n\n下面是分别是在gulp和webpack中的安装及使用方法。  \n\n一、gulp + browser-sync安装\n----\n安装\n----\n前提是你已[安装gulp](https://webharry.github.io/2017/07/20/gulp-use/)\n这里用Node.js的包管理安装，前提是你已安装[node.js]()。\n全局安装：\n\n    npm install -g browser-sync\n\n作为项目开发依赖安装：\n\n    npm install --save-dev browser-sync\n\n使用：\n----\n\n在gulpfile.js文件配置如下：  \n\n    var gulp = require('gulp');\n    var browserSync = require('browser-sync').create();\n    var reload = browserSync.reload;\n\n    gulp.task('server',function() {\n        browserSync.init({\n            server: \"./dist\"//生产目录\n        });\n\n        gulp.watch(\"./src/**/*.less\",['less']);\n        gulp.watch(\"./src/**/*.html\",['htmlmin']);\n        gulp.watch(\"./dist/**/*.css\").on('change',reload);\n        gulp.watch(\"./dist/**/*.html\").on('change',reload);\n    });\n\n    gulp.task('default',['server'],function() {\n\n    });\n","slug":"plugins-browsersync","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzib000tmo01kjwl8i3k","content":"<h2 id=\"Browsersync浏览器同步测试工具的使用\"><a href=\"#Browsersync浏览器同步测试工具的使用\" class=\"headerlink\" title=\"Browsersync浏览器同步测试工具的使用\"></a>Browsersync浏览器同步测试工具的使用</h2><p>Browsersync能够快速响应文件(html、css、js、less、sass等)的更改，试想当你敲代码的同时，浏览器能够快速响应文件更改，免去手动刷新浏览器，对于开发者来说无疑会提高开发效率。</p>\n<p>下面是分别是在gulp和webpack中的安装及使用方法。  </p>\n<h2 id=\"一、gulp-browser-sync安装\"><a href=\"#一、gulp-browser-sync安装\" class=\"headerlink\" title=\"一、gulp + browser-sync安装\"></a>一、gulp + browser-sync安装</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前提是你已<a href=\"https://webharry.github.io/2017/07/20/gulp-use/\">安装gulp</a><br>这里用Node.js的包管理安装，前提是你已安装<a href=\"\">node.js</a>。<br>全局安装：</p>\n<pre><code>npm install -g browser-sync\n</code></pre><p>作为项目开发依赖安装：</p>\n<pre><code>npm install --save-dev browser-sync\n</code></pre><h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><p>在gulpfile.js文件配置如下：  </p>\n<pre><code>var gulp = require(&apos;gulp&apos;);\nvar browserSync = require(&apos;browser-sync&apos;).create();\nvar reload = browserSync.reload;\n\ngulp.task(&apos;server&apos;,function() {\n    browserSync.init({\n        server: &quot;./dist&quot;//生产目录\n    });\n\n    gulp.watch(&quot;./src/**/*.less&quot;,[&apos;less&apos;]);\n    gulp.watch(&quot;./src/**/*.html&quot;,[&apos;htmlmin&apos;]);\n    gulp.watch(&quot;./dist/**/*.css&quot;).on(&apos;change&apos;,reload);\n    gulp.watch(&quot;./dist/**/*.html&quot;).on(&apos;change&apos;,reload);\n});\n\ngulp.task(&apos;default&apos;,[&apos;server&apos;],function() {\n\n});\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Browsersync浏览器同步测试工具的使用\"><a href=\"#Browsersync浏览器同步测试工具的使用\" class=\"headerlink\" title=\"Browsersync浏览器同步测试工具的使用\"></a>Browsersync浏览器同步测试工具的使用</h2><p>Browsersync能够快速响应文件(html、css、js、less、sass等)的更改，试想当你敲代码的同时，浏览器能够快速响应文件更改，免去手动刷新浏览器，对于开发者来说无疑会提高开发效率。</p>\n<p>下面是分别是在gulp和webpack中的安装及使用方法。  </p>\n<h2 id=\"一、gulp-browser-sync安装\"><a href=\"#一、gulp-browser-sync安装\" class=\"headerlink\" title=\"一、gulp + browser-sync安装\"></a>一、gulp + browser-sync安装</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前提是你已<a href=\"https://webharry.github.io/2017/07/20/gulp-use/\">安装gulp</a><br>这里用Node.js的包管理安装，前提是你已安装<a href=\"\">node.js</a>。<br>全局安装：</p>\n<pre><code>npm install -g browser-sync\n</code></pre><p>作为项目开发依赖安装：</p>\n<pre><code>npm install --save-dev browser-sync\n</code></pre><h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><p>在gulpfile.js文件配置如下：  </p>\n<pre><code>var gulp = require(&apos;gulp&apos;);\nvar browserSync = require(&apos;browser-sync&apos;).create();\nvar reload = browserSync.reload;\n\ngulp.task(&apos;server&apos;,function() {\n    browserSync.init({\n        server: &quot;./dist&quot;//生产目录\n    });\n\n    gulp.watch(&quot;./src/**/*.less&quot;,[&apos;less&apos;]);\n    gulp.watch(&quot;./src/**/*.html&quot;,[&apos;htmlmin&apos;]);\n    gulp.watch(&quot;./dist/**/*.css&quot;).on(&apos;change&apos;,reload);\n    gulp.watch(&quot;./dist/**/*.html&quot;).on(&apos;change&apos;,reload);\n});\n\ngulp.task(&apos;default&apos;,[&apos;server&apos;],function() {\n\n});\n</code></pre>"},{"title":"跨域解决方法-proxy","date":"2017-10-23T07:34:57.000Z","_content":"今天尝试使用http-proxy-middleware插件解决本地开发中的跨域问题。这篇文章主要讲的是跨域解决方法6.proxy，使用代理。  \n\n#### 跨域解决方法-proxy\n##### http-proxy-middleware\n下面在本地开发中复现AJAX跨域请求。\n本地开发，需要请求远程服务器资源，使用ajax请求获取远程资源：\n```js\n$(document).ready(function() {\n  $.ajax({\n    type:\"GET\",\n    url:\"./api/.....\",//远程地址\n    dataType:\"json\",\n    success:function(data) {\n      console.log(data);\n    }\n  });\n})\n```\n此时浏览器会报错，跨域问题。\n意思是出现跨域请求错误。\n#### 解决方法一：browser-sync+http-proxy-middleware做代理\n\n在gulpfile.js文件中做配置：\n```js\n\nvar browserSync = require('browser-sync').creat();\nvar proxyMiddleware = require('http-proxy-middleware');\n\nvar proxy = ('./api',{\n  target:\"http://echo.websocket.org\",//远程地址url\n  changeOrigin:true,//虚拟主机站点需要\n  pathRewrite:{\n    '^/api/(.*)':'/$1'  //正则匹配，替换api起始的路径\n  }\n});\n\ngulp.task('server',function(){\n  browserSync.init({\n    server:'./dist',\n    notify:false,\n    middleware:[proxy]\n  });\n});\n\n```\n其他解决方法参看如下：  \n\n#### 跨域解决方法\n##### [1.CORS（cross-origin resourse sharing)跨域资源共享](https://webharry.github.io/2017/10/23/CORS/)\n##### [2.JSONP](https://webharry.github.io/2017/10/24/JSONP/)\n##### 3.document.domain + iframe\n##### 4.window.name + iframe\n##### 5.postMessage\n##### [6.proxy](https://webharry.github.io/2017/10/23/proxy/)","source":"_posts/proxy.md","raw":"---\ntitle: 跨域解决方法-proxy\ndate: 2017-10-23 15:34:57\ntags:\n    - gulp\n    - frontend\n    - '构建生态'\n---\n今天尝试使用http-proxy-middleware插件解决本地开发中的跨域问题。这篇文章主要讲的是跨域解决方法6.proxy，使用代理。  \n\n#### 跨域解决方法-proxy\n##### http-proxy-middleware\n下面在本地开发中复现AJAX跨域请求。\n本地开发，需要请求远程服务器资源，使用ajax请求获取远程资源：\n```js\n$(document).ready(function() {\n  $.ajax({\n    type:\"GET\",\n    url:\"./api/.....\",//远程地址\n    dataType:\"json\",\n    success:function(data) {\n      console.log(data);\n    }\n  });\n})\n```\n此时浏览器会报错，跨域问题。\n意思是出现跨域请求错误。\n#### 解决方法一：browser-sync+http-proxy-middleware做代理\n\n在gulpfile.js文件中做配置：\n```js\n\nvar browserSync = require('browser-sync').creat();\nvar proxyMiddleware = require('http-proxy-middleware');\n\nvar proxy = ('./api',{\n  target:\"http://echo.websocket.org\",//远程地址url\n  changeOrigin:true,//虚拟主机站点需要\n  pathRewrite:{\n    '^/api/(.*)':'/$1'  //正则匹配，替换api起始的路径\n  }\n});\n\ngulp.task('server',function(){\n  browserSync.init({\n    server:'./dist',\n    notify:false,\n    middleware:[proxy]\n  });\n});\n\n```\n其他解决方法参看如下：  \n\n#### 跨域解决方法\n##### [1.CORS（cross-origin resourse sharing)跨域资源共享](https://webharry.github.io/2017/10/23/CORS/)\n##### [2.JSONP](https://webharry.github.io/2017/10/24/JSONP/)\n##### 3.document.domain + iframe\n##### 4.window.name + iframe\n##### 5.postMessage\n##### [6.proxy](https://webharry.github.io/2017/10/23/proxy/)","slug":"proxy","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzic000vmo011hvo579b","content":"<p>今天尝试使用http-proxy-middleware插件解决本地开发中的跨域问题。这篇文章主要讲的是跨域解决方法6.proxy，使用代理。  </p>\n<h4 id=\"跨域解决方法-proxy\"><a href=\"#跨域解决方法-proxy\" class=\"headerlink\" title=\"跨域解决方法-proxy\"></a>跨域解决方法-proxy</h4><h5 id=\"http-proxy-middleware\"><a href=\"#http-proxy-middleware\" class=\"headerlink\" title=\"http-proxy-middleware\"></a>http-proxy-middleware</h5><p>下面在本地开发中复现AJAX跨域请求。<br>本地开发，需要请求远程服务器资源，使用ajax请求获取远程资源：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $.ajax(&#123;</div><div class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">\"GET\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">\"./api/.....\"</span>,<span class=\"comment\">//远程地址</span></div><div class=\"line\">    dataType:<span class=\"string\">\"json\"</span>,</div><div class=\"line\">    <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时浏览器会报错，跨域问题。<br>意思是出现跨域请求错误。</p>\n<h4 id=\"解决方法一：browser-sync-http-proxy-middleware做代理\"><a href=\"#解决方法一：browser-sync-http-proxy-middleware做代理\" class=\"headerlink\" title=\"解决方法一：browser-sync+http-proxy-middleware做代理\"></a>解决方法一：browser-sync+http-proxy-middleware做代理</h4><p>在gulpfile.js文件中做配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).creat();</div><div class=\"line\"><span class=\"keyword\">var</span> proxyMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = (<span class=\"string\">'./api'</span>,&#123;</div><div class=\"line\">  <span class=\"attr\">target</span>:<span class=\"string\">\"http://echo.websocket.org\"</span>,<span class=\"comment\">//远程地址url</span></div><div class=\"line\">  changeOrigin:<span class=\"literal\">true</span>,<span class=\"comment\">//虚拟主机站点需要</span></div><div class=\"line\">  pathRewrite:&#123;</div><div class=\"line\">    <span class=\"string\">'^/api/(.*)'</span>:<span class=\"string\">'/$1'</span>  <span class=\"comment\">//正则匹配，替换api起始的路径</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'server'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  browserSync.init(&#123;</div><div class=\"line\">    <span class=\"attr\">server</span>:<span class=\"string\">'./dist'</span>,</div><div class=\"line\">    <span class=\"attr\">notify</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">middleware</span>:[proxy]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>其他解决方法参看如下：  </p>\n<h4 id=\"跨域解决方法\"><a href=\"#跨域解决方法\" class=\"headerlink\" title=\"跨域解决方法\"></a>跨域解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a><a href=\"https://webharry.github.io/2017/10/23/CORS/\">1.CORS（cross-origin resourse sharing)跨域资源共享</a></h5><h5 id=\"2-JSONP\"><a href=\"#2-JSONP\" class=\"headerlink\" title=\"2.JSONP\"></a><a href=\"https://webharry.github.io/2017/10/24/JSONP/\">2.JSONP</a></h5><h5 id=\"3-document-domain-iframe\"><a href=\"#3-document-domain-iframe\" class=\"headerlink\" title=\"3.document.domain + iframe\"></a>3.document.domain + iframe</h5><h5 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h5><h5 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5.postMessage\"></a>5.postMessage</h5><h5 id=\"6-proxy\"><a href=\"#6-proxy\" class=\"headerlink\" title=\"6.proxy\"></a><a href=\"https://webharry.github.io/2017/10/23/proxy/\">6.proxy</a></h5>","site":{"data":{}},"excerpt":"","more":"<p>今天尝试使用http-proxy-middleware插件解决本地开发中的跨域问题。这篇文章主要讲的是跨域解决方法6.proxy，使用代理。  </p>\n<h4 id=\"跨域解决方法-proxy\"><a href=\"#跨域解决方法-proxy\" class=\"headerlink\" title=\"跨域解决方法-proxy\"></a>跨域解决方法-proxy</h4><h5 id=\"http-proxy-middleware\"><a href=\"#http-proxy-middleware\" class=\"headerlink\" title=\"http-proxy-middleware\"></a>http-proxy-middleware</h5><p>下面在本地开发中复现AJAX跨域请求。<br>本地开发，需要请求远程服务器资源，使用ajax请求获取远程资源：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $.ajax(&#123;</div><div class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">\"GET\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">\"./api/.....\"</span>,<span class=\"comment\">//远程地址</span></div><div class=\"line\">    dataType:<span class=\"string\">\"json\"</span>,</div><div class=\"line\">    <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时浏览器会报错，跨域问题。<br>意思是出现跨域请求错误。</p>\n<h4 id=\"解决方法一：browser-sync-http-proxy-middleware做代理\"><a href=\"#解决方法一：browser-sync-http-proxy-middleware做代理\" class=\"headerlink\" title=\"解决方法一：browser-sync+http-proxy-middleware做代理\"></a>解决方法一：browser-sync+http-proxy-middleware做代理</h4><p>在gulpfile.js文件中做配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).creat();</div><div class=\"line\"><span class=\"keyword\">var</span> proxyMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = (<span class=\"string\">'./api'</span>,&#123;</div><div class=\"line\">  <span class=\"attr\">target</span>:<span class=\"string\">\"http://echo.websocket.org\"</span>,<span class=\"comment\">//远程地址url</span></div><div class=\"line\">  changeOrigin:<span class=\"literal\">true</span>,<span class=\"comment\">//虚拟主机站点需要</span></div><div class=\"line\">  pathRewrite:&#123;</div><div class=\"line\">    <span class=\"string\">'^/api/(.*)'</span>:<span class=\"string\">'/$1'</span>  <span class=\"comment\">//正则匹配，替换api起始的路径</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'server'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  browserSync.init(&#123;</div><div class=\"line\">    <span class=\"attr\">server</span>:<span class=\"string\">'./dist'</span>,</div><div class=\"line\">    <span class=\"attr\">notify</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">middleware</span>:[proxy]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>其他解决方法参看如下：  </p>\n<h4 id=\"跨域解决方法\"><a href=\"#跨域解决方法\" class=\"headerlink\" title=\"跨域解决方法\"></a>跨域解决方法</h4><h5 id=\"1-CORS（cross-origin-resourse-sharing-跨域资源共享\"><a href=\"#1-CORS（cross-origin-resourse-sharing-跨域资源共享\" class=\"headerlink\" title=\"1.CORS（cross-origin resourse sharing)跨域资源共享\"></a><a href=\"https://webharry.github.io/2017/10/23/CORS/\">1.CORS（cross-origin resourse sharing)跨域资源共享</a></h5><h5 id=\"2-JSONP\"><a href=\"#2-JSONP\" class=\"headerlink\" title=\"2.JSONP\"></a><a href=\"https://webharry.github.io/2017/10/24/JSONP/\">2.JSONP</a></h5><h5 id=\"3-document-domain-iframe\"><a href=\"#3-document-domain-iframe\" class=\"headerlink\" title=\"3.document.domain + iframe\"></a>3.document.domain + iframe</h5><h5 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h5><h5 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5.postMessage\"></a>5.postMessage</h5><h5 id=\"6-proxy\"><a href=\"#6-proxy\" class=\"headerlink\" title=\"6.proxy\"></a><a href=\"https://webharry.github.io/2017/10/23/proxy/\">6.proxy</a></h5>"},{"title":"angular+select2","date":"2017-09-27T07:50:45.000Z","_content":"\nselect2 是一个jQuery的插件，扩展了select的功能。可以搜索，下面是使用方法:\n>官网地址：https://select2.org/\n### 一、引入插件select2\n\n#### 1.访问GitHub下载：\n>https://github.com/select2/select2  \n解压后将js和css文件引入你的html文件：\n\n```js\n\n//select2\nrequire('../select2/select2.min.js');\nrequire('../select2/select2.min.css');\n\n```\n\n#### 2.或者通过远程动访问引入文件，在你的html文件引入js和css文件：\n\n```html\n\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css\" rel=\"stylesheet\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js\"></script>\n\n```\n### 二、使用\n例子1：给select添加类名:\n\n```html\n<select id=\"tags\" class=\"js-example-basic-single\" ng-model=\"someValue\">\n  <option value=\"\">请选择</option>\n  <option ng-repeat=\"s in arr\" value=\"{{s.id}}\" on-finish-render-filters>{{s.value}}</option>\n</select>\n```\n在js文件中调用select2的API：\n```js\n\n//select2插件实现下拉框的模糊搜索匹配功能\n$(document).ready(function() {\n    $('.js-example-basic-multiple').select2();\n});\n\n```\n\n### 三、select2初始化\n\n通过在.select2()方法中添加一个对象实现：\n\n```js\n\n$('.js-example-basic-multiple').select2({\n  width:200px,//设置默认宽度\n  //width: 'resolve', // 需要在html用行内样式重新定义宽度\n  multiple: 'multiple',     // 多选\n\n\n});\n\n```\n### 四、select2事件\n\n```js\n\n$('#tags').on('select2:select', function (e) {\n      //获取select当前选中值得一些信息\n      var data = e.params.data;\n      console.log(data);\n      $scope.someValue = data.id;\n      \n});\n\n```\n### 五、Data sources\n\n```html\n\n<select class=\"js-data-example-ajax\"></select>\n\n```\n\n```js\n\n$('.js-example-data-ajax').select2({\n  ajax: {\n    url: 'https://api.github.com/search/repositories',\n    //dataType: 'json'\n    // Additional AJAX parameters go here; see the end of this chapter for the full code of this example\n    data: function (params) {\n      var query = {\n        search: params.term,\n        type: 'public'\n      }\n\n      // Query parameters will be ?search=[term]&type=public\n      return query;\n    }\n  }\n});\n\n```\n\n### 六、select2提供的event\n摘自网友博客：\n>$(“#txt_tag”)  \n>  .on(“change”, function(e) {​})​ // 当 select2 值被改变的時候 ( 改变后触发 )​  \n> .on(“select2-opening”,function(){}) // ​当下拉出现时 ( 开启选项下拉前触发)  \n>   .on(“select2-open”, function() {}) //当下拉出现时(开启选项下拉后触发)​  \n> .on(“select2-close”,function(){}) // 当选项关闭的时候  \n> .on(“select2-highlight”,function(e){})// hover 到下拉时  \n> .on(“select2-selecting”,function(e){})// 选中选项的时候 (选中前触发 ) ​​  \n> .on(“select2-removing”,function(e){}) // 移除选项的时候 ( 选中前触发) ​​  \n> .on(“select2-removed”,function(e){}) //移除选项的时候 ( 选中后触发 ) ​​​  \n> .on(“select2-loaded”,function(e){}) // load资料的时候 ( Loaded 完成后触发)  \n> .on(“select2-focus”,function(e){}) // input 获得焦点的触发  \n> .on(“select2-blur”,function(e) {}) // input 失去焦点触发  \n\n\n### 七、踩过的坑\n\n#### 1.在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\n\n```html\n<select id=\"tags\" class=\"js-example-basic-single\" ng-model=\"someValue\">\n  <option value=\"\">请选择</option>\n  <option ng-repeat=\"s in arr\" value=\"{{s.id}}\" on-finish-render-filters>{{s.value}}</option>\n</select>\n```\n解决办法：在调用插件时，添加一个事件，将选中值赋值给变量：\n```js\n\n//获取select选中值，赋值给全局变量$scope.someValue\n  $('#tags').on('select2:select', function (e) {\n      //获取select当前选中值得一些信息\n      var data = e.params.data;\n      console.log(data);\n      $scope.someValue = data.id;\n      \n  });\n\n```\n\n总结：select2提供了很多配置参数，处理事件，可以更具业务需求进行设置。本文主要用到了select2的搜索功能，以及处理与angular同时使用时的问题。\n","source":"_posts/slect2.md","raw":"---\ntitle: angular+select2\ndate: 2017-09-27 15:50:45\ntags:\n    - plugin\n    - jquery\n    - frontend\n---\n\nselect2 是一个jQuery的插件，扩展了select的功能。可以搜索，下面是使用方法:\n>官网地址：https://select2.org/\n### 一、引入插件select2\n\n#### 1.访问GitHub下载：\n>https://github.com/select2/select2  \n解压后将js和css文件引入你的html文件：\n\n```js\n\n//select2\nrequire('../select2/select2.min.js');\nrequire('../select2/select2.min.css');\n\n```\n\n#### 2.或者通过远程动访问引入文件，在你的html文件引入js和css文件：\n\n```html\n\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css\" rel=\"stylesheet\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js\"></script>\n\n```\n### 二、使用\n例子1：给select添加类名:\n\n```html\n<select id=\"tags\" class=\"js-example-basic-single\" ng-model=\"someValue\">\n  <option value=\"\">请选择</option>\n  <option ng-repeat=\"s in arr\" value=\"{{s.id}}\" on-finish-render-filters>{{s.value}}</option>\n</select>\n```\n在js文件中调用select2的API：\n```js\n\n//select2插件实现下拉框的模糊搜索匹配功能\n$(document).ready(function() {\n    $('.js-example-basic-multiple').select2();\n});\n\n```\n\n### 三、select2初始化\n\n通过在.select2()方法中添加一个对象实现：\n\n```js\n\n$('.js-example-basic-multiple').select2({\n  width:200px,//设置默认宽度\n  //width: 'resolve', // 需要在html用行内样式重新定义宽度\n  multiple: 'multiple',     // 多选\n\n\n});\n\n```\n### 四、select2事件\n\n```js\n\n$('#tags').on('select2:select', function (e) {\n      //获取select当前选中值得一些信息\n      var data = e.params.data;\n      console.log(data);\n      $scope.someValue = data.id;\n      \n});\n\n```\n### 五、Data sources\n\n```html\n\n<select class=\"js-data-example-ajax\"></select>\n\n```\n\n```js\n\n$('.js-example-data-ajax').select2({\n  ajax: {\n    url: 'https://api.github.com/search/repositories',\n    //dataType: 'json'\n    // Additional AJAX parameters go here; see the end of this chapter for the full code of this example\n    data: function (params) {\n      var query = {\n        search: params.term,\n        type: 'public'\n      }\n\n      // Query parameters will be ?search=[term]&type=public\n      return query;\n    }\n  }\n});\n\n```\n\n### 六、select2提供的event\n摘自网友博客：\n>$(“#txt_tag”)  \n>  .on(“change”, function(e) {​})​ // 当 select2 值被改变的時候 ( 改变后触发 )​  \n> .on(“select2-opening”,function(){}) // ​当下拉出现时 ( 开启选项下拉前触发)  \n>   .on(“select2-open”, function() {}) //当下拉出现时(开启选项下拉后触发)​  \n> .on(“select2-close”,function(){}) // 当选项关闭的时候  \n> .on(“select2-highlight”,function(e){})// hover 到下拉时  \n> .on(“select2-selecting”,function(e){})// 选中选项的时候 (选中前触发 ) ​​  \n> .on(“select2-removing”,function(e){}) // 移除选项的时候 ( 选中前触发) ​​  \n> .on(“select2-removed”,function(e){}) //移除选项的时候 ( 选中后触发 ) ​​​  \n> .on(“select2-loaded”,function(e){}) // load资料的时候 ( Loaded 完成后触发)  \n> .on(“select2-focus”,function(e){}) // input 获得焦点的触发  \n> .on(“select2-blur”,function(e) {}) // input 失去焦点触发  \n\n\n### 七、踩过的坑\n\n#### 1.在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\n\n```html\n<select id=\"tags\" class=\"js-example-basic-single\" ng-model=\"someValue\">\n  <option value=\"\">请选择</option>\n  <option ng-repeat=\"s in arr\" value=\"{{s.id}}\" on-finish-render-filters>{{s.value}}</option>\n</select>\n```\n解决办法：在调用插件时，添加一个事件，将选中值赋值给变量：\n```js\n\n//获取select选中值，赋值给全局变量$scope.someValue\n  $('#tags').on('select2:select', function (e) {\n      //获取select当前选中值得一些信息\n      var data = e.params.data;\n      console.log(data);\n      $scope.someValue = data.id;\n      \n  });\n\n```\n\n总结：select2提供了很多配置参数，处理事件，可以更具业务需求进行设置。本文主要用到了select2的搜索功能，以及处理与angular同时使用时的问题。\n","slug":"slect2","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzic000xmo01v019u6yo","content":"<p>select2 是一个jQuery的插件，扩展了select的功能。可以搜索，下面是使用方法:</p>\n<blockquote>\n<p>官网地址：<a href=\"https://select2.org/\" target=\"_blank\" rel=\"noopener\">https://select2.org/</a></p>\n<h3 id=\"一、引入插件select2\"><a href=\"#一、引入插件select2\" class=\"headerlink\" title=\"一、引入插件select2\"></a>一、引入插件select2</h3></blockquote>\n<h4 id=\"1-访问GitHub下载：\"><a href=\"#1-访问GitHub下载：\" class=\"headerlink\" title=\"1.访问GitHub下载：\"></a>1.访问GitHub下载：</h4><blockquote>\n<p><a href=\"https://github.com/select2/select2\" target=\"_blank\" rel=\"noopener\">https://github.com/select2/select2</a><br>解压后将js和css文件引入你的html文件：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//select2</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../select2/select2.min.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../select2/select2.min.css'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-或者通过远程动访问引入文件，在你的html文件引入js和css文件：\"><a href=\"#2-或者通过远程动访问引入文件，在你的html文件引入js和css文件：\" class=\"headerlink\" title=\"2.或者通过远程动访问引入文件，在你的html文件引入js和css文件：\"></a>2.或者通过远程动访问引入文件，在你的html文件引入js和css文件：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h3><p>例子1：给select添加类名:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tags\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-example-basic-single\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"someValue\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"s in arr\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123;s.id&#125;&#125;\"</span> <span class=\"attr\">on-finish-render-filters</span>&gt;</span>&#123;&#123;s.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在js文件中调用select2的API：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//select2插件实现下拉框的模糊搜索匹配功能</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'.js-example-basic-multiple'</span>).select2();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、select2初始化\"><a href=\"#三、select2初始化\" class=\"headerlink\" title=\"三、select2初始化\"></a>三、select2初始化</h3><p>通过在.select2()方法中添加一个对象实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.js-example-basic-multiple'</span>).select2(&#123;</div><div class=\"line\">  <span class=\"attr\">width</span>:<span class=\"number\">200</span>px,<span class=\"comment\">//设置默认宽度</span></div><div class=\"line\">  <span class=\"comment\">//width: 'resolve', // 需要在html用行内样式重新定义宽度</span></div><div class=\"line\">  multiple: <span class=\"string\">'multiple'</span>,     <span class=\"comment\">// 多选</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"四、select2事件\"><a href=\"#四、select2事件\" class=\"headerlink\" title=\"四、select2事件\"></a>四、select2事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#tags'</span>).on(<span class=\"string\">'select2:select'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取select当前选中值得一些信息</span></div><div class=\"line\">      <span class=\"keyword\">var</span> data = e.params.data;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      $scope.someValue = data.id;</div><div class=\"line\">      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"五、Data-sources\"><a href=\"#五、Data-sources\" class=\"headerlink\" title=\"五、Data sources\"></a>五、Data sources</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-data-example-ajax\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.js-example-data-ajax'</span>).select2(&#123;</div><div class=\"line\">  <span class=\"attr\">ajax</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'https://api.github.com/search/repositories'</span>,</div><div class=\"line\">    <span class=\"comment\">//dataType: 'json'</span></div><div class=\"line\">    <span class=\"comment\">// Additional AJAX parameters go here; see the end of this chapter for the full code of this example</span></div><div class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> query = &#123;</div><div class=\"line\">        <span class=\"attr\">search</span>: params.term,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'public'</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Query parameters will be ?search=[term]&amp;type=public</span></div><div class=\"line\">      <span class=\"keyword\">return</span> query;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"六、select2提供的event\"><a href=\"#六、select2提供的event\" class=\"headerlink\" title=\"六、select2提供的event\"></a>六、select2提供的event</h3><p>摘自网友博客：</p>\n<blockquote>\n<p>$(“#txt_tag”)<br> .on(“change”, function(e) {​})​ // 当 select2 值被改变的時候 ( 改变后触发 )​<br>.on(“select2-opening”,function(){}) // ​当下拉出现时 ( 开启选项下拉前触发)<br>  .on(“select2-open”, function() {}) //当下拉出现时(开启选项下拉后触发)​<br>.on(“select2-close”,function(){}) // 当选项关闭的时候<br>.on(“select2-highlight”,function(e){})// hover 到下拉时<br>.on(“select2-selecting”,function(e){})// 选中选项的时候 (选中前触发 ) ​​<br>.on(“select2-removing”,function(e){}) // 移除选项的时候 ( 选中前触发) ​​<br>.on(“select2-removed”,function(e){}) //移除选项的时候 ( 选中后触发 ) ​​​<br>.on(“select2-loaded”,function(e){}) // load资料的时候 ( Loaded 完成后触发)<br>.on(“select2-focus”,function(e){}) // input 获得焦点的触发<br>.on(“select2-blur”,function(e) {}) // input 失去焦点触发  </p>\n</blockquote>\n<h3 id=\"七、踩过的坑\"><a href=\"#七、踩过的坑\" class=\"headerlink\" title=\"七、踩过的坑\"></a>七、踩过的坑</h3><h4 id=\"1-在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\"><a href=\"#1-在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\" class=\"headerlink\" title=\"1.在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\"></a>1.在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tags\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-example-basic-single\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"someValue\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"s in arr\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123;s.id&#125;&#125;\"</span> <span class=\"attr\">on-finish-render-filters</span>&gt;</span>&#123;&#123;s.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>解决办法：在调用插件时，添加一个事件，将选中值赋值给变量：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取select选中值，赋值给全局变量$scope.someValue</span></div><div class=\"line\">  $(<span class=\"string\">'#tags'</span>).on(<span class=\"string\">'select2:select'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取select当前选中值得一些信息</span></div><div class=\"line\">      <span class=\"keyword\">var</span> data = e.params.data;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      $scope.someValue = data.id;</div><div class=\"line\">      </div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<p>总结：select2提供了很多配置参数，处理事件，可以更具业务需求进行设置。本文主要用到了select2的搜索功能，以及处理与angular同时使用时的问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>select2 是一个jQuery的插件，扩展了select的功能。可以搜索，下面是使用方法:</p>\n<blockquote>\n<p>官网地址：<a href=\"https://select2.org/\" target=\"_blank\" rel=\"noopener\">https://select2.org/</a></p>\n<h3 id=\"一、引入插件select2\"><a href=\"#一、引入插件select2\" class=\"headerlink\" title=\"一、引入插件select2\"></a>一、引入插件select2</h3></blockquote>\n<h4 id=\"1-访问GitHub下载：\"><a href=\"#1-访问GitHub下载：\" class=\"headerlink\" title=\"1.访问GitHub下载：\"></a>1.访问GitHub下载：</h4><blockquote>\n<p><a href=\"https://github.com/select2/select2\" target=\"_blank\" rel=\"noopener\">https://github.com/select2/select2</a><br>解压后将js和css文件引入你的html文件：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//select2</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../select2/select2.min.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../select2/select2.min.css'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-或者通过远程动访问引入文件，在你的html文件引入js和css文件：\"><a href=\"#2-或者通过远程动访问引入文件，在你的html文件引入js和css文件：\" class=\"headerlink\" title=\"2.或者通过远程动访问引入文件，在你的html文件引入js和css文件：\"></a>2.或者通过远程动访问引入文件，在你的html文件引入js和css文件：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h3><p>例子1：给select添加类名:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tags\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-example-basic-single\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"someValue\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"s in arr\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123;s.id&#125;&#125;\"</span> <span class=\"attr\">on-finish-render-filters</span>&gt;</span>&#123;&#123;s.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在js文件中调用select2的API：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//select2插件实现下拉框的模糊搜索匹配功能</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'.js-example-basic-multiple'</span>).select2();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、select2初始化\"><a href=\"#三、select2初始化\" class=\"headerlink\" title=\"三、select2初始化\"></a>三、select2初始化</h3><p>通过在.select2()方法中添加一个对象实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.js-example-basic-multiple'</span>).select2(&#123;</div><div class=\"line\">  <span class=\"attr\">width</span>:<span class=\"number\">200</span>px,<span class=\"comment\">//设置默认宽度</span></div><div class=\"line\">  <span class=\"comment\">//width: 'resolve', // 需要在html用行内样式重新定义宽度</span></div><div class=\"line\">  multiple: <span class=\"string\">'multiple'</span>,     <span class=\"comment\">// 多选</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"四、select2事件\"><a href=\"#四、select2事件\" class=\"headerlink\" title=\"四、select2事件\"></a>四、select2事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#tags'</span>).on(<span class=\"string\">'select2:select'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取select当前选中值得一些信息</span></div><div class=\"line\">      <span class=\"keyword\">var</span> data = e.params.data;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      $scope.someValue = data.id;</div><div class=\"line\">      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"五、Data-sources\"><a href=\"#五、Data-sources\" class=\"headerlink\" title=\"五、Data sources\"></a>五、Data sources</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-data-example-ajax\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.js-example-data-ajax'</span>).select2(&#123;</div><div class=\"line\">  <span class=\"attr\">ajax</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'https://api.github.com/search/repositories'</span>,</div><div class=\"line\">    <span class=\"comment\">//dataType: 'json'</span></div><div class=\"line\">    <span class=\"comment\">// Additional AJAX parameters go here; see the end of this chapter for the full code of this example</span></div><div class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> query = &#123;</div><div class=\"line\">        <span class=\"attr\">search</span>: params.term,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'public'</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Query parameters will be ?search=[term]&amp;type=public</span></div><div class=\"line\">      <span class=\"keyword\">return</span> query;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"六、select2提供的event\"><a href=\"#六、select2提供的event\" class=\"headerlink\" title=\"六、select2提供的event\"></a>六、select2提供的event</h3><p>摘自网友博客：</p>\n<blockquote>\n<p>$(“#txt_tag”)<br> .on(“change”, function(e) {​})​ // 当 select2 值被改变的時候 ( 改变后触发 )​<br>.on(“select2-opening”,function(){}) // ​当下拉出现时 ( 开启选项下拉前触发)<br>  .on(“select2-open”, function() {}) //当下拉出现时(开启选项下拉后触发)​<br>.on(“select2-close”,function(){}) // 当选项关闭的时候<br>.on(“select2-highlight”,function(e){})// hover 到下拉时<br>.on(“select2-selecting”,function(e){})// 选中选项的时候 (选中前触发 ) ​​<br>.on(“select2-removing”,function(e){}) // 移除选项的时候 ( 选中前触发) ​​<br>.on(“select2-removed”,function(e){}) //移除选项的时候 ( 选中后触发 ) ​​​<br>.on(“select2-loaded”,function(e){}) // load资料的时候 ( Loaded 完成后触发)<br>.on(“select2-focus”,function(e){}) // input 获得焦点的触发<br>.on(“select2-blur”,function(e) {}) // input 失去焦点触发  </p>\n</blockquote>\n<h3 id=\"七、踩过的坑\"><a href=\"#七、踩过的坑\" class=\"headerlink\" title=\"七、踩过的坑\"></a>七、踩过的坑</h3><h4 id=\"1-在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\"><a href=\"#1-在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\" class=\"headerlink\" title=\"1.在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。\"></a>1.在angular项目里使用时，select中的ng-model未绑定选中值，看起来似乎失效了。</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tags\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-example-basic-single\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"someValue\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"s in arr\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123;s.id&#125;&#125;\"</span> <span class=\"attr\">on-finish-render-filters</span>&gt;</span>&#123;&#123;s.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>解决办法：在调用插件时，添加一个事件，将选中值赋值给变量：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取select选中值，赋值给全局变量$scope.someValue</span></div><div class=\"line\">  $(<span class=\"string\">'#tags'</span>).on(<span class=\"string\">'select2:select'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//获取select当前选中值得一些信息</span></div><div class=\"line\">      <span class=\"keyword\">var</span> data = e.params.data;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      $scope.someValue = data.id;</div><div class=\"line\">      </div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<p>总结：select2提供了很多配置参数，处理事件，可以更具业务需求进行设置。本文主要用到了select2的搜索功能，以及处理与angular同时使用时的问题。</p>\n"},{"title":"svn常用指令总结","date":"2017-12-13T09:33:18.000Z","_content":"### 常用命令总结\n#### svn add\n* 将未版本化文件/新建文件提交到版本库.\n```shell\nsvn add 文件名/目录名\n```\n* 提交文件：\n```shell\nsvn add a.js\n```\n* 提交目录：\n```shell\nsvn add dist\n```\n* 或者进入到待提交目录下：\n```shell\nsvn add .\n```\nsvn add *会忽略已经在版本控制之下的目录，需要提交工作副本中的所有未版本化文件，使用svn add --force命令，可以递归的提交未版本化文件，包括忽略文件，慎用。\n```shell\nsvn add *\nsvn add * --force\n```\n--force表示递归的提交目录下的所有文件。\n#### svn commit \n* 提交命令.将工作副本中的更改提交到版本库\n```shell\nsvn commit -m '备注'\n```\n* 缩写\n```shell\nsvn ci -m '备注'\n```\n#### svn update\n* 更新命令。将版本库的文件更新到工作副本。\n```shell\nsvn update\n```\n* 缩写：\n```shell\nsvn up\n```\n#### svn log\n* 查看提交日志。\n```shell\nsvn log\n```\n#### svn revert\n* 将文件回滚到提交前，如果有误操作，可以使用svn revert\n```shell\nsvn revert\n```\n#### tag/branch\n##### 创建tag\n* 在产品已经开发完准备上线时，就可以创建tag做版本标记，发布给客户用。\n进入到工作副本的trunk目录下：\n```shell\nsvn copy http://svn_server/xxx_repository/trunk http://svn_server/xxx_repository/tags/release-1.0 -m \"1.0 released\"\n```\n##### 创建branch分支\n在本期开发中，遇到紧急需求需要临时上线，这时可以创建一个branch分支，进行紧急开发上线。  \n* 在工作副本中创建分支：\n\n```shell\nroot@runoob:~/svn/runoob01# ls\nbranches tags     trunk\nroot@runoob:~/svn/runoob01# svn copy trunk/ branches/br_001\n回车：\nA         branches/br_001\n```\n* 提交新增的分支到版本库：\n```shell\nroot@runoob:~/svn/runoob01# svn ci -m 'add branches/br_001'\nAdding         branches/br_001\n```\n* 切换到trunk,执行svn update,然后将br_001分支合并到trunk主干：\n```shell\nroot@runoob:~/svn/runoob01/trunk# svn ../branches/br_001/\n```\n* 查看主干：\n```shell\nroot@runoob:~/svn/runoob01/trunk# ll\n```\n\n提交到版本库后，\n* 删除branches分支：\n```shell\nroot@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/branches/br_001\n```\n* 删除tag:\n```shell\nroot@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/tags/release_001\n```\n### svn status\n查看工作副本中的文件状态，缩写svn st.\n* 我们新建文件index.html，演示下svn st的使用。\n```shell\nroot@runoob:~/svn/runoob01# svn st\n?        index.html\n```\n* ? 问号表示该文件没有在版本控制下,需要先使用svn add命令添加到版本控制中\n* A 表示文件已经成功添加到版本控制中，然后再svn up提交到版本库\n* M 表示本地文件有修改\n* C 表示从版本库更新时与本地工作副本有冲突，必须手动解决冲突\n* ！表示文件已在版本控制下，但已丢失，或文件不完整\n* D 表示删除了工作副本中的文件，提交到版本库后才算删除成功\n* I 表示文件不在版本控制下，在使用svn add,,svn ci命令时会忽略文件，不操作。","source":"_posts/svn.md","raw":"---\ntitle: svn常用指令总结\ndate: 2017-12-13 17:33:18\ntags:\n    - svn\n    - frontend\n    - '版本控制'\n---\n### 常用命令总结\n#### svn add\n* 将未版本化文件/新建文件提交到版本库.\n```shell\nsvn add 文件名/目录名\n```\n* 提交文件：\n```shell\nsvn add a.js\n```\n* 提交目录：\n```shell\nsvn add dist\n```\n* 或者进入到待提交目录下：\n```shell\nsvn add .\n```\nsvn add *会忽略已经在版本控制之下的目录，需要提交工作副本中的所有未版本化文件，使用svn add --force命令，可以递归的提交未版本化文件，包括忽略文件，慎用。\n```shell\nsvn add *\nsvn add * --force\n```\n--force表示递归的提交目录下的所有文件。\n#### svn commit \n* 提交命令.将工作副本中的更改提交到版本库\n```shell\nsvn commit -m '备注'\n```\n* 缩写\n```shell\nsvn ci -m '备注'\n```\n#### svn update\n* 更新命令。将版本库的文件更新到工作副本。\n```shell\nsvn update\n```\n* 缩写：\n```shell\nsvn up\n```\n#### svn log\n* 查看提交日志。\n```shell\nsvn log\n```\n#### svn revert\n* 将文件回滚到提交前，如果有误操作，可以使用svn revert\n```shell\nsvn revert\n```\n#### tag/branch\n##### 创建tag\n* 在产品已经开发完准备上线时，就可以创建tag做版本标记，发布给客户用。\n进入到工作副本的trunk目录下：\n```shell\nsvn copy http://svn_server/xxx_repository/trunk http://svn_server/xxx_repository/tags/release-1.0 -m \"1.0 released\"\n```\n##### 创建branch分支\n在本期开发中，遇到紧急需求需要临时上线，这时可以创建一个branch分支，进行紧急开发上线。  \n* 在工作副本中创建分支：\n\n```shell\nroot@runoob:~/svn/runoob01# ls\nbranches tags     trunk\nroot@runoob:~/svn/runoob01# svn copy trunk/ branches/br_001\n回车：\nA         branches/br_001\n```\n* 提交新增的分支到版本库：\n```shell\nroot@runoob:~/svn/runoob01# svn ci -m 'add branches/br_001'\nAdding         branches/br_001\n```\n* 切换到trunk,执行svn update,然后将br_001分支合并到trunk主干：\n```shell\nroot@runoob:~/svn/runoob01/trunk# svn ../branches/br_001/\n```\n* 查看主干：\n```shell\nroot@runoob:~/svn/runoob01/trunk# ll\n```\n\n提交到版本库后，\n* 删除branches分支：\n```shell\nroot@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/branches/br_001\n```\n* 删除tag:\n```shell\nroot@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/tags/release_001\n```\n### svn status\n查看工作副本中的文件状态，缩写svn st.\n* 我们新建文件index.html，演示下svn st的使用。\n```shell\nroot@runoob:~/svn/runoob01# svn st\n?        index.html\n```\n* ? 问号表示该文件没有在版本控制下,需要先使用svn add命令添加到版本控制中\n* A 表示文件已经成功添加到版本控制中，然后再svn up提交到版本库\n* M 表示本地文件有修改\n* C 表示从版本库更新时与本地工作副本有冲突，必须手动解决冲突\n* ！表示文件已在版本控制下，但已丢失，或文件不完整\n* D 表示删除了工作副本中的文件，提交到版本库后才算删除成功\n* I 表示文件不在版本控制下，在使用svn add,,svn ci命令时会忽略文件，不操作。","slug":"svn","published":1,"updated":"2017-12-13T09:44:09.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzid0010mo01wnbz1x3s","content":"<h3 id=\"常用命令总结\"><a href=\"#常用命令总结\" class=\"headerlink\" title=\"常用命令总结\"></a>常用命令总结</h3><h4 id=\"svn-add\"><a href=\"#svn-add\" class=\"headerlink\" title=\"svn add\"></a>svn add</h4><ul>\n<li><p>将未版本化文件/新建文件提交到版本库.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add 文件名/目录名</div></pre></td></tr></table></figure>\n</li>\n<li><p>提交文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add a.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>提交目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add dist</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者进入到待提交目录下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add .</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>svn add *会忽略已经在版本控制之下的目录，需要提交工作副本中的所有未版本化文件，使用svn add –force命令，可以递归的提交未版本化文件，包括忽略文件，慎用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add *</div><div class=\"line\">svn add * --force</div></pre></td></tr></table></figure></p>\n<p>–force表示递归的提交目录下的所有文件。</p>\n<h4 id=\"svn-commit\"><a href=\"#svn-commit\" class=\"headerlink\" title=\"svn commit\"></a>svn commit</h4><ul>\n<li><p>提交命令.将工作副本中的更改提交到版本库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn commit -m &apos;备注&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>缩写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn ci -m &apos;备注&apos;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"svn-update\"><a href=\"#svn-update\" class=\"headerlink\" title=\"svn update\"></a>svn update</h4><ul>\n<li><p>更新命令。将版本库的文件更新到工作副本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn update</div></pre></td></tr></table></figure>\n</li>\n<li><p>缩写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn up</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"svn-log\"><a href=\"#svn-log\" class=\"headerlink\" title=\"svn log\"></a>svn log</h4><ul>\n<li>查看提交日志。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn log</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"svn-revert\"><a href=\"#svn-revert\" class=\"headerlink\" title=\"svn revert\"></a>svn revert</h4><ul>\n<li>将文件回滚到提交前，如果有误操作，可以使用svn revert<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn revert</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"tag-branch\"><a href=\"#tag-branch\" class=\"headerlink\" title=\"tag/branch\"></a>tag/branch</h4><h5 id=\"创建tag\"><a href=\"#创建tag\" class=\"headerlink\" title=\"创建tag\"></a>创建tag</h5><ul>\n<li>在产品已经开发完准备上线时，就可以创建tag做版本标记，发布给客户用。<br>进入到工作副本的trunk目录下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn copy http://svn_server/xxx_repository/trunk http://svn_server/xxx_repository/tags/release-1.0 -m &quot;1.0 released&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"创建branch分支\"><a href=\"#创建branch分支\" class=\"headerlink\" title=\"创建branch分支\"></a>创建branch分支</h5><p>在本期开发中，遇到紧急需求需要临时上线，这时可以创建一个branch分支，进行紧急开发上线。  </p>\n<ul>\n<li>在工作副本中创建分支：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01# ls</div><div class=\"line\">branches tags     trunk</div><div class=\"line\">root@runoob:~/svn/runoob01# svn copy trunk/ branches/br_001</div><div class=\"line\">回车：</div><div class=\"line\">A         branches/br_001</div></pre></td></tr></table></figure>\n<ul>\n<li><p>提交新增的分支到版本库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01# svn ci -m &apos;add branches/br_001&apos;</div><div class=\"line\">Adding         branches/br_001</div></pre></td></tr></table></figure>\n</li>\n<li><p>切换到trunk,执行svn update,然后将br_001分支合并到trunk主干：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01/trunk# svn ../branches/br_001/</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看主干：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01/trunk# ll</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>提交到版本库后，</p>\n<ul>\n<li><p>删除branches分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/branches/br_001</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除tag:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/tags/release_001</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"svn-status\"><a href=\"#svn-status\" class=\"headerlink\" title=\"svn status\"></a>svn status</h3><p>查看工作副本中的文件状态，缩写svn st.</p>\n<ul>\n<li><p>我们新建文件index.html，演示下svn st的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01# svn st</div><div class=\"line\">?        index.html</div></pre></td></tr></table></figure>\n</li>\n<li><p>? 问号表示该文件没有在版本控制下,需要先使用svn add命令添加到版本控制中</p>\n</li>\n<li>A 表示文件已经成功添加到版本控制中，然后再svn up提交到版本库</li>\n<li>M 表示本地文件有修改</li>\n<li>C 表示从版本库更新时与本地工作副本有冲突，必须手动解决冲突</li>\n<li>！表示文件已在版本控制下，但已丢失，或文件不完整</li>\n<li>D 表示删除了工作副本中的文件，提交到版本库后才算删除成功</li>\n<li>I 表示文件不在版本控制下，在使用svn add,,svn ci命令时会忽略文件，不操作。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令总结\"><a href=\"#常用命令总结\" class=\"headerlink\" title=\"常用命令总结\"></a>常用命令总结</h3><h4 id=\"svn-add\"><a href=\"#svn-add\" class=\"headerlink\" title=\"svn add\"></a>svn add</h4><ul>\n<li><p>将未版本化文件/新建文件提交到版本库.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add 文件名/目录名</div></pre></td></tr></table></figure>\n</li>\n<li><p>提交文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add a.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>提交目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add dist</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者进入到待提交目录下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add .</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>svn add *会忽略已经在版本控制之下的目录，需要提交工作副本中的所有未版本化文件，使用svn add –force命令，可以递归的提交未版本化文件，包括忽略文件，慎用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn add *</div><div class=\"line\">svn add * --force</div></pre></td></tr></table></figure></p>\n<p>–force表示递归的提交目录下的所有文件。</p>\n<h4 id=\"svn-commit\"><a href=\"#svn-commit\" class=\"headerlink\" title=\"svn commit\"></a>svn commit</h4><ul>\n<li><p>提交命令.将工作副本中的更改提交到版本库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn commit -m &apos;备注&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>缩写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn ci -m &apos;备注&apos;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"svn-update\"><a href=\"#svn-update\" class=\"headerlink\" title=\"svn update\"></a>svn update</h4><ul>\n<li><p>更新命令。将版本库的文件更新到工作副本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn update</div></pre></td></tr></table></figure>\n</li>\n<li><p>缩写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn up</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"svn-log\"><a href=\"#svn-log\" class=\"headerlink\" title=\"svn log\"></a>svn log</h4><ul>\n<li>查看提交日志。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn log</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"svn-revert\"><a href=\"#svn-revert\" class=\"headerlink\" title=\"svn revert\"></a>svn revert</h4><ul>\n<li>将文件回滚到提交前，如果有误操作，可以使用svn revert<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn revert</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"tag-branch\"><a href=\"#tag-branch\" class=\"headerlink\" title=\"tag/branch\"></a>tag/branch</h4><h5 id=\"创建tag\"><a href=\"#创建tag\" class=\"headerlink\" title=\"创建tag\"></a>创建tag</h5><ul>\n<li>在产品已经开发完准备上线时，就可以创建tag做版本标记，发布给客户用。<br>进入到工作副本的trunk目录下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svn copy http://svn_server/xxx_repository/trunk http://svn_server/xxx_repository/tags/release-1.0 -m &quot;1.0 released&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"创建branch分支\"><a href=\"#创建branch分支\" class=\"headerlink\" title=\"创建branch分支\"></a>创建branch分支</h5><p>在本期开发中，遇到紧急需求需要临时上线，这时可以创建一个branch分支，进行紧急开发上线。  </p>\n<ul>\n<li>在工作副本中创建分支：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01# ls</div><div class=\"line\">branches tags     trunk</div><div class=\"line\">root@runoob:~/svn/runoob01# svn copy trunk/ branches/br_001</div><div class=\"line\">回车：</div><div class=\"line\">A         branches/br_001</div></pre></td></tr></table></figure>\n<ul>\n<li><p>提交新增的分支到版本库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01# svn ci -m &apos;add branches/br_001&apos;</div><div class=\"line\">Adding         branches/br_001</div></pre></td></tr></table></figure>\n</li>\n<li><p>切换到trunk,执行svn update,然后将br_001分支合并到trunk主干：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01/trunk# svn ../branches/br_001/</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看主干：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01/trunk# ll</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>提交到版本库后，</p>\n<ul>\n<li><p>删除branches分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/branches/br_001</div></pre></td></tr></table></figure>\n</li>\n<li><p>删除tag:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01#  svn rm svn://191.111.111.11/xxx_repository/tags/release_001</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"svn-status\"><a href=\"#svn-status\" class=\"headerlink\" title=\"svn status\"></a>svn status</h3><p>查看工作副本中的文件状态，缩写svn st.</p>\n<ul>\n<li><p>我们新建文件index.html，演示下svn st的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@runoob:~/svn/runoob01# svn st</div><div class=\"line\">?        index.html</div></pre></td></tr></table></figure>\n</li>\n<li><p>? 问号表示该文件没有在版本控制下,需要先使用svn add命令添加到版本控制中</p>\n</li>\n<li>A 表示文件已经成功添加到版本控制中，然后再svn up提交到版本库</li>\n<li>M 表示本地文件有修改</li>\n<li>C 表示从版本库更新时与本地工作副本有冲突，必须手动解决冲突</li>\n<li>！表示文件已在版本控制下，但已丢失，或文件不完整</li>\n<li>D 表示删除了工作副本中的文件，提交到版本库后才算删除成功</li>\n<li>I 表示文件不在版本控制下，在使用svn add,,svn ci命令时会忽略文件，不操作。</li>\n</ul>\n"},{"title":"angular+ui-select+select2","date":"2017-12-07T03:23:56.000Z","_content":"今天\b项目需求，增加一个下拉搜索框，找来了ui-selet插件,就插件的使用做一下\b总结分享。\n### 1.引入\b\nnpm：\n```shell\nnpm install ui-select\n```\n在angular项目的文件引入模块：\n```js\nimpprt 'ui-select';\n\nvar module = angular.module('myapp', ['ui.select', 'ngSanitize']);\n```\n小坑：\n* \b\b这个ui-select版本还不完善，需要自己手动引入下css文件，在\bnode_module中找到ui-slect的主文件index.js，将css文件导出一下，如下：\n```js\nrequire('./dist/select.js');\nrequire('./dist/select.css');\nmodule.exports = 'ui.select';\n```\n* 此外需要引入angular依赖文件：\n```html\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-sanitize.js\"></script>\n\n```\n\n### 2.基本使用\n在html文件中写入：\n\n```html\n\n<ui-select ng-disabled=\"disabled\" ng-model=\"arr.selected\" style=\"min-width: 300px;\">\n    <ui-select-match placeholder=\"请选择\">\n        <span ng-bind=\"$select.selected.name\"></span>\n    </ui-select-match>\n    <ui-select-choices repeat=\"item in arr | filter:   $select.search\"><span ng-bind=\"item.name\"></span>\n    </ui-select-choices>\n</ui-select>\n\n```\njs文件：\n```js\n'use strict';\n\nvar app = angular.module('demo', ['ngSanitize', 'ui.select']);\napp.controller('DemoCtrl', function ($scope, $http, $timeout, $interval) {\n    $scope.arr = [\n        {\n            name:'slecet1'\n            id:1\n        },\n        {\n            name:'slecet2'\n            id:2\n        }\n    ]\n}\n```\n### 3.增加event事件\n在使用select2插件时，\b发觉事件ng-click和\bng-change并不会触发执行。\b这个问题在\bui-select插件的event事件中可以\b解决。on-selsect=\"expression\"：\n```html\n<ui-select ng-disabled=\"disabled\" ng-model=\"arr.selected\" on-select=\"change($item, $model)\" style=\"min-width: 300px;\">\n    <ui-select-match placeholder=\"请选择\">\n        <span ng-bind=\"$select.selected.name\"></span>\n    </ui-select-match>\n    <ui-select-choices repeat=\"item in arr | filter:   $select.search\"><span ng-bind=\"item.name\"></span>\n    </ui-select-choices>\n</ui-select>\n```\n在js文件：\n```js\n//change()函数可以取到当前选中的选项信息$item, $model\n$scope.change = function($item, $model) {\n        //这里写入业务逻辑代码\n        $scope.id = $item.id;\n    }\n```\n### 4.设置ui-select默认值\n```js\n$scope.arr.selected = {//ui-select 赋初值\n    id: '1',\n    name: '111'\n}\n```\n因为在给ui-select组件绑定的是对象，所以在设置默认值的时候也必须保持类型一致。\n### 5.总结\n\n小结：\b更多使用方法参看官网例子：https://github.com/angular-ui/ui-select\n","source":"_posts/ui-select.md","raw":"---\ntitle: angular+ui-select+select2\ndate: 2017-12-07 11:23:56\ntags:\n    - frontend\n    - plugin\n    - angular\n---\n今天\b项目需求，增加一个下拉搜索框，找来了ui-selet插件,就插件的使用做一下\b总结分享。\n### 1.引入\b\nnpm：\n```shell\nnpm install ui-select\n```\n在angular项目的文件引入模块：\n```js\nimpprt 'ui-select';\n\nvar module = angular.module('myapp', ['ui.select', 'ngSanitize']);\n```\n小坑：\n* \b\b这个ui-select版本还不完善，需要自己手动引入下css文件，在\bnode_module中找到ui-slect的主文件index.js，将css文件导出一下，如下：\n```js\nrequire('./dist/select.js');\nrequire('./dist/select.css');\nmodule.exports = 'ui.select';\n```\n* 此外需要引入angular依赖文件：\n```html\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-sanitize.js\"></script>\n\n```\n\n### 2.基本使用\n在html文件中写入：\n\n```html\n\n<ui-select ng-disabled=\"disabled\" ng-model=\"arr.selected\" style=\"min-width: 300px;\">\n    <ui-select-match placeholder=\"请选择\">\n        <span ng-bind=\"$select.selected.name\"></span>\n    </ui-select-match>\n    <ui-select-choices repeat=\"item in arr | filter:   $select.search\"><span ng-bind=\"item.name\"></span>\n    </ui-select-choices>\n</ui-select>\n\n```\njs文件：\n```js\n'use strict';\n\nvar app = angular.module('demo', ['ngSanitize', 'ui.select']);\napp.controller('DemoCtrl', function ($scope, $http, $timeout, $interval) {\n    $scope.arr = [\n        {\n            name:'slecet1'\n            id:1\n        },\n        {\n            name:'slecet2'\n            id:2\n        }\n    ]\n}\n```\n### 3.增加event事件\n在使用select2插件时，\b发觉事件ng-click和\bng-change并不会触发执行。\b这个问题在\bui-select插件的event事件中可以\b解决。on-selsect=\"expression\"：\n```html\n<ui-select ng-disabled=\"disabled\" ng-model=\"arr.selected\" on-select=\"change($item, $model)\" style=\"min-width: 300px;\">\n    <ui-select-match placeholder=\"请选择\">\n        <span ng-bind=\"$select.selected.name\"></span>\n    </ui-select-match>\n    <ui-select-choices repeat=\"item in arr | filter:   $select.search\"><span ng-bind=\"item.name\"></span>\n    </ui-select-choices>\n</ui-select>\n```\n在js文件：\n```js\n//change()函数可以取到当前选中的选项信息$item, $model\n$scope.change = function($item, $model) {\n        //这里写入业务逻辑代码\n        $scope.id = $item.id;\n    }\n```\n### 4.设置ui-select默认值\n```js\n$scope.arr.selected = {//ui-select 赋初值\n    id: '1',\n    name: '111'\n}\n```\n因为在给ui-select组件绑定的是对象，所以在设置默认值的时候也必须保持类型一致。\n### 5.总结\n\n小结：\b更多使用方法参看官网例子：https://github.com/angular-ui/ui-select\n","slug":"ui-select","published":1,"updated":"2017-12-07T06:40:37.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzif0012mo01nx972jkx","content":"<p>今天\b项目需求，增加一个下拉搜索框，找来了ui-selet插件,就插件的使用做一下\b总结分享。</p>\n<h3 id=\"1-引入\"><a href=\"#1-引入\" class=\"headerlink\" title=\"1.引入\b\"></a>1.引入\b</h3><p>npm：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install ui-select</div></pre></td></tr></table></figure></p>\n<p>在angular项目的文件引入模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">impprt <span class=\"string\">'ui-select'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = angular.module(<span class=\"string\">'myapp'</span>, [<span class=\"string\">'ui.select'</span>, <span class=\"string\">'ngSanitize'</span>]);</div></pre></td></tr></table></figure></p>\n<p>小坑：</p>\n<ul>\n<li><p>\b\b这个ui-select版本还不完善，需要自己手动引入下css文件，在\bnode_module中找到ui-slect的主文件index.js，将css文件导出一下，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./dist/select.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./dist/select.css'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'ui.select'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>此外需要引入angular依赖文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-sanitize.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2.基本使用\"></a>2.基本使用</h3><p>在html文件中写入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ui-select</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"disabled\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"arr.selected\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"min-width: 300px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-match</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请选择\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"$select.selected.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-match</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-choices</span> <span class=\"attr\">repeat</span>=<span class=\"string\">\"item in arr | filter:   $select.search\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"item.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-choices</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ui-select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>js文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'demo'</span>, [<span class=\"string\">'ngSanitize'</span>, <span class=\"string\">'ui.select'</span>]);</div><div class=\"line\">app.controller(<span class=\"string\">'DemoCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope, $http, $timeout, $interval</span>) </span>&#123;</div><div class=\"line\">    $scope.arr = [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">'slecet1'</span></div><div class=\"line\">            id:<span class=\"number\">1</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">'slecet2'</span></div><div class=\"line\">            id:<span class=\"number\">2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-增加event事件\"><a href=\"#3-增加event事件\" class=\"headerlink\" title=\"3.增加event事件\"></a>3.增加event事件</h3><p>在使用select2插件时，\b发觉事件ng-click和\bng-change并不会触发执行。\b这个问题在\bui-select插件的event事件中可以\b解决。on-selsect=”expression”：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ui-select</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"disabled\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"arr.selected\"</span> <span class=\"attr\">on-select</span>=<span class=\"string\">\"change($item, $model)\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"min-width: 300px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-match</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请选择\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"$select.selected.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-match</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-choices</span> <span class=\"attr\">repeat</span>=<span class=\"string\">\"item in arr | filter:   $select.search\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"item.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-choices</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ui-select</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在js文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//change()函数可以取到当前选中的选项信息$item, $model</span></div><div class=\"line\">$scope.change = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$item, $model</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//这里写入业务逻辑代码</span></div><div class=\"line\">        $scope.id = $item.id;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-设置ui-select默认值\"><a href=\"#4-设置ui-select默认值\" class=\"headerlink\" title=\"4.设置ui-select默认值\"></a>4.设置ui-select默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.arr.selected = &#123;<span class=\"comment\">//ui-select 赋初值</span></div><div class=\"line\">    id: <span class=\"string\">'1'</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'111'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为在给ui-select组件绑定的是对象，所以在设置默认值的时候也必须保持类型一致。</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><p>小结：\b更多使用方法参看官网例子：<a href=\"https://github.com/angular-ui/ui-select\" target=\"_blank\" rel=\"noopener\">https://github.com/angular-ui/ui-select</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天\b项目需求，增加一个下拉搜索框，找来了ui-selet插件,就插件的使用做一下\b总结分享。</p>\n<h3 id=\"1-引入\"><a href=\"#1-引入\" class=\"headerlink\" title=\"1.引入\b\"></a>1.引入\b</h3><p>npm：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install ui-select</div></pre></td></tr></table></figure></p>\n<p>在angular项目的文件引入模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">impprt <span class=\"string\">'ui-select'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = angular.module(<span class=\"string\">'myapp'</span>, [<span class=\"string\">'ui.select'</span>, <span class=\"string\">'ngSanitize'</span>]);</div></pre></td></tr></table></figure></p>\n<p>小坑：</p>\n<ul>\n<li><p>\b\b这个ui-select版本还不完善，需要自己手动引入下css文件，在\bnode_module中找到ui-slect的主文件index.js，将css文件导出一下，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./dist/select.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./dist/select.css'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'ui.select'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>此外需要引入angular依赖文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-sanitize.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2.基本使用\"></a>2.基本使用</h3><p>在html文件中写入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ui-select</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"disabled\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"arr.selected\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"min-width: 300px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-match</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请选择\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"$select.selected.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-match</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-choices</span> <span class=\"attr\">repeat</span>=<span class=\"string\">\"item in arr | filter:   $select.search\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"item.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-choices</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ui-select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>js文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'demo'</span>, [<span class=\"string\">'ngSanitize'</span>, <span class=\"string\">'ui.select'</span>]);</div><div class=\"line\">app.controller(<span class=\"string\">'DemoCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope, $http, $timeout, $interval</span>) </span>&#123;</div><div class=\"line\">    $scope.arr = [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">'slecet1'</span></div><div class=\"line\">            id:<span class=\"number\">1</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">'slecet2'</span></div><div class=\"line\">            id:<span class=\"number\">2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-增加event事件\"><a href=\"#3-增加event事件\" class=\"headerlink\" title=\"3.增加event事件\"></a>3.增加event事件</h3><p>在使用select2插件时，\b发觉事件ng-click和\bng-change并不会触发执行。\b这个问题在\bui-select插件的event事件中可以\b解决。on-selsect=”expression”：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ui-select</span> <span class=\"attr\">ng-disabled</span>=<span class=\"string\">\"disabled\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"arr.selected\"</span> <span class=\"attr\">on-select</span>=<span class=\"string\">\"change($item, $model)\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"min-width: 300px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-match</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请选择\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"$select.selected.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-match</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ui-select-choices</span> <span class=\"attr\">repeat</span>=<span class=\"string\">\"item in arr | filter:   $select.search\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"item.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ui-select-choices</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ui-select</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在js文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//change()函数可以取到当前选中的选项信息$item, $model</span></div><div class=\"line\">$scope.change = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$item, $model</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//这里写入业务逻辑代码</span></div><div class=\"line\">        $scope.id = $item.id;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-设置ui-select默认值\"><a href=\"#4-设置ui-select默认值\" class=\"headerlink\" title=\"4.设置ui-select默认值\"></a>4.设置ui-select默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.arr.selected = &#123;<span class=\"comment\">//ui-select 赋初值</span></div><div class=\"line\">    id: <span class=\"string\">'1'</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'111'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为在给ui-select组件绑定的是对象，所以在设置默认值的时候也必须保持类型一致。</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><p>小结：\b更多使用方法参看官网例子：<a href=\"https://github.com/angular-ui/ui-select\" target=\"_blank\" rel=\"noopener\">https://github.com/angular-ui/ui-select</a></p>\n"},{"title":"webpack2简单使用","date":"2017-07-18T12:17:28.000Z","_content":"\nwebpack是一个模块打包器。能够对模块的依赖关系进行静态分析，然后根据指定规则生成静态资源。webpack2在配置文件格式上做了一些变动，比webpack1新增了\n\n安装\n----\n前提是安装好[Node.js](https://nodejs.org/en/download/)，  \n全局安装：\n\n    npm install -g webpack\n\n作为项目开发依赖安装：\n\n    npm install --save-dev webpack\n\n使用\n----\n这里以新建配置文件来执行，项目根目录下新建webpack.config.js文件，配置如下：\n\n    var webpack = require('webpack');\n    var path = require('path');\n\n    var config = {\n        entry:\"entry.js\",//入口文件路径\n        output:{//输出文件\n            path:path.resolve(__dirname,'build'),\n            filename:\"[name].bundle.js\"\n        },\n        module:{//模块\n            ...\n        }\n    }\n\n    module.exports = config;\n\n配置文件的结构大致是以上的结构。\n\n运行\n----\n\n    $ webpack\n\n常用xxx-Loader的使用：\n----\nstyle-loader和css-loader\n----  \n\nstyle-loader把js字符串生成为style节点；css-loader是把css转换为js输出。两者经常一起使用。\n\n安装\n----\n\n    npm install --save-dev css-loader\n\n使用\n----\n在webpack.config.js文件配置如下：\n\n    module:{\n        rules:[{\n            test:/\\.css$/,\n            use:[\n              { loader:\"stycss-loader\" },\n              { loader:\"css-loader\" }\n            ]\n        }]\n    }\n\nhtml-loader\n----  \nhtml-loader是把html文件转换为js.  \n\n安装\n----  \n\n    npm install --save-dev html-loader\n\n使用\n----  \n在webpack.config.js文件配置如下：  \n\n    module:{\n        rules:[{\n            test:/\\.html$/,\n            use:[\n                {\n                    loader:\"html-loader\",\n                    option: {\n                        minimize:true\n                    }\n                }\n            ]\n        }]\n    }\n\nless-loader\n----\nless-loader是把less编译为css.  \n\n安装\n----\n\n    npm install --save-dev less-loader\n\n使用\n----\n在webpack.config.js文件配置如下：\n\n    module:{\n        rules:[\n            {\n                test:/\\.less$/,\n                use:[\n                    {\n                        loader:\"style-loader\"\n                    },\n                    {\n                        loader:\"css-loader\"\n                    },\n                    {\n                        loader:\"less-loader\"\n                    }\n                ]\n            }\n        ]\n    }\n\nsass-loader\n----  \nsass-loader是将sass编译为css。\n安装\n----  \n\n    npm install --save-dev sass-loader\n\n使用\n----\n在webpack.config.js文件配置如下：  \n\n    modu:{\n        rules:[\n            {\n                test:/.\\scss$/,\n                use:[\n                    {\n                        loader:\"style-loader\"\n                    },\n                    {\n                        loader:\"css-loader\",\n                        option:{ sourceMap:true }\n                    },\n                    {\n                        loader:\"sass-loader\",\n                        option:{ sourceMap:true }\n                    }\n                ]\n            }\n        ]\n    }\n\nsourceMap:true用于启用CSS的source map  \n\n插件使用\n----\n想要使用一个插件，你只需要require()它，然后把它添加到plugins数组中。  \n\nBannerPlugin\n----\n内置插件BannerPlugin，用来给输出的文件头部添加注释信息。\n\n使用\n----\n在webpack.config.js文件配置如下：   \n\n    plugins:[\n        new webpack.BannerPlugin('添加注释信息...')\n    ]\n\nHtmlWebpackPlugin\n----\n简化HTML文件的创建，为webpack包提供服务，可以用来生成HTML5文件。\n\n安装\n----\n\n    npm install --save-dev html-webpack-plugin\n\n使用\n----\n在webpack.config.js文件配置如下：  \n\n    var webpack = require('webpack');\n    var path = require('path');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n\n    var config = {\n        entry:\"./entry.js\",\n        output:{\n            path：path.resolve(__path,'build'),\n            filename:\"bundle.js\"\n        }\n        plugins:[\n            new HtmlWebpackPlugin()\n        ]\n    }\n\n    module.exports = config;\n\n这将会生成一个包含bundle.js引入信息的HTML文件。\n","source":"_posts/webpack-use.md","raw":"---\ntitle: webpack2简单使用\ndate: 2017-07-18 20:17:28\ntags:\n---\n\nwebpack是一个模块打包器。能够对模块的依赖关系进行静态分析，然后根据指定规则生成静态资源。webpack2在配置文件格式上做了一些变动，比webpack1新增了\n\n安装\n----\n前提是安装好[Node.js](https://nodejs.org/en/download/)，  \n全局安装：\n\n    npm install -g webpack\n\n作为项目开发依赖安装：\n\n    npm install --save-dev webpack\n\n使用\n----\n这里以新建配置文件来执行，项目根目录下新建webpack.config.js文件，配置如下：\n\n    var webpack = require('webpack');\n    var path = require('path');\n\n    var config = {\n        entry:\"entry.js\",//入口文件路径\n        output:{//输出文件\n            path:path.resolve(__dirname,'build'),\n            filename:\"[name].bundle.js\"\n        },\n        module:{//模块\n            ...\n        }\n    }\n\n    module.exports = config;\n\n配置文件的结构大致是以上的结构。\n\n运行\n----\n\n    $ webpack\n\n常用xxx-Loader的使用：\n----\nstyle-loader和css-loader\n----  \n\nstyle-loader把js字符串生成为style节点；css-loader是把css转换为js输出。两者经常一起使用。\n\n安装\n----\n\n    npm install --save-dev css-loader\n\n使用\n----\n在webpack.config.js文件配置如下：\n\n    module:{\n        rules:[{\n            test:/\\.css$/,\n            use:[\n              { loader:\"stycss-loader\" },\n              { loader:\"css-loader\" }\n            ]\n        }]\n    }\n\nhtml-loader\n----  \nhtml-loader是把html文件转换为js.  \n\n安装\n----  \n\n    npm install --save-dev html-loader\n\n使用\n----  \n在webpack.config.js文件配置如下：  \n\n    module:{\n        rules:[{\n            test:/\\.html$/,\n            use:[\n                {\n                    loader:\"html-loader\",\n                    option: {\n                        minimize:true\n                    }\n                }\n            ]\n        }]\n    }\n\nless-loader\n----\nless-loader是把less编译为css.  \n\n安装\n----\n\n    npm install --save-dev less-loader\n\n使用\n----\n在webpack.config.js文件配置如下：\n\n    module:{\n        rules:[\n            {\n                test:/\\.less$/,\n                use:[\n                    {\n                        loader:\"style-loader\"\n                    },\n                    {\n                        loader:\"css-loader\"\n                    },\n                    {\n                        loader:\"less-loader\"\n                    }\n                ]\n            }\n        ]\n    }\n\nsass-loader\n----  \nsass-loader是将sass编译为css。\n安装\n----  \n\n    npm install --save-dev sass-loader\n\n使用\n----\n在webpack.config.js文件配置如下：  \n\n    modu:{\n        rules:[\n            {\n                test:/.\\scss$/,\n                use:[\n                    {\n                        loader:\"style-loader\"\n                    },\n                    {\n                        loader:\"css-loader\",\n                        option:{ sourceMap:true }\n                    },\n                    {\n                        loader:\"sass-loader\",\n                        option:{ sourceMap:true }\n                    }\n                ]\n            }\n        ]\n    }\n\nsourceMap:true用于启用CSS的source map  \n\n插件使用\n----\n想要使用一个插件，你只需要require()它，然后把它添加到plugins数组中。  \n\nBannerPlugin\n----\n内置插件BannerPlugin，用来给输出的文件头部添加注释信息。\n\n使用\n----\n在webpack.config.js文件配置如下：   \n\n    plugins:[\n        new webpack.BannerPlugin('添加注释信息...')\n    ]\n\nHtmlWebpackPlugin\n----\n简化HTML文件的创建，为webpack包提供服务，可以用来生成HTML5文件。\n\n安装\n----\n\n    npm install --save-dev html-webpack-plugin\n\n使用\n----\n在webpack.config.js文件配置如下：  \n\n    var webpack = require('webpack');\n    var path = require('path');\n    var HtmlWebpackPlugin = require('html-webpack-plugin');\n\n    var config = {\n        entry:\"./entry.js\",\n        output:{\n            path：path.resolve(__path,'build'),\n            filename:\"bundle.js\"\n        }\n        plugins:[\n            new HtmlWebpackPlugin()\n        ]\n    }\n\n    module.exports = config;\n\n这将会生成一个包含bundle.js引入信息的HTML文件。\n","slug":"webpack-use","published":1,"updated":"2017-11-14T06:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzig0015mo01yhmtho0v","content":"<p>webpack是一个模块打包器。能够对模块的依赖关系进行静态分析，然后根据指定规则生成静态资源。webpack2在配置文件格式上做了一些变动，比webpack1新增了</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前提是安装好<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.js</a>，<br>全局安装：</p>\n<pre><code>npm install -g webpack\n</code></pre><p>作为项目开发依赖安装：</p>\n<pre><code>npm install --save-dev webpack\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>这里以新建配置文件来执行，项目根目录下新建webpack.config.js文件，配置如下：</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar path = require(&apos;path&apos;);\n\nvar config = {\n    entry:&quot;entry.js&quot;,//入口文件路径\n    output:{//输出文件\n        path:path.resolve(__dirname,&apos;build&apos;),\n        filename:&quot;[name].bundle.js&quot;\n    },\n    module:{//模块\n        ...\n    }\n}\n\nmodule.exports = config;\n</code></pre><p>配置文件的结构大致是以上的结构。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><pre><code>$ webpack\n</code></pre><h2 id=\"常用xxx-Loader的使用：\"><a href=\"#常用xxx-Loader的使用：\" class=\"headerlink\" title=\"常用xxx-Loader的使用：\"></a>常用xxx-Loader的使用：</h2><h2 id=\"style-loader和css-loader\"><a href=\"#style-loader和css-loader\" class=\"headerlink\" title=\"style-loader和css-loader\"></a>style-loader和css-loader</h2><p>style-loader把js字符串生成为style节点；css-loader是把css转换为js输出。两者经常一起使用。</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev css-loader\n</code></pre><h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：</p>\n<pre><code>module:{\n    rules:[{\n        test:/\\.css$/,\n        use:[\n          { loader:&quot;stycss-loader&quot; },\n          { loader:&quot;css-loader&quot; }\n        ]\n    }]\n}\n</code></pre><h2 id=\"html-loader\"><a href=\"#html-loader\" class=\"headerlink\" title=\"html-loader\"></a>html-loader</h2><p>html-loader是把html文件转换为js.  </p>\n<h2 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev html-loader\n</code></pre><h2 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：  </p>\n<pre><code>module:{\n    rules:[{\n        test:/\\.html$/,\n        use:[\n            {\n                loader:&quot;html-loader&quot;,\n                option: {\n                    minimize:true\n                }\n            }\n        ]\n    }]\n}\n</code></pre><h2 id=\"less-loader\"><a href=\"#less-loader\" class=\"headerlink\" title=\"less-loader\"></a>less-loader</h2><p>less-loader是把less编译为css.  </p>\n<h2 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev less-loader\n</code></pre><h2 id=\"使用-3\"><a href=\"#使用-3\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：</p>\n<pre><code>module:{\n    rules:[\n        {\n            test:/\\.less$/,\n            use:[\n                {\n                    loader:&quot;style-loader&quot;\n                },\n                {\n                    loader:&quot;css-loader&quot;\n                },\n                {\n                    loader:&quot;less-loader&quot;\n                }\n            ]\n        }\n    ]\n}\n</code></pre><h2 id=\"sass-loader\"><a href=\"#sass-loader\" class=\"headerlink\" title=\"sass-loader\"></a>sass-loader</h2><p>sass-loader是将sass编译为css。</p>\n<h2 id=\"安装-4\"><a href=\"#安装-4\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev sass-loader\n</code></pre><h2 id=\"使用-4\"><a href=\"#使用-4\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：  </p>\n<pre><code>modu:{\n    rules:[\n        {\n            test:/.\\scss$/,\n            use:[\n                {\n                    loader:&quot;style-loader&quot;\n                },\n                {\n                    loader:&quot;css-loader&quot;,\n                    option:{ sourceMap:true }\n                },\n                {\n                    loader:&quot;sass-loader&quot;,\n                    option:{ sourceMap:true }\n                }\n            ]\n        }\n    ]\n}\n</code></pre><p>sourceMap:true用于启用CSS的source map  </p>\n<h2 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h2><p>想要使用一个插件，你只需要require()它，然后把它添加到plugins数组中。  </p>\n<h2 id=\"BannerPlugin\"><a href=\"#BannerPlugin\" class=\"headerlink\" title=\"BannerPlugin\"></a>BannerPlugin</h2><p>内置插件BannerPlugin，用来给输出的文件头部添加注释信息。</p>\n<h2 id=\"使用-5\"><a href=\"#使用-5\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：   </p>\n<pre><code>plugins:[\n    new webpack.BannerPlugin(&apos;添加注释信息...&apos;)\n]\n</code></pre><h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h2><p>简化HTML文件的创建，为webpack包提供服务，可以用来生成HTML5文件。</p>\n<h2 id=\"安装-5\"><a href=\"#安装-5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev html-webpack-plugin\n</code></pre><h2 id=\"使用-6\"><a href=\"#使用-6\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：  </p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar path = require(&apos;path&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nvar config = {\n    entry:&quot;./entry.js&quot;,\n    output:{\n        path：path.resolve(__path,&apos;build&apos;),\n        filename:&quot;bundle.js&quot;\n    }\n    plugins:[\n        new HtmlWebpackPlugin()\n    ]\n}\n\nmodule.exports = config;\n</code></pre><p>这将会生成一个包含bundle.js引入信息的HTML文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>webpack是一个模块打包器。能够对模块的依赖关系进行静态分析，然后根据指定规则生成静态资源。webpack2在配置文件格式上做了一些变动，比webpack1新增了</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前提是安装好<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.js</a>，<br>全局安装：</p>\n<pre><code>npm install -g webpack\n</code></pre><p>作为项目开发依赖安装：</p>\n<pre><code>npm install --save-dev webpack\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>这里以新建配置文件来执行，项目根目录下新建webpack.config.js文件，配置如下：</p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar path = require(&apos;path&apos;);\n\nvar config = {\n    entry:&quot;entry.js&quot;,//入口文件路径\n    output:{//输出文件\n        path:path.resolve(__dirname,&apos;build&apos;),\n        filename:&quot;[name].bundle.js&quot;\n    },\n    module:{//模块\n        ...\n    }\n}\n\nmodule.exports = config;\n</code></pre><p>配置文件的结构大致是以上的结构。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><pre><code>$ webpack\n</code></pre><h2 id=\"常用xxx-Loader的使用：\"><a href=\"#常用xxx-Loader的使用：\" class=\"headerlink\" title=\"常用xxx-Loader的使用：\"></a>常用xxx-Loader的使用：</h2><h2 id=\"style-loader和css-loader\"><a href=\"#style-loader和css-loader\" class=\"headerlink\" title=\"style-loader和css-loader\"></a>style-loader和css-loader</h2><p>style-loader把js字符串生成为style节点；css-loader是把css转换为js输出。两者经常一起使用。</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev css-loader\n</code></pre><h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：</p>\n<pre><code>module:{\n    rules:[{\n        test:/\\.css$/,\n        use:[\n          { loader:&quot;stycss-loader&quot; },\n          { loader:&quot;css-loader&quot; }\n        ]\n    }]\n}\n</code></pre><h2 id=\"html-loader\"><a href=\"#html-loader\" class=\"headerlink\" title=\"html-loader\"></a>html-loader</h2><p>html-loader是把html文件转换为js.  </p>\n<h2 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev html-loader\n</code></pre><h2 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：  </p>\n<pre><code>module:{\n    rules:[{\n        test:/\\.html$/,\n        use:[\n            {\n                loader:&quot;html-loader&quot;,\n                option: {\n                    minimize:true\n                }\n            }\n        ]\n    }]\n}\n</code></pre><h2 id=\"less-loader\"><a href=\"#less-loader\" class=\"headerlink\" title=\"less-loader\"></a>less-loader</h2><p>less-loader是把less编译为css.  </p>\n<h2 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev less-loader\n</code></pre><h2 id=\"使用-3\"><a href=\"#使用-3\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：</p>\n<pre><code>module:{\n    rules:[\n        {\n            test:/\\.less$/,\n            use:[\n                {\n                    loader:&quot;style-loader&quot;\n                },\n                {\n                    loader:&quot;css-loader&quot;\n                },\n                {\n                    loader:&quot;less-loader&quot;\n                }\n            ]\n        }\n    ]\n}\n</code></pre><h2 id=\"sass-loader\"><a href=\"#sass-loader\" class=\"headerlink\" title=\"sass-loader\"></a>sass-loader</h2><p>sass-loader是将sass编译为css。</p>\n<h2 id=\"安装-4\"><a href=\"#安装-4\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev sass-loader\n</code></pre><h2 id=\"使用-4\"><a href=\"#使用-4\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：  </p>\n<pre><code>modu:{\n    rules:[\n        {\n            test:/.\\scss$/,\n            use:[\n                {\n                    loader:&quot;style-loader&quot;\n                },\n                {\n                    loader:&quot;css-loader&quot;,\n                    option:{ sourceMap:true }\n                },\n                {\n                    loader:&quot;sass-loader&quot;,\n                    option:{ sourceMap:true }\n                }\n            ]\n        }\n    ]\n}\n</code></pre><p>sourceMap:true用于启用CSS的source map  </p>\n<h2 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h2><p>想要使用一个插件，你只需要require()它，然后把它添加到plugins数组中。  </p>\n<h2 id=\"BannerPlugin\"><a href=\"#BannerPlugin\" class=\"headerlink\" title=\"BannerPlugin\"></a>BannerPlugin</h2><p>内置插件BannerPlugin，用来给输出的文件头部添加注释信息。</p>\n<h2 id=\"使用-5\"><a href=\"#使用-5\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：   </p>\n<pre><code>plugins:[\n    new webpack.BannerPlugin(&apos;添加注释信息...&apos;)\n]\n</code></pre><h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h2><p>简化HTML文件的创建，为webpack包提供服务，可以用来生成HTML5文件。</p>\n<h2 id=\"安装-5\"><a href=\"#安装-5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>npm install --save-dev html-webpack-plugin\n</code></pre><h2 id=\"使用-6\"><a href=\"#使用-6\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在webpack.config.js文件配置如下：  </p>\n<pre><code>var webpack = require(&apos;webpack&apos;);\nvar path = require(&apos;path&apos;);\nvar HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nvar config = {\n    entry:&quot;./entry.js&quot;,\n    output:{\n        path：path.resolve(__path,&apos;build&apos;),\n        filename:&quot;bundle.js&quot;\n    }\n    plugins:[\n        new HtmlWebpackPlugin()\n    ]\n}\n\nmodule.exports = config;\n</code></pre><p>这将会生成一个包含bundle.js引入信息的HTML文件。</p>\n"},{"title":"数组交集/并集","date":"2017-11-24T10:11:04.000Z","_content":"今天用到处理数组交集的问题，顺手\b总结一下用原生API处理数组交集/并集的方法。\n\n首先介绍连个原生js方法：\n### 1.Array.prototype.filter()方法\n```js\narray.filter(function(currentValue,index,arr), thisValue)\n```\ncurrentValuex是当前元素，\nindex,当前元素下标，\narr当当期数组对象。  \n\n\bfilter()方法接收一个函数，和一个可选值thisValue，返回符合条件的一个新数组。  \n\n实例\n```js\nvar o = [345,23,1,2];\nvar b = o.filter(function(cur) {\n    return cur > 40;\n})//b = [345]\n```\n\n### 2.Array.prototype.reduce()方法\n\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n\nreduce()方法接收一个计数器函数和initialValue初始值（可选）  \n\n其中，函数的参数\ntotal结果值, currentValue当前元素, currentIndex当前元素索引值, arr当期数组对象  \n实例：\n```js\nvar a = [1,2];\nvar sum = a.reduce(function(res,cur,index) {\n    return res + cur\n})//3\n```\n\n### 多数组交集\n```js\n\n/* 求多个数组交集\n* @param arr [[1,,,],[b,,,],,,] 数组集合\n*/\nfunction intersection(arr) {\n    var result = arr[0];\n    arr.reduce(function(res,cur,index){\n        result = result.filter(function(n){\n            return cur.indexOf(n)!=-1;\n        })\n        return result;\n    })\n    return result；\n}\n\nvar a = [[1,2,11],[11,11,2,1,3]];\nvar res = intersection(a);\nconsole.log(res);//[1,2,11]\n\n```\n###  多数组并集\n```js\nfunction merge() {\n    return Array.prototype.concat.apply([], arguments)\n}\nmerge(arr1,arr2,arr3,...)\nvar arr1 = [1,2],\narr2 = [3],\narr3 = [2];\nvar union = merge(arr1,arr2,arr3)//[1,2,3,2]\n```\n### ES7有更简洁的方法\n### 交集\n\n```js\nlet a = [1,2]\nlet b = [2,3]\nlet intersection = a.filter(v => b.includes(v))console.log(intersection)//[2]\n```\n\n### 并集\n```js\nlet a = [1]\nlet b = [2]\nlet union = a.concat(b.filter(v => !a.includes(v)))\nconsole.log(union)//[1,2]\n```\n\n### 判断元素是否在数组中\n```js\n/** 判断参数值是否在数组中\n   * @param id 参数值\n   * @param source 源数组\n   */\n  var inArray = function (id, source) {\n    var inFlag = false;\n    source.map(item => {\n      if (id == item) {\n        inFlag = true;\n      }\n    })\n    return inFlag;\n  }\n  //使用\n  var id = 1;\n  var arr = [1,3,4];\n  var isInArray = inArray(id,arr);//true\n```","source":"_posts/数组交集-并集.md","raw":"---\ntitle: 数组交集/并集\ndate: 2017-11-24 18:11:04\ntags:\n    - JavaScript\n    - frontend\n---\n今天用到处理数组交集的问题，顺手\b总结一下用原生API处理数组交集/并集的方法。\n\n首先介绍连个原生js方法：\n### 1.Array.prototype.filter()方法\n```js\narray.filter(function(currentValue,index,arr), thisValue)\n```\ncurrentValuex是当前元素，\nindex,当前元素下标，\narr当当期数组对象。  \n\n\bfilter()方法接收一个函数，和一个可选值thisValue，返回符合条件的一个新数组。  \n\n实例\n```js\nvar o = [345,23,1,2];\nvar b = o.filter(function(cur) {\n    return cur > 40;\n})//b = [345]\n```\n\n### 2.Array.prototype.reduce()方法\n\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n\nreduce()方法接收一个计数器函数和initialValue初始值（可选）  \n\n其中，函数的参数\ntotal结果值, currentValue当前元素, currentIndex当前元素索引值, arr当期数组对象  \n实例：\n```js\nvar a = [1,2];\nvar sum = a.reduce(function(res,cur,index) {\n    return res + cur\n})//3\n```\n\n### 多数组交集\n```js\n\n/* 求多个数组交集\n* @param arr [[1,,,],[b,,,],,,] 数组集合\n*/\nfunction intersection(arr) {\n    var result = arr[0];\n    arr.reduce(function(res,cur,index){\n        result = result.filter(function(n){\n            return cur.indexOf(n)!=-1;\n        })\n        return result;\n    })\n    return result；\n}\n\nvar a = [[1,2,11],[11,11,2,1,3]];\nvar res = intersection(a);\nconsole.log(res);//[1,2,11]\n\n```\n###  多数组并集\n```js\nfunction merge() {\n    return Array.prototype.concat.apply([], arguments)\n}\nmerge(arr1,arr2,arr3,...)\nvar arr1 = [1,2],\narr2 = [3],\narr3 = [2];\nvar union = merge(arr1,arr2,arr3)//[1,2,3,2]\n```\n### ES7有更简洁的方法\n### 交集\n\n```js\nlet a = [1,2]\nlet b = [2,3]\nlet intersection = a.filter(v => b.includes(v))console.log(intersection)//[2]\n```\n\n### 并集\n```js\nlet a = [1]\nlet b = [2]\nlet union = a.concat(b.filter(v => !a.includes(v)))\nconsole.log(union)//[1,2]\n```\n\n### 判断元素是否在数组中\n```js\n/** 判断参数值是否在数组中\n   * @param id 参数值\n   * @param source 源数组\n   */\n  var inArray = function (id, source) {\n    var inFlag = false;\n    source.map(item => {\n      if (id == item) {\n        inFlag = true;\n      }\n    })\n    return inFlag;\n  }\n  //使用\n  var id = 1;\n  var arr = [1,3,4];\n  var isInArray = inArray(id,arr);//true\n```","slug":"数组交集-并集","published":1,"updated":"2017-11-29T02:41:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb4xyzmm001vmo01tbwhlqls","content":"<p>今天用到处理数组交集的问题，顺手\b总结一下用原生API处理数组交集/并集的方法。</p>\n<p>首先介绍连个原生js方法：</p>\n<h3 id=\"1-Array-prototype-filter-方法\"><a href=\"#1-Array-prototype-filter-方法\" class=\"headerlink\" title=\"1.Array.prototype.filter()方法\"></a>1.Array.prototype.filter()方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></div></pre></td></tr></table></figure>\n<p>currentValuex是当前元素，<br>index,当前元素下标，<br>arr当当期数组对象。  </p>\n<p>\bfilter()方法接收一个函数，和一个可选值thisValue，返回符合条件的一个新数组。  </p>\n<p>实例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = [<span class=\"number\">345</span>,<span class=\"number\">23</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = o.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> cur &gt; <span class=\"number\">40</span>;</div><div class=\"line\">&#125;)<span class=\"comment\">//b = [345]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Array-prototype-reduce-方法\"><a href=\"#2-Array-prototype-reduce-方法\" class=\"headerlink\" title=\"2.Array.prototype.reduce()方法\"></a>2.Array.prototype.reduce()方法</h3><p>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p>\n<p>reduce()方法接收一个计数器函数和initialValue初始值（可选）  </p>\n<p>其中，函数的参数<br>total结果值, currentValue当前元素, currentIndex当前元素索引值, arr当期数组对象<br>实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res,cur,index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> res + cur</div><div class=\"line\">&#125;)<span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"多数组交集\"><a href=\"#多数组交集\" class=\"headerlink\" title=\"多数组交集\"></a>多数组交集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 求多个数组交集</span></div><div class=\"line\">* @param arr [[1,,,],[b,,,],,,] 数组集合</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intersection</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res,cur,index</span>)</span>&#123;</div><div class=\"line\">        result = result.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cur.indexOf(n)!=<span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> result；</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">11</span>],[<span class=\"number\">11</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>]];</div><div class=\"line\"><span class=\"keyword\">var</span> res = intersection(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">//[1,2,11]</span></div></pre></td></tr></table></figure>\n<h3 id=\"多数组并集\"><a href=\"#多数组并集\" class=\"headerlink\" title=\"多数组并集\"></a>多数组并集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.concat.apply([], <span class=\"built_in\">arguments</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">merge(arr1,arr2,arr3,...)</div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>],</div><div class=\"line\">arr2 = [<span class=\"number\">3</span>],</div><div class=\"line\">arr3 = [<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> union = merge(arr1,arr2,arr3)<span class=\"comment\">//[1,2,3,2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"ES7有更简洁的方法\"><a href=\"#ES7有更简洁的方法\" class=\"headerlink\" title=\"ES7有更简洁的方法\"></a>ES7有更简洁的方法</h3><h3 id=\"交集\"><a href=\"#交集\" class=\"headerlink\" title=\"交集\"></a>交集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> intersection = a.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> b.includes(v))<span class=\"built_in\">console</span>.log(intersection)<span class=\"comment\">//[2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"并集\"><a href=\"#并集\" class=\"headerlink\" title=\"并集\"></a>并集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> union = a.concat(b.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !a.includes(v)))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(union)<span class=\"comment\">//[1,2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"判断元素是否在数组中\"><a href=\"#判断元素是否在数组中\" class=\"headerlink\" title=\"判断元素是否在数组中\"></a>判断元素是否在数组中</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 判断参数值是否在数组中</span></div><div class=\"line\">   * @param id 参数值</div><div class=\"line\">   * @param source 源数组</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">var</span> inArray = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> inFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">    source.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (id == item) &#123;</div><div class=\"line\">        inFlag = <span class=\"literal\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> inFlag;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//使用</span></div><div class=\"line\">  <span class=\"keyword\">var</span> id = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\">  <span class=\"keyword\">var</span> isInArray = inArray(id,arr);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>今天用到处理数组交集的问题，顺手\b总结一下用原生API处理数组交集/并集的方法。</p>\n<p>首先介绍连个原生js方法：</p>\n<h3 id=\"1-Array-prototype-filter-方法\"><a href=\"#1-Array-prototype-filter-方法\" class=\"headerlink\" title=\"1.Array.prototype.filter()方法\"></a>1.Array.prototype.filter()方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></div></pre></td></tr></table></figure>\n<p>currentValuex是当前元素，<br>index,当前元素下标，<br>arr当当期数组对象。  </p>\n<p>\bfilter()方法接收一个函数，和一个可选值thisValue，返回符合条件的一个新数组。  </p>\n<p>实例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = [<span class=\"number\">345</span>,<span class=\"number\">23</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = o.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> cur &gt; <span class=\"number\">40</span>;</div><div class=\"line\">&#125;)<span class=\"comment\">//b = [345]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Array-prototype-reduce-方法\"><a href=\"#2-Array-prototype-reduce-方法\" class=\"headerlink\" title=\"2.Array.prototype.reduce()方法\"></a>2.Array.prototype.reduce()方法</h3><p>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p>\n<p>reduce()方法接收一个计数器函数和initialValue初始值（可选）  </p>\n<p>其中，函数的参数<br>total结果值, currentValue当前元素, currentIndex当前元素索引值, arr当期数组对象<br>实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res,cur,index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> res + cur</div><div class=\"line\">&#125;)<span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"多数组交集\"><a href=\"#多数组交集\" class=\"headerlink\" title=\"多数组交集\"></a>多数组交集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 求多个数组交集</span></div><div class=\"line\">* @param arr [[1,,,],[b,,,],,,] 数组集合</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intersection</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res,cur,index</span>)</span>&#123;</div><div class=\"line\">        result = result.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cur.indexOf(n)!=<span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> result；</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">11</span>],[<span class=\"number\">11</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>]];</div><div class=\"line\"><span class=\"keyword\">var</span> res = intersection(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">//[1,2,11]</span></div></pre></td></tr></table></figure>\n<h3 id=\"多数组并集\"><a href=\"#多数组并集\" class=\"headerlink\" title=\"多数组并集\"></a>多数组并集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.concat.apply([], <span class=\"built_in\">arguments</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">merge(arr1,arr2,arr3,...)</div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>],</div><div class=\"line\">arr2 = [<span class=\"number\">3</span>],</div><div class=\"line\">arr3 = [<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> union = merge(arr1,arr2,arr3)<span class=\"comment\">//[1,2,3,2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"ES7有更简洁的方法\"><a href=\"#ES7有更简洁的方法\" class=\"headerlink\" title=\"ES7有更简洁的方法\"></a>ES7有更简洁的方法</h3><h3 id=\"交集\"><a href=\"#交集\" class=\"headerlink\" title=\"交集\"></a>交集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> intersection = a.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> b.includes(v))<span class=\"built_in\">console</span>.log(intersection)<span class=\"comment\">//[2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"并集\"><a href=\"#并集\" class=\"headerlink\" title=\"并集\"></a>并集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> union = a.concat(b.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> !a.includes(v)))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(union)<span class=\"comment\">//[1,2]</span></div></pre></td></tr></table></figure>\n<h3 id=\"判断元素是否在数组中\"><a href=\"#判断元素是否在数组中\" class=\"headerlink\" title=\"判断元素是否在数组中\"></a>判断元素是否在数组中</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 判断参数值是否在数组中</span></div><div class=\"line\">   * @param id 参数值</div><div class=\"line\">   * @param source 源数组</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">var</span> inArray = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> inFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">    source.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (id == item) &#123;</div><div class=\"line\">        inFlag = <span class=\"literal\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> inFlag;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//使用</span></div><div class=\"line\">  <span class=\"keyword\">var</span> id = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\">  <span class=\"keyword\">var</span> isInArray = inArray(id,arr);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjb4xyzht0001mo01pjevv6cb","tag_id":"cjb4xyzhx0003mo01mq6s5j5l","_id":"cjb4xyzi3000cmo01zbjg4sn3"},{"post_id":"cjb4xyzht0001mo01pjevv6cb","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzi4000emo01zeg6gqu4"},{"post_id":"cjb4xyzi4000dmo01qbpap73c","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzi7000hmo01d8xh3p3e"},{"post_id":"cjb4xyzi4000dmo01qbpap73c","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzi8000kmo01g7ub5jjq"},{"post_id":"cjb4xyzhw0002mo01bs0n46qq","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzia000pmo01a29cburd"},{"post_id":"cjb4xyzhw0002mo01bs0n46qq","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzib000rmo01ktytyddf"},{"post_id":"cjb4xyzhw0002mo01bs0n46qq","tag_id":"cjb4xyzi7000jmo01j7128b6f","_id":"cjb4xyzic000umo01whth9xp0"},{"post_id":"cjb4xyzi8000mmo01rzcmid3w","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzic000wmo01y2liazug"},{"post_id":"cjb4xyzi8000mmo01rzcmid3w","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzid000zmo01hhij5alz"},{"post_id":"cjb4xyzi8000mmo01rzcmid3w","tag_id":"cjb4xyzi7000jmo01j7128b6f","_id":"cjb4xyzif0011mo015jr24jyf"},{"post_id":"cjb4xyzi00005mo01j08m0767","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzig0014mo017pcn1v8d"},{"post_id":"cjb4xyzi10006mo01mu97m929","tag_id":"cjb4xyzib000smo014al7dtsv","_id":"cjb4xyzih0016mo01r09q2814"},{"post_id":"cjb4xyzi10008mo0163p05sqt","tag_id":"cjb4xyzid000ymo01s1r0gemk","_id":"cjb4xyzih0018mo01fick6xsj"},{"post_id":"cjb4xyzi10008mo0163p05sqt","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzih0019mo01dsnj36af"},{"post_id":"cjb4xyzi5000gmo01ohr03nhx","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzii001bmo01xawpcu8r"},{"post_id":"cjb4xyzi5000gmo01ohr03nhx","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzii001cmo01oimot4kg"},{"post_id":"cjb4xyzi5000gmo01ohr03nhx","tag_id":"cjb4xyzih0017mo01cix2mkq5","_id":"cjb4xyzii001emo016uejl9h1"},{"post_id":"cjb4xyzic000vmo011hvo579b","tag_id":"cjb4xyzih001amo0171agohz7","_id":"cjb4xyzii001fmo01edb3tisl"},{"post_id":"cjb4xyzic000vmo011hvo579b","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzij001hmo01upndkdzo"},{"post_id":"cjb4xyzic000vmo011hvo579b","tag_id":"cjb4xyzi7000jmo01j7128b6f","_id":"cjb4xyzij001imo012hth7xwm"},{"post_id":"cjb4xyzic000xmo01v019u6yo","tag_id":"cjb4xyzii001dmo01tvlhrh3q","_id":"cjb4xyzij001kmo01ym2o8kmz"},{"post_id":"cjb4xyzic000xmo01v019u6yo","tag_id":"cjb4xyzii001gmo016skqvdel","_id":"cjb4xyzij001lmo01elhh4o20"},{"post_id":"cjb4xyzic000xmo01v019u6yo","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzij001nmo01piuxg72l"},{"post_id":"cjb4xyzid0010mo01wnbz1x3s","tag_id":"cjb4xyzij001jmo01mg3o5afr","_id":"cjb4xyzik001pmo01uxloiwjt"},{"post_id":"cjb4xyzid0010mo01wnbz1x3s","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzik001qmo0121bl9lxe"},{"post_id":"cjb4xyzid0010mo01wnbz1x3s","tag_id":"cjb4xyzij001mmo01rmwd44rk","_id":"cjb4xyzik001rmo01pbcbke3b"},{"post_id":"cjb4xyzif0012mo01nx972jkx","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzik001smo01ebltyeg6"},{"post_id":"cjb4xyzif0012mo01nx972jkx","tag_id":"cjb4xyzii001dmo01tvlhrh3q","_id":"cjb4xyzik001tmo01zrjokl6i"},{"post_id":"cjb4xyzif0012mo01nx972jkx","tag_id":"cjb4xyzid000ymo01s1r0gemk","_id":"cjb4xyzik001umo01q4m0imai"},{"post_id":"cjb4xyzmm001vmo01tbwhlqls","tag_id":"cjb4xyzi3000amo01feu9i54h","_id":"cjb4xyzmq001xmo017z1nnapr"},{"post_id":"cjb4xyzmm001vmo01tbwhlqls","tag_id":"cjb4xyzi10007mo01qrds06ow","_id":"cjb4xyzmr001ymo01idowchwq"}],"Tag":[{"name":"CSS","_id":"cjb4xyzhx0003mo01mq6s5j5l"},{"name":"frontend","_id":"cjb4xyzi10007mo01qrds06ow"},{"name":"JavaScript","_id":"cjb4xyzi3000amo01feu9i54h"},{"name":"构建生态","_id":"cjb4xyzi7000jmo01j7128b6f"},{"name":"RegExp","_id":"cjb4xyzib000smo014al7dtsv"},{"name":"angular","_id":"cjb4xyzid000ymo01s1r0gemk"},{"name":"npm","_id":"cjb4xyzih0017mo01cix2mkq5"},{"name":"gulp","_id":"cjb4xyzih001amo0171agohz7"},{"name":"plugin","_id":"cjb4xyzii001dmo01tvlhrh3q"},{"name":"jquery","_id":"cjb4xyzii001gmo016skqvdel"},{"name":"svn","_id":"cjb4xyzij001jmo01mg3o5afr"},{"name":"版本控制","_id":"cjb4xyzij001mmo01rmwd44rk"}]}}